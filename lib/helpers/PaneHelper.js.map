{"version":3,"sources":["../../src/helpers/PaneHelper.jsx"],"names":["paneIsOpen","getSkiersList","getKeycardsList","orderitem","localItems","orderitemId","get","has","localItem","contact","params","map","getSkierData","skier","push","skierMap","id","lastname","firstname","birthdate","pictureurl","set","contactKeycardsList","prepareContactKeycards","finalKeycards","forEach","contactKeycard","loopContact","keycardnumber","cardNumber","index","findIndex","value","update","cardnumber","contacts","keycardnumbers"],"mappings":"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","file":"PaneHelper.js","sourcesContent":["import { Map, List } from 'immutable';\n\n/**\n * Check if a pane is opened\n * @param orderitem\n * @param localItems\n * @returns {boolean}\n */\nexport function paneIsOpen(orderitem, localItems) {\n  const orderitemId = orderitem.get('skierIndex');\n  if (!localItems.has(orderitemId)) {\n    return true;\n  }\n  const localItem = localItems.get(orderitemId);\n  if (!localItem.has('open')) {\n    return true;\n  }\n  return localItem.get('open');\n}\n\n/**\n * Build skiers list\n * @param contact\n * @returns {string}\n */\nexport function getSkiersList(contact, params) {\n  return contact\n    .get('skiers')\n    .map(skier => getSkierData(skier, params))\n    .push(getSkierData(contact, params));\n}\n\n/**\n * Prepare skier data exposed\n * @param skier\n * @returns {*}\n */\nfunction getSkierData(skier, params) {\n  const skierMap = new Map({\n    id: skier.get('id'),\n    lastname: skier.get('lastname'),\n    firstname: skier.get('firstname'),\n    birthdate: skier.get('birthdate'),\n    pictureurl: skier.get('pictureurl', ''),\n  });\n\n  if (!skier.has('lastkeycard')\n    || !skier.get('lastkeycard').has('keycardNumber')\n    || params.get('displayLastUsedKeycard') === false) {\n    return skierMap;\n  }\n\n  return skierMap.set('keycard', skier.get('lastkeycard').get('keycardNumber'));\n}\n\n/**\n * Get keycards list\n *\n * @param contact\n */\nexport function getKeycardsList(contact) {\n  // Prepare smart contact list\n  const contactKeycardsList = contact\n    .get('skiers')\n    .map(skier => (prepareContactKeycards(skier))) // add skiers data\n    .push(prepareContactKeycards(contact)); // add main contact data\n\n  let finalKeycards = new List();\n  contactKeycardsList.forEach((contactKeycard) => {\n    const loopContact = contactKeycard.get('contact');\n    contactKeycard.get('keycardnumbers', new List()).forEach((keycardnumber) => {\n      const cardNumber = keycardnumber.get('cardNumber');\n\n      const index = finalKeycards.findIndex((value) => {\n        return value.get('cardnumber') === cardNumber;\n      });\n\n      if (index >= 0) {\n        finalKeycards = finalKeycards.update(index, value => (\n          value.set('contacts', value.get('contacts').push(loopContact))\n        ));\n      } else {\n        finalKeycards = finalKeycards.push(new Map({\n          cardnumber: cardNumber,\n          contacts: new List().push(loopContact),\n        }));\n      }\n    });\n  });\n\n  return finalKeycards;\n}\n\n/**\n * Prepare keycard contact structure\n *\n * @param contact\n * @returns {Immutable.Map}\n */\nfunction prepareContactKeycards(contact) {\n  return new Map({\n    contact: {\n      id: contact.get('id'),\n      lastname: contact.get('lastname'),\n      firstname: contact.get('firstname'),\n      birthdate: contact.get('birthdate'),\n    },\n    keycardnumbers: contact.get('keycardnumbers', new List()),\n  });\n}\n\n"]}