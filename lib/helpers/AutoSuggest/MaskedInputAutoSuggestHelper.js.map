{"version":3,"sources":["../../../src/helpers/AutoSuggest/MaskedInputAutoSuggestHelper.jsx"],"names":["escapeRegexCharacters","getSuggestions","getSuggestionValue","renderSuggestion","renderInputComponent","tabKeycardType","str","replace","trim","value","keycards","params","isShortnumberMode","filter","keycard","shortnumber","cardnumber","escapedValue","minLength","get","length","regex","RegExp","test","console","log","getHightlightNameDisplay","text","query","escapeQuery","rgObj","exec","findPosition","index","start","substr","highlight","end","cardType","keycardNumber","mode","contacts","map","contact","id","lastname","firstname","inputProps"],"mappings":"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","file":"MaskedInputAutoSuggestHelper.js","sourcesContent":["import React from 'react';\nimport MaskedInput from 'react-text-mask';\nimport * as tabKeycardType from '../../constants/keycardsType';\n\n/**\n * @param str\n * @returns {string|*}\n */\nexport function escapeRegexCharacters(str) {\n  return str.replace(/_-_|_| /g, '').trim();\n}\n\n/**\n * Get Suggestions of keycards\n * @param value\n * @param keycards\n * @param params\n * @param isShortnumberMode\n * @returns {*}\n */\nexport function getSuggestions(value, keycards, params, isShortnumberMode = false) {\n  // Filter according to mode\n  keycards = keycards.filter(keycard => (\n    isShortnumberMode\n      ? typeof keycard.shortnumber !== 'undefined' && keycard.shortnumber !== null\n      : keycard.cardnumber !== null\n));\n\n  const escapedValue = escapeRegexCharacters(value.trim());\n  const minLength = params.get('minKeycardLengthAutoComplete', 0);\n\n  // if no min length and search text is empty => display all\n  if (minLength === 0 && escapedValue === '') {\n    return keycards;\n  }\n\n  // While length search text is inferior as min length configured, no return results\n  if (escapedValue.length < minLength) {\n    return [];\n  }\n\n  const regex = new RegExp(escapedValue, 'i');\n\n  // Filter the keycards in shortnumbers or cardnumbers\n  return keycards.filter(\n    keycard => regex.test(isShortnumberMode ? keycard.shortnumber : keycard.cardnumber),\n  );\n}\n\n/**\n *\n * @param keycard\n * @returns {*}\n */\nexport function getSuggestionValue(keycard) {\n  console.log('keycard', keycard);\n  return keycard.cardnumber;\n}\n\n/**\n * Render a suggestion display with highlight search string\n * @param text\n * @param query\n * @returns {*}\n */\nfunction getHightlightNameDisplay(text, query) {\n  const escapeQuery = escapeRegexCharacters(query.trim());\n  const regex = new RegExp(escapeQuery, 'i');\n  const rgObj = regex.exec(text);\n\n  if (rgObj === null) {\n    return text;\n  }\n  const findPosition = rgObj.index;\n\n  const start = findPosition > 0 ? text.substr(0, findPosition) : '';\n  const highlight = text.substr(findPosition, escapeQuery.length);\n  const end = text.substr(findPosition + escapeQuery.length);\n\n  return (\n    <span>\n      <span key=\"start\">{start}</span>\n      <span key=\"hightlight\" className=\"react-autosuggest__suggestion-match\">{highlight}</span>\n      <span key=\"end\">{end}</span>\n    </span>\n  );\n}\n\n/**\n * Render a suggestion display\n * @param skier\n * @param query\n * @returns {XML}\n */\nexport function renderSuggestion(keycard, { query }) {\n  const cardType = 'open';\n  const keycardNumber = keycard.mode === tabKeycardType[cardType]\n    ? keycard.shortnumber\n    : keycard.cardnumber;\n  return (\n    <span key=\"keycard_suggestion\" className=\"keycard_wrapper\">\n      <span className=\"keycard_suggestion\">\n        {getHightlightNameDisplay(keycardNumber, query)}\n      </span>\n      <span className=\"contact_suggestion\">\n        {\n          keycard.contacts.map(\n            contact => <span key={contact.id}> - {contact.lastname} {contact.firstname}</span>,\n          )\n        }\n      </span>\n    </span>\n  );\n}\n\n/**\n * @param inputProps\n * @returns {XML}\n */\nexport function renderInputComponent(inputProps) {\n  return (\n    <div className=\"inputContainer\">\n      <MaskedInput {...inputProps} />\n    </div>\n  );\n}\n"]}