{"version":3,"sources":["../../../src/helpers/AutoSuggest/MaskedInputAutoSuggestHelper.jsx"],"names":["escapeRegexCharacters","getSuggestions","getSuggestionValue","renderSuggestion","renderInputComponent","str","replace","trim","value","keycards","params","escapedValue","length","get","regex","RegExp","filter","test","keycard","cardnumber","getHightlightNameDisplay","text","query","escapeQuery","rgObj","exec","findPosition","index","start","substr","highlight","end","contacts","map","contact","id","lastname","firstname","inputProps"],"mappings":";;;;;QAGgBA,qB,GAAAA,qB;QAIAC,c,GAAAA,c;QAgBAC,kB,GAAAA,kB;QAyCAC,gB,GAAAA,gB;QAiBAC,oB,GAAAA,oB;;AAjFhB;;;;AACA;;;;;;AAEO,SAASJ,qBAAT,CAA+BK,GAA/B,EAAoC;AACzC,SAAOA,IAAIC,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,EAA4BC,IAA5B,EAAP;AACD;;AAEM,SAASN,cAAT,CAAwBO,KAAxB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiD;AACtD,MAAMC,eAAeX,sBAAsBQ,MAAMD,IAAN,EAAtB,CAArB;;AAEA,MAAII,aAAaC,MAAb,GAAsBF,OAAOG,GAAP,CAAW,8BAAX,EAA2C,CAA3C,CAA1B,EAAyE;AACvE,WAAO,EAAP;AACD;;AAED,MAAIF,iBAAiB,EAArB,EAAyB;AACvB,WAAOF,QAAP;AACD;;AAED,MAAMK,QAAQ,IAAIC,MAAJ,CAAWJ,YAAX,EAAyB,GAAzB,CAAd;;AAEA,SAAOF,SAASO,MAAT,CAAgB;AAAA,WAAWF,MAAMG,IAAN,CAAWC,QAAQC,UAAnB,CAAX;AAAA,GAAhB,CAAP;AACD;;AAEM,SAASjB,kBAAT,CAA4BgB,OAA5B,EAAqC;AAC1C,SAAOA,QAAQC,UAAf;AACD;;AAED;;;;;;;AAOA,SAASC,wBAAT,CAAkCC,IAAlC,EAAwCC,KAAxC,EAA+C;AAC7C,MAAMC,cAAcvB,sBAAsBsB,MAAMf,IAAN,EAAtB,CAApB;AACA,MAAMO,QAAQ,IAAIC,MAAJ,CAAWQ,WAAX,EAAwB,GAAxB,CAAd;AACA,MAAMC,QAAQV,MAAMW,IAAN,CAAWJ,IAAX,CAAd;;AAEA,MAAIG,UAAU,IAAd,EAAoB;AAClB,WAAOH,IAAP;AACD;AACD,MAAMK,eAAeF,MAAMG,KAA3B;;AAEA,MAAMC,QAAQF,eAAe,CAAf,GAAmBL,KAAKQ,MAAL,CAAY,CAAZ,EAAeH,YAAf,CAAnB,GAAkD,EAAhE;AACA,MAAMI,YAAYT,KAAKQ,MAAL,CAAYH,YAAZ,EAA0BH,YAAYX,MAAtC,CAAlB;AACA,MAAMmB,MAAMV,KAAKQ,MAAL,CAAYH,eAAeH,YAAYX,MAAvC,CAAZ;;AAEA,SACE;AAAA;AAAA;AACE;AAAA;AAAA,QAAM,KAAI,OAAV;AAAmBgB;AAAnB,KADF;AAEE;AAAA;AAAA,QAAM,KAAI,YAAV,EAAuB,WAAU,qCAAjC;AAAwEE;AAAxE,KAFF;AAGE;AAAA;AAAA,QAAM,KAAI,KAAV;AAAiBC;AAAjB;AAHF,GADF;AAOD;;AAED;;;;;;;AAOO,SAAS5B,gBAAT,CAA0Be,OAA1B,QAA8C;AAAA,MAATI,KAAS,QAATA,KAAS;;AACnD,SACE;AAAA;AAAA,MAAM,KAAI,oBAAV,EAA+B,WAAU,iBAAzC;AACE;AAAA;AAAA,QAAM,WAAU,oBAAhB;AACGF,+BAAyBF,QAAQC,UAAjC,EAA6CG,KAA7C;AADH,KADF;AAIE;AAAA;AAAA,QAAM,WAAU,oBAAhB;AAEIJ,cAAQc,QAAR,CAAiBC,GAAjB,CACE;AAAA,eAAW;AAAA;AAAA,YAAM,KAAKC,QAAQC,EAAnB;AAAA;AAA2BD,kBAAQE,QAAnC;AAAA;AAA8CF,kBAAQG;AAAtD,SAAX;AAAA,OADF;AAFJ;AAJF,GADF;AAcD;;AAEM,SAASjC,oBAAT,CAA8BkC,UAA9B,EAA0C;AAC/C,SACE;AAAA;AAAA,MAAK,WAAU,gBAAf;AACE,2DAAiBA,UAAjB;AADF,GADF;AAKD","file":"MaskedInputAutoSuggestHelper.js","sourcesContent":["import React from 'react';\nimport MaskedInput from 'react-text-mask';\n\nexport function escapeRegexCharacters(str) {\n  return str.replace(/_-_|_| /g, '').trim();\n}\n\nexport function getSuggestions(value, keycards, params) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue.length < params.get('minKeycardLengthAutoComplete', 0)) {\n    return [];\n  }\n\n  if (escapedValue === '') {\n    return keycards;\n  }\n\n  const regex = new RegExp(escapedValue, 'i');\n\n  return keycards.filter(keycard => regex.test(keycard.cardnumber));\n}\n\nexport function getSuggestionValue(keycard) {\n  return keycard.cardnumber;\n}\n\n/**\n * Render a suggestion display with highlight search string\n *\n * @param text\n * @param query\n * @returns {*}\n */\nfunction getHightlightNameDisplay(text, query) {\n  const escapeQuery = escapeRegexCharacters(query.trim());\n  const regex = new RegExp(escapeQuery, 'i');\n  const rgObj = regex.exec(text);\n\n  if (rgObj === null) {\n    return text;\n  }\n  const findPosition = rgObj.index;\n\n  const start = findPosition > 0 ? text.substr(0, findPosition) : '';\n  const highlight = text.substr(findPosition, escapeQuery.length);\n  const end = text.substr(findPosition + escapeQuery.length);\n\n  return (\n    <span>\n      <span key=\"start\">{start}</span>\n      <span key=\"hightlight\" className=\"react-autosuggest__suggestion-match\">{highlight}</span>\n      <span key=\"end\">{end}</span>\n    </span>\n  );\n}\n\n/**\n * Render a suggestion display\n *\n * @param skier\n * @param query\n * @returns {XML}\n */\nexport function renderSuggestion(keycard, { query }) {\n  return (\n    <span key=\"keycard_suggestion\" className=\"keycard_wrapper\">\n      <span className=\"keycard_suggestion\">\n        {getHightlightNameDisplay(keycard.cardnumber, query)}\n      </span>\n      <span className=\"contact_suggestion\">\n        {\n          keycard.contacts.map(\n            contact => <span key={contact.id}> - {contact.lastname} {contact.firstname}</span>\n          )\n        }\n      </span>\n    </span>\n  );\n}\n\nexport function renderInputComponent(inputProps) {\n  return (\n    <div className=\"inputContainer\">\n      <MaskedInput {...inputProps} />\n    </div>\n  );\n}\n"]}