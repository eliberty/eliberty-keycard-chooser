{"version":3,"sources":["../../../src/helpers/AutoSuggest/MaskedInputAutoSuggestHelper.jsx"],"names":["escapeRegexCharacters","str","replace","trim","getSuggestions","value","keycards","params","isShortnumberMode","filter","keycard","shortnumber","cardnumber","escapedValue","minLength","get","length","regex","RegExp","test","getSuggestionValue","getHightlightNameDisplay","text","query","escapeQuery","rgObj","exec","findPosition","index","start","substr","highlight","end","renderSuggestion","cardType","keycardNumber","mode","tabKeycardType","contacts","map","contact","id","lastname","firstname","renderInputComponent","inputProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MaskedInput from 'react-text-mask';\nimport * as tabKeycardType from '../../constants/keycardsType';\n\n/**\n * @param str\n * @returns {string|*}\n */\nexport function escapeRegexCharacters(str) {\n  return str.replace(/_-_|_| /g, '').trim();\n}\n\n/**\n * Get Suggestions of keycards\n * @param value\n * @param keycards\n * @param params\n * @param isShortnumberMode\n * @returns {*}\n */\nexport function getSuggestions(value, keycards, params, isShortnumberMode = false) {\n  // Filter according to mode\n  keycards = keycards.filter(keycard => (\n    isShortnumberMode\n      ? typeof keycard.shortnumber !== 'undefined' && keycard.shortnumber !== null\n      : keycard.cardnumber !== null\n));\n\n  const escapedValue = escapeRegexCharacters(value.trim());\n  const minLength = params.get('minKeycardLengthAutoComplete', 0);\n\n  // if no min length and search text is empty => display all\n  if (minLength === 0 && escapedValue === '') {\n    return keycards;\n  }\n\n  // While length search text is inferior as min length configured, no return results\n  if (escapedValue.length < minLength) {\n    return [];\n  }\n\n  const regex = new RegExp(escapedValue, 'i');\n\n  // Filter the keycards in shortnumbers or cardnumbers\n  return keycards.filter(\n    keycard => regex.test(isShortnumberMode ? keycard.shortnumber : keycard.cardnumber),\n  );\n}\n\n/**\n *\n * @param keycard\n * @returns {*}\n */\nexport function getSuggestionValue(keycard) {\n  return keycard.cardnumber;\n}\n\n/**\n * Render a suggestion display with highlight search string\n * @param text\n * @param query\n * @returns {*}\n */\nfunction getHightlightNameDisplay(text, query) {\n  const escapeQuery = escapeRegexCharacters(query.trim());\n  const regex = new RegExp(escapeQuery, 'i');\n  const rgObj = regex.exec(text);\n\n  if (rgObj === null) {\n    return text;\n  }\n  const findPosition = rgObj.index;\n\n  const start = findPosition > 0 ? text.substr(0, findPosition) : '';\n  const highlight = text.substr(findPosition, escapeQuery.length);\n  const end = text.substr(findPosition + escapeQuery.length);\n\n  return (\n    <span>\n      <span key=\"start\">{start}</span>\n      <span key=\"hightlight\" className=\"react-autosuggest__suggestion-match\">{highlight}</span>\n      <span key=\"end\">{end}</span>\n    </span>\n  );\n}\n\n/**\n * Render a suggestion display\n * @param skier\n * @param query\n * @returns {XML}\n */\nexport function renderSuggestion(keycard, { query }) {\n  const cardType = 'open';\n  const keycardNumber = keycard.mode === tabKeycardType[cardType]\n    ? keycard.shortnumber\n    : keycard.cardnumber;\n  return (\n    <span key=\"keycard_suggestion\" className=\"keycard_wrapper\">\n      <span className=\"keycard_suggestion\">\n        {getHightlightNameDisplay(keycardNumber, query)}\n      </span>\n      <span className=\"contact_suggestion\">\n        {\n          keycard.contacts.map(\n            contact => <span key={contact.id}> - {contact.lastname} {contact.firstname}</span>,\n          )\n        }\n      </span>\n    </span>\n  );\n}\n\n/**\n * @param inputProps\n * @returns {XML}\n */\nexport function renderInputComponent(inputProps) {\n  return (\n    <div className=\"inputContainer\">\n      <MaskedInput {...inputProps} />\n    </div>\n  );\n}\n"],"file":"MaskedInputAutoSuggestHelper.js"}