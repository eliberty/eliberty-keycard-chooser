{"version":3,"sources":["../../src/helpers/MaskHelper.jsx"],"names":["verifyKeycard","cardNumber","card","patternSD","patternTA","patternALFI","patternOPEN","patternSWISSPASS","patternVERBIER","tabKeycardType","sd","length","test","indexOf","split","ta","alfi","open","swisspass","verbier"],"mappings":";;;;;;;;;AAAA;;;;;;AAEA;;;;;;AAMO,SAASA,aAAT,CAAuBC,UAAvB,EAAmCC,IAAnC,EAAyC;AAC9C,MAAMC,SAAS,GAAG,8BAAlB;AACA,MAAMC,SAAS,GAAG,4DAAlB;AACA,MAAMC,WAAW,GAAG,0CAApB;AACA,MAAMC,WAAW,GAAG,4BAApB;AACA,MAAMC,gBAAgB,GAAG,kEAAzB;AACA,MAAMC,cAAc,GAAG,oBAAvB,CAN8C,CAQ9C;;AACA,UAAQN,IAAR;AACE,SAAKO,cAAc,CAACC,EAApB;AAAwB;AACtB,YAAIT,UAAU,CAACU,MAAX,GAAoB,EAApB,IAA0B,CAACR,SAAS,CAACS,IAAV,CAAeX,UAAf,CAA3B,IACC,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,EAAkB,IAAlB,EAAwBY,OAAxB,CAAgCZ,UAAU,CAACa,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAhC,MAA8D,CAAC,CADpE,EACuE;AACrE,iBAAO,KAAP;AACD;;AACD;AACD;;AACD,SAAKL,cAAc,CAACM,EAApB;AAAwB;AACtB,YAAId,UAAU,CAACU,MAAX,GAAoB,EAApB,IAA0B,CAACP,SAAS,CAACQ,IAAV,CAAeX,UAAf,CAA/B,EAA2D;AACzD,iBAAO,KAAP;AACD;;AACD;AACD;;AACD,SAAKQ,cAAc,CAACO,IAApB;AAA0B;AACxB,YAAIf,UAAU,CAACU,MAAX,GAAoB,EAApB,IAA0B,CAACN,WAAW,CAACO,IAAZ,CAAiBX,UAAjB,CAA/B,EAA6D;AAC3D,iBAAO,KAAP;AACD;;AACD;AACD;;AACD,SAAKQ,cAAc,CAACQ,IAApB;AAA0B;AACxB,YAAI,CAACX,WAAW,CAACM,IAAZ,CAAiBX,UAAjB,CAAL,EAAmC;AACjC,iBAAO,KAAP;AACD;;AACD;AACD;;AACD,SAAKQ,cAAc,CAACS,SAApB;AAA+B;AAC7B,YAAIjB,UAAU,CAACU,MAAX,GAAoB,EAApB,IAA0B,CAACJ,gBAAgB,CAACK,IAAjB,CAAsBX,UAAtB,CAA/B,EAAkE;AAChE,iBAAO,KAAP;AACD;;AACD;AACD;;AACD,SAAKQ,cAAc,CAACU,OAApB;AAA6B;AAC3B,eAAOX,cAAc,CAACI,IAAf,CAAoBX,UAApB,CAAP;AACD;;AACD;AAAS;AAAE;AAAQ;AAnCrB;;AAqCA,SAAO,IAAP;AACD","sourcesContent":["import * as tabKeycardType from '../constants/keycardsType';\n\n/**\n * Function to check the validation of the card number entered according to the type of card\n * @param cardNumber\n * @param card\n * @returns {boolean}\n */\nexport function verifyKeycard(cardNumber, card) {\n  const patternSD = /^[0-9]{1,2}-[0-9]{20}-[0-9]$/;\n  const patternTA = /^([a-zA-Z0-9]{8})[ -]([a-zA-Z0-9]{3})[ -]([a-zA-Z0-9]{3})$/;\n  const patternALFI = /^([0-9]{5})[ -]([0-9]{5})[ -]([0-9]{4})$/;\n  const patternOPEN = /^([0-9]{9})[ -]([0-9]{1})$/;\n  const patternSWISSPASS = /^([S|s]{1})([0-9]{2})[ -]([0-9]{3})[ -]([0-9]{3})[ -]([0-9]{3})$/;\n  const patternVERBIER = /^[A-B]{1}[0-9]{6}$/;\n\n  // verification the card type\n  switch (card) {\n    case tabKeycardType.sd: {\n      if (cardNumber.length < 25 || !patternSD.test(cardNumber)\n        || ['01', '1', '30', '25'].indexOf(cardNumber.split('-')[0]) === -1) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.ta: {\n      if (cardNumber.length < 16 || !patternTA.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.alfi: {\n      if (cardNumber.length < 16 || !patternALFI.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.open: {\n      if (!patternOPEN.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.swisspass: {\n      if (cardNumber.length < 15 || !patternSWISSPASS.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.verbier: {\n      return patternVERBIER.test(cardNumber);\n    }\n    default: { break; }\n  }\n  return true;\n}\n"],"file":"MaskHelper.js"}