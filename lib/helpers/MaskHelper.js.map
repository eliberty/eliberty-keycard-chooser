{"version":3,"sources":["../../src/helpers/MaskHelper.jsx"],"names":["verifyKeycard","tabKeycardType","cardnumber","index","card","reg","RegExp","cardNumber","replace","patternSD","patternTA","patternALFI","patternOPEN","sd","length","test","indexOf","split","ta","alfi","open"],"mappings":";;;;;QASgBA,a,GAAAA,a;;AAThB;;IAAYC,c;;;;AAEZ;;;;;;;AAOO,SAASD,aAAT,CAAuBE,UAAvB,EAAmCC,KAAnC,EAA0CC,IAA1C,EAAgD;AACrD,MAAMC,MAAM,IAAIC,MAAJ,CAAW,UAAX,CAAZ;AACA,MAAMC,aAAaL,WAAWM,OAAX,CAAmBH,GAAnB,EAAwB,EAAxB,CAAnB;;AAEA,MAAMI,YAAY,8BAAlB;AACA,MAAMC,YAAY,4DAAlB;AACA,MAAMC,cAAc,0CAApB;AACA,MAAMC,cAAc,4BAApB;;AAEA;AACA,UAAQR,IAAR;AACE,SAAKH,eAAeY,EAApB;AAAwB;AACtB,YAAIN,WAAWO,MAAX,GAAoB,EAApB,IAA0B,CAACL,UAAUM,IAAV,CAAeR,UAAf,CAA3B,IACC,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,EAAkB,IAAlB,EAAwBS,OAAxB,CAAgCT,WAAWU,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAhC,MAA8D,CAAC,CADpE,EACuE;AACrE,iBAAO,KAAP;AACD;AACD;AACD;AACD,SAAKhB,eAAeiB,EAApB;AAAwB;AACtB,YAAIX,WAAWO,MAAX,GAAoB,EAApB,IAA0B,CAACJ,UAAUK,IAAV,CAAeR,UAAf,CAA/B,EAA2D;AACzD,iBAAO,KAAP;AACD;AACD;AACD;AACD,SAAKN,eAAekB,IAApB;AAA0B;AACxB,YAAIZ,WAAWO,MAAX,GAAoB,EAApB,IAA0B,CAACH,YAAYI,IAAZ,CAAiBR,UAAjB,CAA/B,EAA6D;AAC3D,iBAAO,KAAP;AACD;AACD;AACD;AACD,SAAKN,eAAemB,IAApB;AAA0B;AACxB,YAAIb,WAAWO,MAAX,GAAoB,EAApB,IAA0B,CAACF,YAAYG,IAAZ,CAAiBR,UAAjB,CAA/B,EAA6D;AAC3D,iBAAO,KAAP;AACD;AACD;AACD;AACD;AAAS;AAAE;AAAQ;AA1BrB;AA4BA,SAAO,IAAP;AACD","file":"MaskHelper.js","sourcesContent":["import * as tabKeycardType from '../constants/keycardsType';\n\n/**\n * Function to check the validation of the card number entered according to the type of card\n * @param cardNumber\n * @param index\n * @param card\n * @returns {boolean}\n */\nexport function verifyKeycard(cardnumber, index, card) {\n  const reg = new RegExp(/( )|(_)/g);\n  const cardNumber = cardnumber.replace(reg, '');\n\n  const patternSD = /^[0-9]{1,2}-[0-9]{20}-[0-9]$/;\n  const patternTA = /^([a-zA-Z0-9]{8})[ -]([a-zA-Z0-9]{3})[ -]([a-zA-Z0-9]{3})$/;\n  const patternALFI = /^([0-9]{5})[ -]([0-9]{5})[ -]([0-9]{4})$/;\n  const patternOPEN = /^([0-9]{9})[ -]([0-9]{1})$/;\n\n  // verification the card type\n  switch (card) {\n    case tabKeycardType.sd: {\n      if (cardNumber.length < 25 || !patternSD.test(cardNumber)\n        || ['01', '1', '30', '25'].indexOf(cardNumber.split('-')[0]) === -1) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.ta: {\n      if (cardNumber.length < 16 || !patternTA.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.alfi: {\n      if (cardNumber.length < 16 || !patternALFI.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.open: {\n      if (cardNumber.length < 11 || !patternOPEN.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    default: { break; }\n  }\n  return true;\n}\n"]}