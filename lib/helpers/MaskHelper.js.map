{"version":3,"sources":["../../src/helpers/MaskHelper.jsx"],"names":["verifyKeycard","tabKeycardType","cardNumber","card","patternSD","patternTA","patternALFI","patternOPEN","patternSWISSPASS","sd","length","test","indexOf","split","ta","alfi","open","swisspass"],"mappings":";;;;;QAQgBA,a,GAAAA,a;;AARhB;;IAAYC,c;;;;AAEZ;;;;;;AAMO,SAASD,aAAT,CAAuBE,UAAvB,EAAmCC,IAAnC,EAAyC;AAC9C,MAAMC,YAAY,8BAAlB;AACA,MAAMC,YAAY,4DAAlB;AACA,MAAMC,cAAc,0CAApB;AACA,MAAMC,cAAc,4BAApB;AACA,MAAMC,mBAAmB,kEAAzB;;AAEA;AACA,UAAQL,IAAR;AACE,SAAKF,eAAeQ,EAApB;AAAwB;AACtB,YAAIP,WAAWQ,MAAX,GAAoB,EAApB,IAA0B,CAACN,UAAUO,IAAV,CAAeT,UAAf,CAA3B,IACC,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,EAAkB,IAAlB,EAAwBU,OAAxB,CAAgCV,WAAWW,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAhC,MAA8D,CAAC,CADpE,EACuE;AACrE,iBAAO,KAAP;AACD;AACD;AACD;AACD,SAAKZ,eAAea,EAApB;AAAwB;AACtB,YAAIZ,WAAWQ,MAAX,GAAoB,EAApB,IAA0B,CAACL,UAAUM,IAAV,CAAeT,UAAf,CAA/B,EAA2D;AACzD,iBAAO,KAAP;AACD;AACD;AACD;AACD,SAAKD,eAAec,IAApB;AAA0B;AACxB,YAAIb,WAAWQ,MAAX,GAAoB,EAApB,IAA0B,CAACJ,YAAYK,IAAZ,CAAiBT,UAAjB,CAA/B,EAA6D;AAC3D,iBAAO,KAAP;AACD;AACD;AACD;AACD,SAAKD,eAAee,IAApB;AAA0B;AACxB,YAAId,WAAWQ,MAAX,GAAoB,EAApB,IAA0B,CAACH,YAAYI,IAAZ,CAAiBT,UAAjB,CAA/B,EAA6D;AAC3D,iBAAO,KAAP;AACD;AACD;AACD;AACD,SAAKD,eAAegB,SAApB;AAA+B;AAC7B,YAAIf,WAAWQ,MAAX,GAAoB,EAApB,IAA0B,CAACF,iBAAiBG,IAAjB,CAAsBT,UAAtB,CAA/B,EAAkE;AAChE,iBAAO,KAAP;AACD;AACD;AACD;AACD;AAAS;AAAE;AAAQ;AAhCrB;AAkCA,SAAO,IAAP;AACD","file":"MaskHelper.js","sourcesContent":["import * as tabKeycardType from '../constants/keycardsType';\n\n/**\n * Function to check the validation of the card number entered according to the type of card\n * @param cardNumber\n * @param card\n * @returns {boolean}\n */\nexport function verifyKeycard(cardNumber, card) {\n  const patternSD = /^[0-9]{1,2}-[0-9]{20}-[0-9]$/;\n  const patternTA = /^([a-zA-Z0-9]{8})[ -]([a-zA-Z0-9]{3})[ -]([a-zA-Z0-9]{3})$/;\n  const patternALFI = /^([0-9]{5})[ -]([0-9]{5})[ -]([0-9]{4})$/;\n  const patternOPEN = /^([0-9]{9})[ -]([0-9]{1})$/;\n  const patternSWISSPASS = /^([S|s]{1})([0-9]{2})[ -]([0-9]{3})[ -]([0-9]{3})[ -]([0-9]{3})$/;\n\n  // verification the card type\n  switch (card) {\n    case tabKeycardType.sd: {\n      if (cardNumber.length < 25 || !patternSD.test(cardNumber)\n        || ['01', '1', '30', '25'].indexOf(cardNumber.split('-')[0]) === -1) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.ta: {\n      if (cardNumber.length < 16 || !patternTA.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.alfi: {\n      if (cardNumber.length < 16 || !patternALFI.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.open: {\n      if (cardNumber.length < 11 || !patternOPEN.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    case tabKeycardType.swisspass: {\n      if (cardNumber.length < 15 || !patternSWISSPASS.test(cardNumber)) {\n        return false;\n      }\n      break;\n    }\n    default: { break; }\n  }\n  return true;\n}\n"]}