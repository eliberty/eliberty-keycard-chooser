{"version":3,"sources":["../../src/helpers/CardTypeHelper.jsx"],"names":["getCardNumberField","canCheckSwissPass","getSwissPassProperty","isCurrentCardNumberType","getCurrentCardNumberType","getCurrentCardTypeElement","getCurrentCardNumberValue","isCurrentCardNumberValid","getCardNumberTypes","getCardNumberTypeElement","getCardNumberTypeElementProperty","localItemInfo","get","swissPassElem","property","type","currentCardTypeElement"],"mappings":";;;;;QAOgBA,kB,GAAAA,kB;QAWAC,iB,GAAAA,iB;QAOAC,oB,GAAAA,oB;QAcAC,uB,GAAAA,uB;QASAC,wB,GAAAA,wB;QASAC,yB,GAAAA,yB;QAUAC,yB,GAAAA,yB;QAUAC,wB,GAAAA,wB;QASAC,kB,GAAAA,kB;QAUAC,wB,GAAAA,wB;QAaAC,gC,GAAAA,gC;;AA7GhB;;AAEA;;;;;AAKO,SAASV,kBAAT,CAA4BW,aAA5B,EAA2C;AAChD,SAAOA,cACJC,GADI,CACA,QADA,EACU,oBADV,EAEJA,GAFI,CAEA,YAFA,EAEc,oBAFd,CAAP;AAGD;;AAED;;;;;AAKO,SAASX,iBAAT,CAA2BU,aAA3B,EAA0C;AAC/C,MAAME,gBAAgBJ,yBAAyBE,aAAzB,EAAwC,WAAxC,CAAtB;AACA,SAAO,CAACE,cAAcD,GAAd,CAAkB,aAAlB,EAAiC,KAAjC,KACHC,cAAcD,GAAd,CAAkB,oBAAlB,EAAwC,KAAxC,CADG,IAEHC,cAAcD,GAAd,CAAkB,SAAlB,EAA6B,KAA7B,CAFE,MAEuC,IAF9C;AAGD;;AAEM,SAASV,oBAAT,CAA8BS,aAA9B,EAA6CG,QAA7C,EAAuD;AAC5D,SAAOH,cACJC,GADI,CACA,cADA,EACgB,oBADhB,EAEJA,GAFI,CAEA,eAFA,EAEiB,oBAFjB,EAGJA,GAHI,CAGAE,QAHA,EAGU,EAHV,CAAP;AAID;;AAED;;;;;;;AAOO,SAASX,uBAAT,CAAiCQ,aAAjC,EAAgDI,IAAhD,EAAsD;AAC3D,SAAOX,yBAAyBO,aAAzB,MAA4CI,IAAnD;AACD;;AAED;;;;;AAKO,SAASX,wBAAT,CAAkCO,aAAlC,EAAiD;AACtD,SAAOX,mBAAmBW,aAAnB,EAAkCC,GAAlC,CAAsC,aAAtC,EAAqD,EAArD,CAAP;AACD;;AAED;;;;;AAKO,SAASP,yBAAT,CAAmCM,aAAnC,EAAkD;AACvD,SAAOF,yBAAyBE,aAAzB,EAAwCP,yBAAyBO,aAAzB,CAAxC,CAAP;AACD;;AAED;;;;;;AAMO,SAASL,yBAAT,CAAmCK,aAAnC,EAAuE;AAAA,MAArBG,QAAqB,uEAAV,QAAU;;AAC5E,MAAME,yBAAyBX,0BAA0BM,aAA1B,CAA/B;AACA,SAAOK,uBAAuBJ,GAAvB,CAA2BE,QAA3B,EAAqC,EAArC,CAAP;AACD;;AAED;;;;;AAKO,SAASP,wBAAT,CAAkCI,aAAlC,EAAiD;AACtD,SAAOP,yBAAyBO,aAAzB,EAAwCC,GAAxC,CAA4C,OAA5C,EAAqD,KAArD,CAAP;AACD;;AAED;;;;;AAKO,SAASJ,kBAAT,CAA4BG,aAA5B,EAA2C;AAChD,SAAOX,mBAAmBW,aAAnB,EAAkCC,GAAlC,CAAsC,OAAtC,EAA+C,qBAA/C,CAAP;AACD;;AAED;;;;;;AAMO,SAASH,wBAAT,CAAkCE,aAAlC,EAAiDI,IAAjD,EAAuD;AAC5D,SAAOf,mBAAmBW,aAAnB,EACJC,GADI,CACA,OADA,EACS,qBADT,EAEJA,GAFI,CAEAG,IAFA,EAEM,oBAFN,CAAP;AAGD;;AAED;;;;;;;AAOO,SAASL,gCAAT,CAA0CC,aAA1C,EAAyDI,IAAzD,EAA+DD,QAA/D,EAAyE;AAC9E,SAAOL,yBAAyBE,aAAzB,EAAwCI,IAAxC,EAA8CH,GAA9C,CAAkDE,QAAlD,CAAP;AACD","file":"CardTypeHelper.js","sourcesContent":["import { Map, List } from 'immutable';\n\n/**\n * Return the cardNumber field (properties)\n *\n * @param localItemInfo\n */\nexport function getCardNumberField(localItemInfo) {\n  return localItemInfo\n    .get('fields', new Map())\n    .get('cardNumber', new Map());\n}\n\n/**\n * Function to check the validation of all fields necessary for check swisspass\n * @returns {boolean}\n * @param localItemInfo\n */\nexport function canCheckSwissPass(localItemInfo) {\n  const swissPassElem = getCardNumberTypeElement(localItemInfo, 'swisspass');\n  return (swissPassElem.get('formatValid', false)\n    && swissPassElem.get('zipcodeFormatValid', false)\n    && swissPassElem.get('checked', false)) === true;\n}\n\nexport function getSwissPassProperty(localItemInfo, property) {\n  return localItemInfo\n    .get('keycardsMask', new Map())\n    .get('swisspassElem', new Map())\n    .get(property, '');\n}\n\n/**\n * Check if current cardNumber type is corresponding to asked type\n *\n * @param localItemInfo\n * @param type\n * @returns {boolean}\n */\nexport function isCurrentCardNumberType(localItemInfo, type) {\n  return getCurrentCardNumberType(localItemInfo) === type;\n}\n\n/**\n * Get current cardNumber type\n *\n * @param localItemInfo\n */\nexport function getCurrentCardNumberType(localItemInfo) {\n  return getCardNumberField(localItemInfo).get('currentType', '');\n}\n\n/**\n * Get the current cardType element\n *\n * @param localItemInfo\n */\nexport function getCurrentCardTypeElement(localItemInfo) {\n  return getCardNumberTypeElement(localItemInfo, getCurrentCardNumberType(localItemInfo));\n}\n\n/**\n * Get cardNumber value by current type\n *\n * @param localItemInfo\n * @param property\n */\nexport function getCurrentCardNumberValue(localItemInfo, property = 'number') {\n  const currentCardTypeElement = getCurrentCardTypeElement(localItemInfo);\n  return currentCardTypeElement.get(property, '');\n}\n\n/**\n * Return if current cardNumber valid status\n *\n * @param localItemInfo\n */\nexport function isCurrentCardNumberValid(localItemInfo) {\n  return getCurrentCardNumberType(localItemInfo).get('valid', false);\n}\n\n/**\n * Return the cardNumber types available\n *\n * @param localItemInfo\n */\nexport function getCardNumberTypes(localItemInfo) {\n  return getCardNumberField(localItemInfo).get('types', new List());\n}\n\n/**\n * Get cardType element\n *\n * @param localItemInfo\n * @param type\n */\nexport function getCardNumberTypeElement(localItemInfo, type) {\n  return getCardNumberField(localItemInfo)\n    .get('types', new List())\n    .get(type, new Map());\n}\n\n/**\n * Get cardNumber element property value\n *\n * @param localItemInfo\n * @param type\n * @param property\n */\nexport function getCardNumberTypeElementProperty(localItemInfo, type, property) {\n  return getCardNumberTypeElement(localItemInfo, type).get(property);\n}\n"]}