{"version":3,"sources":["../../../src/components/OneMask/OneMask.jsx"],"names":["tabKeycardType","MaskHelper","OneMask","errorKey","localItemInfo","error","get","length","props","handleChangeCardNumber","bind","handleChangeAutoSuggestCardNumber","event","cardId","card","target","value","cardnumber","suggest","newValue","forEach","item","key","keycards","updateKeycardsMask","orderitem","changeCardNumber","index","reg","RegExp","cardNumber","replace","formatMessage","intl","errorLabel","id","defaultMessage","currentId","sd","updateFieldsErrors","ta","alfi","open","params","deleteKeyFieldsErrors","validKeycard","verifyKeycard","toUpperCase","renderedErrorInputMessage","Component","propTypes","object","isRequired","func","string","number"],"mappings":"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","file":"OneMask.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Map } from 'immutable';\nimport { injectIntl, intlShape } from 'react-intl';\nimport CardNumberField from '../CardNumberField/CardNumberField';\nimport * as tabKeycardType from '../../constants/keycardsType';\nimport * as MaskHelper from '../../helpers/MaskHelper';\n\n/**\n * One Mask\n */\nclass OneMask extends React.Component {\n  /**\n   * Display Error Message\n   * @param errorKey\n   * @param localItemInfo\n   * @returns {*}\n   */\n  static renderedErrorInputMessage(errorKey, localItemInfo) {\n    const error = localItemInfo.get('errors', new Map()).get(errorKey, '');\n\n    return error.length === 0\n      ? null\n      : <span className=\"errorInputKeyCard\">{error}</span>;\n  }\n\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.handleChangeCardNumber = this.handleChangeCardNumber.bind(this);\n    this.handleChangeAutoSuggestCardNumber = this.handleChangeAutoSuggestCardNumber.bind(this);\n  }\n\n  /**\n   * Change card number\n   * @param event\n   * @param cardId\n   */\n  handleChangeCardNumber(event, cardId, card) {\n    this.handleChangeAutoSuggestCardNumber(event.target.value, cardId, card, false);\n  }\n\n  /**\n   *\n   * @param cardnumber\n   * @param cardId\n   */\n  handleChangeAutoSuggestCardNumber(cardnumber, cardId, card, suggest = true) {\n    let newValue = '';\n    this.props.localItemInfo.get('keycardsMask').forEach((item, key) => {\n      if (key !== 'current' && key !== 'idCard' && key !== card) {\n        if (suggest) {\n          this.props.keycards.forEach((item, key) => {\n            if (item.get('shortnumber') === cardnumber || item.get('cardnumber') === cardnumber) {\n              newValue = card === 'sd' ? item.get('shortnumber') : item.get('cardnumber');\n            }\n          });\n          this.props.updateKeycardsMask(this.props.orderitem.get('id'), key, newValue);\n        } else {\n          this.props.updateKeycardsMask(this.props.orderitem.get('id'), key, newValue);\n        }\n      }\n    });\n\n    if (typeof cardnumber !== 'undefined') {\n      this.props.changeCardNumber(this.props.orderitem.get('id'), cardnumber);\n      this.props.updateKeycardsMask(this.props.orderitem.get('id'), card, cardnumber);\n    }\n  }\n\n  /**\n   * Function to check the length of the card number entered according to the type of card\n   * @param cardNumber\n   * @param index\n   * @param card\n   * @returns {boolean}\n   */\n  verifyLengthKeycard(cardnumber, index, card) {\n    const reg = new RegExp(/( )|(_)/g);\n    const cardNumber = cardnumber.replace(reg, '');\n    const errorKey = 'data.cardNumber';\n    const { formatMessage } = this.props.intl;\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.length', defaultMessage: 'no lenght' });\n    const currentId = this.props.localItemInfo.get('id');\n\n    // verification the card type\n    switch (card) {\n      case tabKeycardType.sd: {\n        if (cardNumber.length < 25) {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n          return false;\n        }\n        break;\n      }\n      case tabKeycardType.ta:\n      case tabKeycardType.alfi: {\n        if (cardNumber.length < 16) {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n          return false;\n        }\n        break;\n      }\n      case tabKeycardType.open: {\n        if (cardNumber.length < 11) {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n          return false;\n        }\n        break;\n      }\n      default: { break; }\n    }\n    return true;\n  }\n\n  render() {\n    const {\n      keycards,\n      params,\n      card,\n      index,\n      localItemInfo,\n      updateKeycardsMask,\n      deleteKeyFieldsErrors,\n      updateFieldsErrors,\n    } = this.props;\n\n    let validKeycard = false;\n    const errorKey = 'data.cardNumber';\n    const { formatMessage } = this.props.intl;\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'empty' });\n    const currentId = localItemInfo.get('id');\n    const cardNumber = localItemInfo.get('keycardsMask').get(card);\n\n    updateKeycardsMask(currentId, 'current', card);\n\n    if (cardNumber !== '') {\n      validKeycard = MaskHelper.verifyKeycard(cardNumber, index, tabKeycardType[card]);\n      if (validKeycard) {\n        deleteKeyFieldsErrors(currentId, errorKey);\n      }\n    } else {\n      updateFieldsErrors(currentId, errorKey, errorLabel);\n    }\n\n    return (\n      <div>\n        <CardNumberField\n          key={index}\n          id={index}\n          mode={tabKeycardType[card]}\n          keycards={keycards}\n          handleChangeCardNumber={(event) => {\n            this.handleChangeCardNumber(event, index, card);\n          }}\n          onChange={(event) => {\n            this.handleChangeCardNumber(event, index, card);\n          }}\n          onAutoSuggestSelected={(cardnumber) => {\n            this.handleChangeAutoSuggestCardNumber(cardnumber, index, card);\n          }}\n          cardNumber={cardNumber.toUpperCase()}\n          value={cardNumber}\n          params={params}\n        />\n        {cardNumber === '' || validKeycard === false ? OneMask.renderedErrorInputMessage(errorKey, localItemInfo) : ''}\n      </div>\n    );\n  }\n}\n\nOneMask.propTypes = {\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired, // generic params\n  localItemInfo: PropTypes.object.isRequired, // current local Item\n  orderitem: PropTypes.object.isRequired,\n  changeCardNumber: PropTypes.func.isRequired, // function to change cardnumber of item\n  updateKeycardsMask: PropTypes.func.isRequired, // function to update elements on a keycardsMask\n  deleteKeyFieldsErrors: PropTypes.func.isRequired, // function to delete key on fields errors\n  updateFieldsErrors: PropTypes.func.isRequired, // function to update fields errors,\n  card: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  intl: intlShape.isRequired, // for the internationalization\n};\n\nexport default injectIntl(OneMask);\n"]}