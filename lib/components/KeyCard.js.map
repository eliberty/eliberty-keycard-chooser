{"version":3,"sources":["../../src/components/KeyCard.jsx"],"names":["configs","ZIPCODE","placeholder","mask","KeyCard","errorKey","localItemInfo","error","get","Map","props","state","checkYes","hasSupport","checkNo","valid","openModalQR","handleChangeCardNumber","bind","handleChangeAutoSuggestCardNumber","changeValidationCard","handleChangeCheckSwisspass","handleChangeZipcode","handleChangeQRButton","value","setState","checked","onChangeCheck","event","type","target","property","currentId","newValue","stateUpdateCardNumberTypeProperty","checkValidKeycard","zipCode","pattern","isValid","test","deleteKeyFieldsErrors","intl","errorLabel","formatMessage","id","defaultMessage","updateFieldsErrors","cardnumber","suggest","skierIndex","orderitem","validKeycard","undefined","replace","RegExp","toUpperCase","forEach","item","key","includes","keycards","element","cardType","tabKeycardType","MaskHelper","verifyKeycard","popoverLink","keycardTypes","size","keySeq","toJS","map","renderedLabelTab","renderedSomeInputKeyCards","renderedInputOneKeyCard","first","cardNumber","updateCurrentCardNumberType","renderedCardNumberField","renderedLabelLinkPopover","renderedErrorInputMessage","className","labelKeycard","aux","isCurrentType","renderedContentForSwisspass","number","params","zipcodeValue","__html","keycardPictureSrc","fields","popover","handleChangeToggle","renderedContentCheckNo","renderedKeyCardTypesContent","React","Component","propTypes","PropTypes","object","isRequired","string","func","updateValidField","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl/dist/react-intl';\nimport { Map } from 'immutable';\nimport MaskedInput from 'react-text-mask';\nimport Switch from 'react-toggle-switch';\nimport PopoverQuestion from './PopoverQuestion';\nimport PopoverLink from './PopoverLink';\nimport CardNumberField from './CardNumberField';\nimport ModalQrCode from './ModalQrCode';\nimport * as tabKeycardType from '../constants/keycardsType';\nimport * as MaskHelper from '../helpers/MaskHelper';\nimport {\n  isCurrentCardNumberType,\n  getCurrentCardNumberValue,\n  isCurrentCardNumberValid,\n  getCardNumberTypes,\n  getCardNumberTypeElementProperty,\n  isSwissPassPropertyValid,\n} from '../helpers/CardTypeHelper';\n\nconst configs = {\n  ZIPCODE: {\n    placeholder: '0000',\n    mask: [\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/,\n    ],\n  },\n};\n\n/**\n * Keycard\n */\nclass KeyCard extends React.Component {\n  /**\n   * Display Error Message\n   * @param errorKey\n   * @param localItemInfo\n   * @returns {*}\n   */\n  static renderedErrorInputMessage(errorKey, localItemInfo) {\n    const error = localItemInfo.get('errors', new Map()).get(errorKey, '');\n    return <p className=\"errorInputKeyCard\">{error}</p>;\n  }\n\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkYes: !props.hasSupport,\n      checkNo: props.hasSupport,\n      hasSupport: props.hasSupport,\n      valid: true,\n      openModalQR: false,\n    };\n    this.handleChangeCardNumber = this.handleChangeCardNumber.bind(this);\n    this.handleChangeAutoSuggestCardNumber = this.handleChangeAutoSuggestCardNumber.bind(this);\n    this.changeValidationCard = this.changeValidationCard.bind(this);\n    this.handleChangeCheckSwisspass = this.handleChangeCheckSwisspass.bind(this);\n    this.handleChangeZipcode = this.handleChangeZipcode.bind(this);\n    this.handleChangeQRButton = this.handleChangeQRButton.bind(this);\n  }\n\n  /**\n   * Change boolean value for qrCode modal\n   *\n   * @param {boolean} value\n   *\n   */\n  handleChangeQRButton(value) {\n    this.setState({ openModalQR: value});\n  };\n\n  /**\n   * Change local state when click support change value\n   * @param checked\n   */\n  handleChangeToggle(checked) {\n    this.setState({\n      checkYes: checked,\n      checkNo: !checked,\n      hasSupport: !checked,\n    });\n    this.props.onChangeCheck(checked ? 'yes' : 'no');\n  }\n\n  /**\n   * Change card number\n   *\n   * @param event\n   * @param type\n   */\n  handleChangeCardNumber(event, type) {\n    this.handleChangeAutoSuggestCardNumber(event.target.value, type, false);\n  }\n\n  /**\n   * handle Change Check Swisspass\n   */\n  handleChangeCheckSwisspass() {\n    const type = 'swisspass';\n    const property = 'checked';\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const newValue = !getCardNumberTypeElementProperty(this.props.localItemInfo, type, property);\n\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, property, newValue);\n\n    this.props.checkValidKeycard(currentId);\n  }\n\n  /**\n   * handle Change Zipcode\n   * @param event\n   */\n  handleChangeZipcode(event) {\n    const type = 'swisspass';\n    const zipCode = event.target.value;\n    const errorKey = 'data.swisspass.zipcode';\n\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, 'zipcode', zipCode);\n\n    const pattern = /^[0-9]{4}$/;\n    const isValid = pattern.test(zipCode);\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, 'zipcodeFormatValid', isValid);\n\n    // Delete errors\n    this.props.deleteKeyFieldsErrors(currentId, errorKey);\n\n    if (!isValid) {\n      const { intl } = this.props;\n      const errorLabel = intl.formatMessage({ id: 'rp.checkout.customize.swisspass.zipcode.invalid', defaultMessage: 'invalid' });\n      this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n    } else {\n      this.props.checkValidKeycard(currentId);\n    }\n  }\n\n  /**\n   *\n   * @param cardnumber\n   * @param type\n   * @param suggest\n   */\n  handleChangeAutoSuggestCardNumber(cardnumber, type, suggest = true) {\n    let newValue = '';\n    const { intl } = this.props;\n    const errorKey = 'data.cardNumber';\n    const errorLabel = intl.formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'invalid' });\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const skierIndex = this.props.orderitem.get('skierIndex');\n\n    let validKeycard = getCardNumberTypeElementProperty(this.props.localItemInfo, type, 'formatValid');\n\n    if (cardnumber !== undefined && typeof cardnumber !== 'undefined') {\n      // Remove spaces on card number\n      cardnumber = cardnumber.replace(new RegExp(/( )|(_)/g), '');\n      // Force SwissPass number to uppercase\n      if (type === 'swisspass') {\n        cardnumber = cardnumber.toUpperCase();\n      }\n\n      // Update others card types values\n      getCardNumberTypes(this.props.localItemInfo).forEach((item, key) => {\n        if (![type, 'swisspass'].includes(key)) {\n          if (suggest) {\n            this.props.keycards.forEach((element) => {\n              if (element.get('shortnumber') === cardnumber || element.get('cardnumber') === cardnumber) {\n                newValue = type === 'sd' ? element.get('shortnumber') : element.get('cardnumber');\n              }\n            });\n          }\n          this.props.stateUpdateCardNumberTypeProperty(skierIndex, key, 'number', newValue);\n        }\n      });\n\n      // Delete errors\n      this.props.deleteKeyFieldsErrors(currentId, errorKey);\n\n      const cardType = tabKeycardType[type];\n\n      // Save cardNumber value\n      this.props.stateUpdateCardNumberTypeProperty(skierIndex, type, 'number', cardnumber);\n\n      // verification keycard number is correct\n      if (cardnumber !== '' || cardnumber !== undefined) {\n        validKeycard = MaskHelper.verifyKeycard(cardnumber, cardType);\n\n        this.props.stateUpdateCardNumberTypeProperty(skierIndex, type, 'formatValid', validKeycard);\n        this.changeValidationCard(validKeycard);\n\n        this.props.checkValidKeycard(skierIndex);\n\n        // Keycard mask is valid\n        if (!validKeycard) {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n      } else {\n        this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param value\n   */\n  changeValidationCard(value) {\n    this.setState({ valid: value });\n  }\n\n  /**\n   * Content for popover link\n   * @returns {*}\n   */\n  renderedLabelLinkPopover() {\n    return this.props.popoverLink.get('labelKeycardInfo') !== null\n      ? <PopoverLink popoverLink={this.props.popoverLink} index={this.props.orderitem.get('skierIndex')} />\n      : '';\n  }\n\n  /**\n   * Render keycard types content (choice or not)\n   *\n   * @param keycardTypes\n   * @returns {XML}\n   */\n  renderedKeyCardTypesContent(keycardTypes) {\n    return (keycardTypes.size > 1\n      ? ( // Display Double Mask KeyCard\n        <div>\n          <ul className=\"nav nav-tabs nav-justified responsive-tabs\" role=\"tablist\">\n            { keycardTypes.keySeq().toJS().map(type => this.renderedLabelTab(type)) }\n          </ul>\n          <div className=\"tab-content\">\n            {\n              keycardTypes.keySeq().toJS().map(type => (\n                this.renderedSomeInputKeyCards(type)\n              ))\n            }\n          </div>\n        </div>\n      ) : (\n        // Display one Input for keyCard : get the first cardNumber type (first key of map)\n        this.renderedInputOneKeyCard(keycardTypes.keySeq().first())\n      )\n    );\n  }\n\n  /**\n   * Display of the simple input mask\n   *\n   * @param type\n   * @returns {*}\n   */\n  renderedInputOneKeyCard(type) {\n    const errorKey = 'data.cardNumber';\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    let cardNumber = getCurrentCardNumberValue(this.props.localItemInfo);\n\n    if (cardNumber === null || typeof cardNumber === 'undefined') {\n      cardNumber = '';\n    }\n\n    // Change current cardNumber type\n    this.props.updateCurrentCardNumberType(currentId, type);\n\n    return (\n      <div key={type}>\n        { this.renderedCardNumberField(type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        {\n          cardNumber === '' || !isCurrentCardNumberValid(this.props.localItemInfo)\n            ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo)\n            : '' }\n      </div>\n    );\n  }\n\n  /**\n   * Display labels for inputs - select active input\n   * @returns {XML}\n   * @param textType\n   * @param type\n   */\n  renderedLabelTab(type) {\n    let className = 'nav-item';\n    const { intl } = this.props;\n    const labelKeycard = `rp.checkout.keycard.label.${type}`;\n\n    if (isCurrentCardNumberType(this.props.localItemInfo, type)) {\n      className = `${className} active`;\n    }\n\n    return (\n      <li className={className} key={type}>\n        <a\n          className=\"nav-link text-center\"\n          data-toggle=\"tab\"\n          role=\"tab\"\n          href={`type${type}`}\n          onClick={() => {\n            // Change current cardNumber type\n            this.props.updateCurrentCardNumberType(this.props.localItemInfo.get('skierIndex'), type);\n          }}\n        >\n          {intl.formatMessage({ id: labelKeycard, defaultMessage: 'Keycard' })}\n        </a>\n      </li>\n    );\n  }\n\n  /**\n   * Display of the double input mask\n   *\n   * @param type\n   * @returns {XML}\n   */\n  renderedSomeInputKeyCards(type) {\n    let className = 'tab-pane fade in';\n    const aux = `tabKeycardType[type]${type}`;\n    const errorKey = 'data.cardNumber';\n    let cardNumber = getCurrentCardNumberValue(this.props.localItemInfo);\n\n    if (cardNumber === null || typeof cardNumber === 'undefined') {\n      cardNumber = '';\n    }\n\n    // Remove spaces on card number\n    cardNumber = cardNumber.replace(new RegExp(/( )|(_)/g), '');\n\n    const isCurrentType = isCurrentCardNumberType(this.props.localItemInfo, type);\n\n    // active tab on select\n    if (isCurrentType) {\n      className = `${className} active`;\n    }\n\n    return (\n      <div className={className} id={aux} role=\"tabpanel\" key={type}>\n        { this.renderedCardNumberField(type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        {\n          cardNumber === '' || !isCurrentCardNumberValid(this.props.localItemInfo)\n            ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo)\n            : ''\n        }\n        {\n          isCurrentCardNumberType(this.props.localItemInfo, 'swisspass')\n            ? this.renderedContentForSwisspass()\n            : null\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Render a cardNumber field\n   *\n   * @param type\n   * @param cardNumber\n   */\n  renderedCardNumberField(type, cardNumber) {\n    return (\n      <CardNumberField\n        key={type}\n        id={type}\n        validInput={this.state.valid}\n        mode={tabKeycardType[type]}\n        keycards={this.props.keycards}\n        handleChangeCardNumber={(event) => {\n          this.handleChangeCardNumber(event, type);\n        }}\n        onChange={(event) => {\n          this.handleChangeCardNumber(event, type);\n        }}\n        onAutoSuggestSelected={(number) => {\n          this.handleChangeAutoSuggestCardNumber(number, type);\n        }}\n        cardNumber={cardNumber}\n        value={cardNumber}\n        params={this.props.params}\n      />\n    );\n  }\n\n  /**\n   * Display content checked no\n   * @returns {*}\n   */\n  renderedContentCheckNo() {\n    return (this.state.checkNo\n      ? <div className=\"msgCheckNo\">\n        <p>\n          <FormattedMessage id=\"rp.checkout.ordercustom.nokeycard\" defaultMessage=\"no card\" />\n        </p>\n      </div>\n      : ''\n    );\n  }\n\n  /**\n   *\n   * @returns {null}\n   */\n  renderedContentForSwisspass() {\n    const zipcodeValue = getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'zipcode');\n    const mask = { ...configs['ZIPCODE']};\n    const { intl } = this.props;\n    const skierIndex = this.props.localItemInfo.get('skierIndex');\n\n    return (<div className=\"contentSwisspass\">\n      <div className=\"wrapperForm\">\n        <MaskedInput\n          {...mask}\n          name=\"zipcode-swiss\"\n          id=\"zipcode-swiss\"\n          data-control=\"true\"\n          onChange={event => this.handleChangeZipcode(event)}\n          value={typeof zipcodeValue !== 'undefined' ? zipcodeValue : ''}\n        />\n        <label htmlFor=\"zipcode-swiss\" className=\"control-label\">\n          <FormattedMessage id=\"rp.checkout.shippingaddress.zipcode\" defaultMessage=\"Zipcode\" />\n        </label>\n      </div>\n      {\n        !isSwissPassPropertyValid(this.props.localItemInfo, 'zipcodeFormatValid')\n          ? KeyCard.renderedErrorInputMessage('data.swisspass.zipcode', this.props.localItemInfo)\n          : ''\n      }\n      <input\n        type=\"checkbox\"\n        checked={getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'checked')}\n        name={`check-swisspass${skierIndex}`}\n        id={`check-swisspass${skierIndex}`}\n        // onChange={() => this.handleChangeCheckSwisspass()}\n        onClick={() => this.handleChangeCheckSwisspass()}\n      />\n      <label htmlFor={`check-swisspass${skierIndex}`} onChange={() => this.handleChangeCheckSwisspass(skierIndex)}>\n        <FormattedMessage id=\"rp.checkout.keycard.swisspass.check.text\" defaultMessage=\"I agree with the conditions of SwissPass\" />\n      </label>\n      <div dangerouslySetInnerHTML={{__html: intl.formatMessage({ id:'rp.checkout.keycard.swisspass.link', defaultMessage: 'Disclaimer' })}} />\n    </div>\n    );\n  }\n\n  render() {\n    const { id, keycardPictureSrc, keycardTypes, fields, popover } = this.props;\n    const { hasSupport } = this.state;\n\n    return (\n      <div className=\"blockPopover\" key={id}>\n        <div className=\"col-xs-4 keyCardAreaImage\">\n          <img src={keycardPictureSrc} alt=\"keycardPicture\" />\n        </div>\n        <div className=\"row\">\n          <form className=\"col-xs-12\">\n            <div>\n              <div className=\"keycard_area_title\">\n                <div className=\"keycardMessage\">\n                  <FormattedMessage id=\"rp.checkout.keycard.area.question\" defaultMessage=\"I have a card\" />\n                  <PopoverQuestion popover={popover} index={this.props.orderitem.get('skierIndex')} />\n                </div>\n                {fields.get('cardNumber').get('hasSupport', false) === true ?\n                  <Switch\n                    on={!hasSupport}\n                    onClick={() => {\n                      this.handleChangeToggle(hasSupport);\n                    }}\n                  />\n                  : ''\n                }\n              </div>\n            </div>\n\n            <div>\n              <div className=\"col-xs-8 form-group keyCardAreaForm\">\n                { this.renderedContentCheckNo() }\n\n                {this.state.checkYes\n                  ? <div className=\"msgCheckYes\">\n                    <button type=\"button\" className=\"qrCodeBtn\" onClick={() => this.handleChangeQRButton(true)}>\n                      <FormattedMessage id=\"rp.checkout.keycard.qrcode.button\" defaultMessage=\"QR Code\" />\n                      <span />\n                    </button>\n                    <ModalQrCode\n                     // handleChangeQRButton={this.handleChangeQRButton}\n                      open={true}\n                    />\n                    { this.renderedKeyCardTypesContent(keycardTypes) }\n                  </div>\n                  : ''}\n              </div>\n            </div>\n          </form>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nKeyCard.propTypes = {\n  intl: PropTypes.object.isRequired,\n  id: PropTypes.string.isRequired, // index\n  keycardPictureSrc: PropTypes.string.isRequired, // keycard picture src\n  keycardTypes: PropTypes.object.isRequired, // keycards to display the tabs\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired, // generic params\n  orderitem: PropTypes.object.isRequired,\n  fields: PropTypes.object.isRequired,\n  popover: PropTypes.object.isRequired, // content for popover info keycard\n  popoverLink: PropTypes.object.isRequired, // content for popover link keycard\n  localItemInfo: PropTypes.object.isRequired, // current local Item\n  onChangeCheck: PropTypes.func.isRequired, // function to make changes when checking\n  updateFieldsErrors: PropTypes.func.isRequired, // function to update fields errors\n  deleteKeyFieldsErrors: PropTypes.func.isRequired, // function to delete key on fields errors\n  updateCurrentCardNumberType: PropTypes.func.isRequired, // function to update current cardNumber type\n  updateValidField: PropTypes.func.isRequired, //\n  hasSupport: PropTypes.bool.isRequired, // boolean to know if support exists\n  stateUpdateCardNumberTypeProperty: PropTypes.func.isRequired, // function to update cardNumber property value\n  checkValidKeycard: PropTypes.func.isRequired, // function to check complete cardCardNumber valid\n};\n\nexport default injectIntl(KeyCard);\n"],"file":"KeyCard.js"}