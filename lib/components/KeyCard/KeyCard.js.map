{"version":3,"sources":["../../../src/components/KeyCard/KeyCard.jsx"],"names":["tabKeycardType","MaskHelper","KeyCard","errorKey","localItemInfo","error","get","props","state","checkYes","hasSupport","checkNo","valid","handleChangeCardNumber","bind","handleChangeAutoSuggestCardNumber","changeValidationCard","checked","setState","onChangeCheck","event","cardId","type","target","value","cardnumber","suggest","newValue","validKeycard","formatMessage","intl","errorLabel","id","defaultMessage","currentId","undefined","replace","RegExp","forEach","item","key","keycards","element","updateKeycardsMask","orderitem","deleteKeyFieldsErrors","verifyKeycard","updateValidatedKeycard","updateValidField","validateKeycard","updateFieldsErrors","changeCardNumber","popoverLink","index","cardNumber","params","className","aux","renderedCardNumberField","renderedLabelLinkPopover","renderedErrorInputMessage","keycardTypes","size","map","renderedLabelTab","renderedSomeInputKeyCards","renderedInputOneKeyCard","keycardPictureSrc","itemFieldsDefinition","popover","handleChangeToggle","renderedContentCheckNo","renderedListKeyCard","Component","propTypes","string","isRequired","object","func","bool"],"mappings":"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","file":"KeyCard.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Map } from 'immutable';\nimport Switch from 'react-toggle-switch';\nimport 'react-toggle-switch/dist/css/switch.min.css';\nimport PopoverQuestion from '../PopoverQuestion/PopoverQuestion';\nimport PopoverLink from '../PopoverLink/PopoverLink';\nimport CardNumberField from '../CardNumberField/CardNumberField';\nimport * as tabKeycardType from '../../constants/keycardsType';\nimport * as MaskHelper from '../../helpers/MaskHelper';\n\n/**\n * Keycard\n */\nclass KeyCard extends React.Component {\n  /**\n   * Display Error Message\n   * @param errorKey\n   * @param localItemInfo\n   * @returns {*}\n   */\n  static renderedErrorInputMessage(errorKey, localItemInfo) {\n    const error = localItemInfo.get('errors', new Map()).get(errorKey, '');\n    return <p className=\"errorInputKeyCard\">{error}</p>;\n  }\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkYes: !props.hasSupport,\n      checkNo: props.hasSupport,\n      hasSupport: props.hasSupport,\n      valid: true,\n    };\n    this.handleChangeCardNumber = this.handleChangeCardNumber.bind(this);\n    this.handleChangeAutoSuggestCardNumber = this.handleChangeAutoSuggestCardNumber.bind(this);\n    this.changeValidationCard = this.changeValidationCard.bind(this);\n  }\n\n  /**\n   * Change local state when click support change value\n   * @param checked\n   */\n  handleChangeToggle(checked) {\n    this.setState({\n      checkYes: checked,\n      checkNo: !checked,\n      hasSupport: !checked,\n    });\n    this.props.onChangeCheck(checked ? 'yes' : 'no');\n  }\n\n  /**\n   * Change card number\n   * @param event\n   * @param cardId\n   * @param type\n   */\n  handleChangeCardNumber(event, cardId, type) {\n    this.handleChangeAutoSuggestCardNumber(event.target.value, cardId, type, false);\n  }\n\n  /**\n   *\n   * @param cardnumber\n   * @param cardId\n   * @param type\n   * @param suggest\n   */\n  handleChangeAutoSuggestCardNumber(cardnumber, cardId, type, suggest = true) {\n    let newValue = '';\n    let validKeycard = this.props.localItemInfo.get('validateKeycard');\n    const { formatMessage } = this.props.intl;\n    const errorKey = 'data.cardNumber';\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'invalid' });\n    const currentId = this.props.localItemInfo.get('skierIndex');\n\n    if (cardnumber !== undefined && typeof cardnumber !== 'undefined') {\n      // Remove spaces on card number\n      cardnumber = cardnumber.replace(new RegExp(/( )|(_)/g), '');\n\n      // Update others card types values\n      this.props.localItemInfo.get('keycardsMask').forEach((item, key) => {\n        if (key !== 'current' && key !== 'idCard' && key !== type) {\n          if (suggest) {\n            this.props.keycards.forEach((element) => {\n              if (element.get('shortnumber') === cardnumber || element.get('cardnumber') === cardnumber) {\n                newValue = type === 'sd' ? element.get('shortnumber') : element.get('cardnumber');\n              }\n            });\n          }\n          this.props.updateKeycardsMask(this.props.orderitem.get('skierIndex'), key, newValue);\n        }\n      });\n\n      // Delete errors\n      this.deleteKeyFieldsErrors(currentId, errorKey);\n\n      // verification keycard number is correct\n      if (cardnumber !== '' || cardnumber !== undefined) {\n        validKeycard = MaskHelper.verifyKeycard(cardnumber, cardId, tabKeycardType[type]);\n        this.props.updateValidatedKeycard(currentId, validKeycard);\n        this.props.updateValidField(currentId, 'cardNumber', validKeycard);\n        this.changeValidationCard(validKeycard);\n\n        if (validKeycard) {\n          this.props.validateKeycard(currentId, cardnumber);\n        } else {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n      } else {\n        this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n      }\n      // Update current card type value\n      // if (typeof cardnumber !== 'undefined') {\n      this.props.changeCardNumber(this.props.orderitem.get('skierIndex'), cardnumber);\n      this.props.updateKeycardsMask(this.props.orderitem.get('skierIndex'), type, cardnumber);\n      // }\n    }\n  }\n\n  /**\n   *\n   * @param value\n   */\n  changeValidationCard(value) {\n    this.setState({ valid: value });\n  }\n\n  /**\n   * Content for popover link\n   * @returns {*}\n   */\n  renderedLabelLinkPopover() {\n    return this.props.popoverLink.get('labelKeycardInfo') !== null\n      ? <PopoverLink popoverLink={this.props.popoverLink} index={this.props.orderitem.get('skierIndex')} />\n      : '';\n  }\n\n  /**\n   *\n   * @param index\n   * @param type\n   * @param cardNumber\n   * @param errorKey\n   * @param className\n   */\n  renderedCardNumberField(index, type, cardNumber) {\n    return (\n      <CardNumberField\n        key={index}\n        id={index}\n        validInput={this.state.valid}\n        mode={tabKeycardType[type]}\n        keycards={this.props.keycards}\n        handleChangeCardNumber={(event) => {\n          this.handleChangeCardNumber(event, index, type);\n        }}\n        onChange={(event) => {\n          this.handleChangeCardNumber(event, index, type);\n        }}\n        onAutoSuggestSelected={(cardnumber) => {\n          this.handleChangeAutoSuggestCardNumber(cardnumber, index, type);\n        }}\n        cardNumber={cardNumber}\n        value={cardNumber}\n        params={this.props.params}\n      />\n    );\n  }\n\n\n  /**\n   * Display of the double input mask\n   * @param card\n   * @param index\n   * @param keycards\n   * @param params\n   * @returns {XML}\n   */\n  renderedSomeInputKeyCards(type, index) {\n    let className = 'tab-pane fade in';\n    const aux = `tabKeycardType[type]${index}`;\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const errorKey = 'data.cardNumber';\n    let cardNumber = this.props.localItemInfo.get('keycardsMask').get(type);\n\n    if (cardNumber === null || typeof cardNumber === 'undefined') {\n      cardNumber = '';\n    }\n\n    // Remove spaces on card number\n    cardNumber = cardNumber.replace(new RegExp(/( )|(_)/g), '');\n\n    // active tab on select\n    if (index === this.props.localItemInfo.get('keycardsMask').get('idCard')) {\n      className = `${className} active`;\n      this.props.changeCardNumber(currentId, cardNumber);\n      this.props.updateKeycardsMask(currentId, 'current', type);\n    }\n\n    return (\n      <div className={className} id={aux} role=\"tabpanel\" key={index}>\n        { this.renderedCardNumberField(index, type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        { cardNumber === '' || this.props.localItemInfo.get('validateKeycard') === false ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo) : '' }\n      </div>\n    );\n  }\n\n  /**\n   * Display of the simple input mask\n   * @param type\n   * @param index\n   * @returns {*}\n   */\n  renderedInputOneKeyCard(type, index) {\n    let validKeycard = false;\n    const errorKey = 'data.cardNumber';\n    const { formatMessage } = this.props.intl;\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'empty' });\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    let cardNumber = this.props.localItemInfo.get('keycardsMask').get(type);\n\n    if (cardNumber === null) {\n      cardNumber = '';\n    }\n\n    this.props.updateKeycardsMask(currentId, 'current', type);\n    /*\n        if (cardNumber !== '') {\n          validKeycard = MaskHelper.verifyKeycard(cardNumber, index, tabKeycardType[type]);\n          if (validKeycard) {\n            this.props.validateKeycard(currentId, cardNumber);\n            this.props.deleteKeyFieldsErrors(currentId, errorKey);\n          }\n        } else {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n    */\n    return (\n      <div key={index}>\n        { this.renderedCardNumberField(index, type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        { cardNumber === '' || this.props.localItemInfo.get('validateKeycard') === false ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo) : '' }\n      </div>\n    );\n  }\n\n  /**\n   * Display labels for inputs - select active input\n   * @param card\n   * @param index\n   * @returns {XML}\n   */\n  renderedLabelTab(type, index) {\n    const aux = `type${index}`;\n    let className = 'nav-item';\n\n    if (index === this.props.localItemInfo.get('keycardsMask').get('idCard')) {\n      className = `${className} active`;\n    }\n\n    return (\n      <li className={className} key={index}>\n        <a\n          className=\"nav-link text-center\"\n          data-toggle=\"tab\"\n          role=\"tab\"\n          href={aux}\n          onClick={() => {\n            this.props.updateKeycardsMask(this.props.localItemInfo.get('skierIndex'), 'idCard', index);\n          }}\n        >{type}</a>\n      </li>\n    );\n  }\n\n  /**\n   *\n   * @param keycardTypes\n   * @param keycards\n   * @param params\n   * @returns {XML}\n   */\n  renderedListKeyCard(keycardTypes) {\n    return (keycardTypes.size > 1\n      ? ( // Display Double Mask KeyCard\n        <div>\n          <ul className=\"nav nav-tabs nav-justified responsive-tabs\" role=\"tablist\">\n            { keycardTypes.map((type, index) => (\n              this.renderedLabelTab(tabKeycardType[type], index)\n            )) }\n          </ul>\n          <div className=\"tab-content\">\n            {\n              keycardTypes.map((type, index) => (\n                this.renderedSomeInputKeyCards(type, index)\n              ))\n            }\n          </div>\n        </div>\n      ) :\n      keycardTypes.map((type, index) => ( // Display one Input for keyCard\n        this.renderedInputOneKeyCard(type, index)\n      ))\n    );\n  }\n\n  /**\n   * Display content checked no\n   * @returns {*}\n   */\n  renderedContentCheckNo() {\n    return (this.state.checkNo\n      ? <div className=\"msgCheckNo\">\n        <p>\n          <FormattedMessage id=\"rp.checkout.ordercustom.nokeycard\" defaultMessage=\"no card\" />\n        </p>\n      </div>\n      : ''\n    );\n  }\n  \n  render() {\n    const { id, keycardPictureSrc, keycardTypes, itemFieldsDefinition, popover } = this.props;\n    const { hasSupport } = this.state;\n\n    return (\n      <div className=\"blockPopover test\" key={id}>\n\n        <div className=\"col-xs-4 keyCardAreaImage\">\n          <img src={keycardPictureSrc} alt=\"keycardPicture\" />\n        </div>\n        <div className=\"row\">\n          <form className=\"col-xs-12\">\n            <div>\n              <div className=\"keycard_area_title\">\n                <div className=\"keycardMessage\">\n                  <FormattedMessage id=\"rp.checkout.keycard.area.question\" defaultMessage=\"I have a card\" />\n                  <PopoverQuestion popover={popover} index={this.props.orderitem.get('skierIndex')} />\n                </div>\n                {itemFieldsDefinition.get('keycard').get('hasSupport', false) === true ?\n                  <Switch\n                    on={!hasSupport}\n                    onClick={() => {\n                      this.handleChangeToggle(hasSupport);\n                    }}\n                  />\n                  : ''\n                }\n              </div>\n            </div>\n\n            <div>\n              <div className=\"col-xs-8 form-group keyCardAreaForm\">\n                { this.renderedContentCheckNo() }\n\n                {this.state.checkYes\n                  ? <div className=\"msgCheckYes\">\n                    { this.renderedListKeyCard(keycardTypes) }\n                  </div>\n                  : ''}\n              </div>\n            </div>\n          </form>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nKeyCard.propTypes = {\n  id: PropTypes.string.isRequired, // index\n  keycardPictureSrc: PropTypes.string.isRequired, // keycard picture src\n  keycardTypes: PropTypes.object.isRequired, // keycards to display the tabs\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired, // generic params\n  orderitem: PropTypes.object.isRequired,\n  itemFieldsDefinition: PropTypes.object.isRequired,\n  popover: PropTypes.object.isRequired, // content for popover info keycard\n  popoverLink: PropTypes.object.isRequired, // content for popover link keycard\n  localItemInfo: PropTypes.object.isRequired, // current local Item\n  changeCardNumber: PropTypes.func.isRequired, // function to change cardnumber of item\n  onChangeCheck: PropTypes.func.isRequired, // function to make changes when checking\n  updateFieldsErrors: PropTypes.func.isRequired, // function to update fields errors\n  deleteKeyFieldsErrors: PropTypes.func.isRequired, // function to delete key on fields errors\n  updateKeycardsMask: PropTypes.func.isRequired, // function to update elements on a keycardsMask\n  // validateKeycard: function call api for verification of keycard number\n  validateKeycard: PropTypes.func.isRequired,\n  // updateValidatedKeycard: function to change boolean value of keycard number\n  updateValidatedKeycard: PropTypes.func.isRequired,\n  updateValidField: PropTypes.func.isRequired, //\n  hasSupport: PropTypes.bool.isRequired, // boolean to know if support exists\n  intl: intlShape.isRequired, // for the internationalization\n};\n\nexport default injectIntl(KeyCard);\n"]}