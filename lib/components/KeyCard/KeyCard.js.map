{"version":3,"sources":["../../../src/components/KeyCard/KeyCard.jsx"],"names":["tabKeycardType","MaskHelper","KeyCard","errorKey","localItemInfo","error","get","length","props","state","checkYes","hasSupport","checkNo","handleChangeCardNumber","bind","handleChangeAutoSuggestCardNumber","setState","onChangeCheck","event","cardId","type","target","value","cardnumber","suggest","newValue","validKeycard","formatMessage","intl","errorLabel","id","defaultMessage","currentId","undefined","replace","RegExp","forEach","item","key","keycards","element","updateKeycardsMask","orderitem","verifyKeycard","updateValidatedKeycard","updateValidField","validateKeycard","updateFieldsErrors","changeCardNumber","popoverLink","index","cardNumber","params","className","aux","renderedCardNumberField","renderedErrorInputMessage","keycardTypes","size","map","renderedLabelTab","renderedSomeInputKeyCards","renderedInputOneKeyCard","itemFieldsDefinition","popover","checkSupportYes","checkSupportNo","handleClickCheckYes","handleClickCheckNo","renderedContentCheckNo","renderedListKeyCard","renderedLabelLinkPopover","Component","propTypes","object","isRequired","func","deleteKeyFieldsErrors","updateOverlay","bool"],"mappings":"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","file":"KeyCard.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Map } from 'immutable';\nimport PopoverQuestion from '../PopoverQuestion/PopoverQuestion';\nimport PopoverLink from '../PopoverLink/PopoverLink';\nimport CardNumberField from '../CardNumberField/CardNumberField';\nimport * as tabKeycardType from '../../constants/keycardsType';\nimport * as MaskHelper from '../../helpers/MaskHelper';\n\n\n/**\n * Keycard\n */\nclass KeyCard extends React.Component {\n  /**\n   * Display Error Message\n   * @param errorKey\n   * @param localItemInfo\n   * @returns {*}\n   */\n  static renderedErrorInputMessage(errorKey, localItemInfo) {\n    const error = localItemInfo.get('errors', new Map()).get(errorKey, '');\n\n    return error.length === 0\n      ? null\n      : <span className=\"errorInputKeyCard\">{error}</span>;\n  }\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkYes: !props.hasSupport,\n      checkNo: props.hasSupport,\n      hasSupport: props.hasSupport,\n    };\n    this.handleChangeCardNumber = this.handleChangeCardNumber.bind(this);\n    this.handleChangeAutoSuggestCardNumber = this.handleChangeAutoSuggestCardNumber.bind(this);\n  }\n\n\n  /**\n   * Change local state when click on yes\n   */\n  handleClickCheckYes() {\n    this.setState({\n      checkYes: true,\n      checkNo: false,\n      hasSupport: false,\n    });\n    this.props.onChangeCheck('yes');\n  }\n\n  /**\n   * Change local state when click on no\n   */\n  handleClickCheckNo() {\n    this.setState({\n      checkYes: false,\n      checkNo: true,\n      hasSupport: true,\n    });\n    this.props.onChangeCheck('no');\n  }\n\n  /**\n   * Change card number\n   * @param event\n   * @param cardId\n   */\n  handleChangeCardNumber(event, cardId, type) {\n    this.handleChangeAutoSuggestCardNumber(event.target.value, cardId, type, false);\n  }\n\n  /**\n   *\n   * @param cardnumber\n   * @param cardId\n   */\n  handleChangeAutoSuggestCardNumber(cardnumber, cardId, type, suggest = true) {\n    let newValue = '';\n    let validKeycard = this.props.localItemInfo.get('validateKeycard');\n    const { formatMessage } = this.props.intl;\n    const errorKey = 'data.cardNumber';\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'invalid' });\n    const currentId = this.props.localItemInfo.get('id');\n\n    if (cardnumber !== undefined) {\n      // Remove spaces on card number\n      cardnumber = cardnumber.replace(new RegExp(/( )|(_)/g), '');\n\n      // Update others card types values\n      this.props.localItemInfo.get('keycardsMask').forEach((item, key) => {\n        if (key !== 'current' && key !== 'idCard' && key !== type) {\n          if (suggest) {\n            this.props.keycards.forEach((element) => {\n              if (element.get('shortnumber') === cardnumber || element.get('cardnumber') === cardnumber) {\n                newValue = type === 'sd' ? element.get('shortnumber') : element.get('cardnumber');\n              }\n            });\n          }\n          this.props.updateKeycardsMask(this.props.orderitem.get('id'), key, newValue);\n        }\n      });\n      // verification keycard number is correct\n      if (cardnumber !== '' || cardnumber !== undefined) {\n        validKeycard = MaskHelper.verifyKeycard(cardnumber, cardId, tabKeycardType[type]);\n        this.props.updateValidatedKeycard(currentId, validKeycard);\n        this.props.updateValidField(currentId, 'cardNumber', validKeycard);\n\n        if (validKeycard) {\n          this.props.validateKeycard(currentId, cardnumber);\n        } else {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n      } else {\n        this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n      }\n      // Update current card type value\n      // if (typeof cardnumber !== 'undefined') {\n      this.props.changeCardNumber(this.props.orderitem.get('id'), cardnumber);\n      this.props.updateKeycardsMask(this.props.orderitem.get('id'), type, cardnumber);\n      // }\n    }\n  }\n\n  /**\n   * Content for popover link\n   * @returns {*}\n   */\n  renderedLabelLinkPopover() {\n    return this.props.popoverLink.get('labelKeycardInfo') !== null\n      ? <PopoverLink popoverLink={this.props.popoverLink} />\n      : '';\n  }\n\n  /**\n   *\n   * @param index\n   * @param type\n   * @param cardNumber\n   * @param errorKey\n   * @param className\n   */\n  renderedCardNumberField(index, type, cardNumber) {\n    return (\n      <CardNumberField\n        key={index}\n        id={index}\n        mode={tabKeycardType[type]}\n        keycards={this.props.keycards}\n        handleChangeCardNumber={(event) => {\n          this.handleChangeCardNumber(event, index, type);\n        }}\n        onChange={(event) => {\n          this.handleChangeCardNumber(event, index, type);\n        }}\n        onAutoSuggestSelected={(cardnumber) => {\n          this.handleChangeAutoSuggestCardNumber(cardnumber, index, type);\n        }}\n        cardNumber={cardNumber}\n        value={cardNumber}\n        params={this.props.params}\n      />\n    );\n  }\n\n\n  /**\n   * Display of the double input mask\n   * @param card\n   * @param index\n   * @param keycards\n   * @param params\n   * @returns {XML}\n   */\n  renderedSomeInputKeyCards(type, index) {\n    let className = 'tab-pane fade in';\n    const aux = `tabKeycardType[type]${index}`;\n    const currentId = this.props.localItemInfo.get('id');\n    const errorKey = 'data.cardNumber';\n    let cardNumber = this.props.localItemInfo.get('keycardsMask').get(type);\n    // Remove spaces on card number\n    cardNumber = cardNumber.replace(new RegExp(/( )|(_)/g), '');\n\n    if (cardNumber === null) {\n      cardNumber = '';\n    }\n\n    // active tab on select\n    if (index === this.props.localItemInfo.get('keycardsMask').get('idCard')) {\n      className = `${className} active`;\n      this.props.changeCardNumber(currentId, cardNumber);\n      this.props.updateKeycardsMask(currentId, 'current', type);\n    }\n\n    return (\n      <div className={className} id={aux} role=\"tabpanel\" key={index}>\n        { this.renderedCardNumberField(index, type, cardNumber) }\n        { cardNumber === '' || this.props.localItemInfo.get('validateKeycard') === false ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo) : '' }\n      </div>\n    );\n  }\n\n  /**\n   * Display of the simple input mask\n   * @param type\n   * @param index\n   * @returns {*}\n   */\n  renderedInputOneKeyCard(type, index) {\n    let validKeycard = false;\n    const errorKey = 'data.cardNumber';\n    const { formatMessage } = this.props.intl;\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'empty' });\n    const currentId = this.props.localItemInfo.get('id');\n    const cardNumber = this.props.localItemInfo.get('keycardsMask').get(type);\n\n    this.props.updateKeycardsMask(currentId, 'current', type);\n    /*\n        if (cardNumber !== '') {\n          validKeycard = MaskHelper.verifyKeycard(cardNumber, index, tabKeycardType[type]);\n          if (validKeycard) {\n            this.props.validateKeycard(currentId, cardNumber);\n            this.props.deleteKeyFieldsErrors(currentId, errorKey);\n          }\n        } else {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n    */\n    return (\n      <div>\n        { this.renderedCardNumberField(index, type, cardNumber) }\n        { cardNumber === '' || this.props.localItemInfo.get('validateKeycard') === false ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo) : '' }\n      </div>\n    );\n  }\n\n  /**\n   * Display labels for inputs - select active input\n   * @param card\n   * @param index\n   * @returns {XML}\n   */\n  renderedLabelTab(type, index) {\n    const aux = `type${index}`;\n    let className = 'nav-item';\n\n    if (index === this.props.localItemInfo.get('keycardsMask').get('idCard')) {\n      className = `${className} active`;\n    }\n\n    return (\n      <li className={className} key={index}>\n        <a\n          className=\"nav-link text-center\"\n          data-toggle=\"tab\"\n          role=\"tab\"\n          href={aux}\n          onClick={() => {\n            this.props.updateKeycardsMask(this.props.localItemInfo.get('id'), 'idCard', index);\n          }}\n        >{type}</a>\n      </li>\n    );\n  }\n\n  /**\n   *\n   * @param keycardTypes\n   * @param keycards\n   * @param params\n   * @returns {XML}\n   */\n  renderedListKeyCard(keycardTypes) {\n    return (keycardTypes.size > 1\n        ? ( // Display Double Mask KeyCard\n          <div>\n            <ul className=\"nav nav-tabs nav-justified responsive-tabs\" role=\"tablist\">\n              { keycardTypes.map((type, index) => (\n                this.renderedLabelTab(tabKeycardType[type], index)\n              )) }\n            </ul>\n            <div className=\"tab-content\">\n              {\n                keycardTypes.map((type, index) => (\n                  this.renderedSomeInputKeyCards(type, index)\n                ))\n              }\n            </div>\n          </div>\n        ) :\n        keycardTypes.map((type, index) => ( // Display one Input for keyCard\n          this.renderedInputOneKeyCard(type, index)\n        ))\n    );\n  }\n\n  /**\n   * Display content checked no\n   * @returns {*}\n   */\n  renderedContentCheckNo() {\n    return (this.state.checkNo\n        ? <div className=\"msgCheckNo\">\n          <p>\n            <FormattedMessage id=\"rp.checkout.ordercustom.nokeycard\" defaultMessage=\"no card\" />\n          </p>\n        </div>\n        : ''\n    );\n  }\n\n\n  render() {\n    const { keycardTypes, itemFieldsDefinition, popover } = this.props;\n    const { hasSupport } = this.state;\n\n    let checkSupportYes = '';\n    let checkSupportNo = '';\n    if (hasSupport) {\n      checkSupportNo = 'checked';\n    } else {\n      checkSupportYes = 'checked';\n    }\n\n    return (\n      <div>\n        <div className=\"blockPopover\">\n          <p><FormattedMessage id=\"rp.checkout.keycard.area.question\" defaultMessage=\"I have a card\" /></p>\n\n          <PopoverQuestion popover={popover} />\n\n          <form>\n            <div className=\"form-group keyCardAreaForm\">\n              {itemFieldsDefinition.get('keycard').get('forceReloading') === false ?\n                <div>\n                  <input type=\"radio\" id={`inputCheckYes${this.props.orderitem.get('id')}`} name=\"card\" checked={checkSupportYes} value=\"yes\" onChange={() => { this.handleClickCheckYes(); }} />\n                  <label htmlFor={`inputCheckYes${this.props.orderitem.get('id')}`} className=\"keycardChoice\"><FormattedMessage id=\"rp.checkout.keycard.area.reponse.yes\" defaultMessage=\"yes\" /></label>\n                  <input type=\"radio\" id={`inputCheckNo${this.props.orderitem.get('id')}`} name=\"card\" value=\"non\" checked={checkSupportNo} onChange={() => { this.handleClickCheckNo(); }} />\n                  <label htmlFor={`inputCheckNo${this.props.orderitem.get('id')}`} className=\"keycardChoice\"><FormattedMessage id=\"rp.checkout.keycard.area.reponse.no\" defaultMessage=\"no\" /></label>\n                </div>\n                : ''\n              }\n\n              { this.renderedContentCheckNo() }\n\n              {this.state.checkYes\n                ? <div className=\"msgCheckYes\">\n                  { this.renderedListKeyCard(keycardTypes) }\n                  { this.renderedLabelLinkPopover() }\n                </div>\n                : ''}\n\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nKeyCard.propTypes = {\n  keycardTypes: PropTypes.object.isRequired, // keycards to display the tabs\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired, // generic params\n  orderitem: PropTypes.object.isRequired,\n  itemFieldsDefinition: PropTypes.object.isRequired,\n  popover: PropTypes.object.isRequired, // content for popover info keycard\n  popoverLink: PropTypes.object.isRequired, // content for popover link keycard\n  localItemInfo: PropTypes.object.isRequired, // current local Item\n  changeCardNumber: PropTypes.func.isRequired, // function to change cardnumber of item\n  onChangeCheck: PropTypes.func.isRequired, // function to make changes when checking\n  updateFieldsErrors: PropTypes.func.isRequired, // function to update fields errors\n  deleteKeyFieldsErrors: PropTypes.func.isRequired, // function to delete key on fields errors\n  updateKeycardsMask: PropTypes.func.isRequired, // function to update elements on a keycardsMask\n  // validateKeycard: function call api for verification of keycard number\n  validateKeycard: PropTypes.func.isRequired,\n  // updateValidatedKeycard: function to change boolean value of keycard number\n  updateValidatedKeycard: PropTypes.func.isRequired,\n  updateOverlay: PropTypes.func.isRequired, // function for display overlay\n  updateValidField: PropTypes.func.isRequired, //\n  hasSupport: PropTypes.bool.isRequired, // boolean to know if support exists\n  intl: intlShape.isRequired, // for the internationalization\n};\n\nexport default injectIntl(KeyCard);\n"]}