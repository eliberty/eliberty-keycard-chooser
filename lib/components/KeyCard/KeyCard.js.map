{"version":3,"sources":["../../../src/components/KeyCard/KeyCard.jsx"],"names":["tabKeycardType","MaskHelper","CardTypeHelper","KeyCard","errorKey","localItemInfo","error","get","props","state","checkYes","hasSupport","checkNo","valid","handleChangeCardNumber","bind","handleChangeAutoSuggestCardNumber","changeValidationCard","handleChangeCheckSwisspass","handleChangeZipcode","checked","setState","onChangeCheck","event","cardId","type","target","value","currentId","currentItem","newValue","updateSwissPassElem","validZipcode","verifyZipcode","orderitem","cardnumber","suggest","validKeycard","formatMessage","intl","errorLabel","id","defaultMessage","undefined","replace","RegExp","forEach","item","key","keycards","element","updateKeycardsMask","deleteKeyFieldsErrors","cardType","verifyKeycard","updateValidatedKeycard","updateValidField","swisspass","validateKeycard","canCheckSwissPass","zipCode","getSwissPassProperty","updateFieldsErrors","changeCardNumber","popoverLink","index","cardNumber","params","className","aux","renderedCardNumberField","renderedLabelLinkPopover","renderedErrorInputMessage","keycardTypes","size","map","renderedLabelTab","renderedSomeInputKeyCards","renderedInputOneKeyCard","keycardPictureSrc","itemFieldsDefinition","popover","handleChangeToggle","renderedContentCheckNo","renderedListKeyCard","renderedContentForSwisspass","zipcode","patternZipcode","test","Component","propTypes","string","isRequired","object","func","bool"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,c;;AACZ;;IAAYC,U;;AACZ;;IAAYC,c;;;;;;;;;;;;AAEZ;;;IAGMC,O;;;;;;AACJ;;;;;;8CAMiCC,Q,EAAUC,a,EAAe;AACxD,UAAMC,QAAQD,cAAcE,GAAd,CAAkB,QAAlB,EAA4B,oBAA5B,EAAuCA,GAAvC,CAA2CH,QAA3C,EAAqD,EAArD,CAAd;AACA,aAAO;AAAA;AAAA,UAAG,WAAU,mBAAb;AAAkCE;AAAlC,OAAP;AACD;AACD;;;;;;;AAIA,mBAAYE,KAAZ,EAAmB;AAAA;;AAAA,kHACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,gBAAU,CAACF,MAAMG,UADN;AAEXC,eAASJ,MAAMG,UAFJ;AAGXA,kBAAYH,MAAMG,UAHP;AAIXE,aAAO;AAJI,KAAb;AAMA,UAAKC,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BC,IAA5B,OAA9B;AACA,UAAKC,iCAAL,GAAyC,MAAKA,iCAAL,CAAuCD,IAAvC,OAAzC;AACA,UAAKE,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BF,IAA1B,OAA5B;AACA,UAAKG,0BAAL,GAAkC,MAAKA,0BAAL,CAAgCH,IAAhC,OAAlC;AACA,UAAKI,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBJ,IAAzB,OAA3B;AAbiB;AAclB;;AAED;;;;;;;;uCAImBK,O,EAAS;AAC1B,WAAKC,QAAL,CAAc;AACZX,kBAAUU,OADE;AAEZR,iBAAS,CAACQ,OAFE;AAGZT,oBAAY,CAACS;AAHD,OAAd;AAKA,WAAKZ,KAAL,CAAWc,aAAX,CAAyBF,UAAU,KAAV,GAAkB,IAA3C;AACD;;AAED;;;;;;;;;2CAMuBG,K,EAAOC,M,EAAQC,I,EAAM;AAC1C,WAAKT,iCAAL,CAAuCO,MAAMG,MAAN,CAAaC,KAApD,EAA2DH,MAA3D,EAAmEC,IAAnE,EAAyE,KAAzE;AACD;;AAED;;;;;;iDAG6B;AAC3B,UAAMG,YAAY,KAAKpB,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,YAA7B,CAAlB;AACA,UAAMsB,cAAc,KAAKrB,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6BqB,SAA7B,CAApB;AACA,UAAME,WAAW,CAACD,YAAYtB,GAAZ,CAAgB,eAAhB,EAAiCA,GAAjC,CAAqC,SAArC,CAAlB;;AAEA,WAAKC,KAAL,CAAWuB,mBAAX,CAA+BH,SAA/B,EAA0C,aAA1C,EAAyDE,QAAzD;AACD;;AAED;;;;;;;wCAIoBP,K,EAAO;AACzB,UAAMS,eAAe,KAAKC,aAAL,CAAmBV,MAAMG,MAAN,CAAaC,KAAhC,CAArB;AACA,WAAKnB,KAAL,CAAWuB,mBAAX,CAA+BG,UAAU3B,GAAV,CAAc,YAAd,CAA/B,EAA4D,cAA5D,EAA4EyB,YAA5E;AACD;;AAED;;;;;;;;;;sDAOkCG,U,EAAYX,M,EAAQC,I,EAAsB;AAAA;;AAAA,UAAhBW,OAAgB,uEAAN,IAAM;;AAC1E,UAAIN,WAAW,EAAf;AACA,UAAIO,eAAe,KAAK7B,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,iBAA7B,CAAnB;AAF0E,UAGlE+B,aAHkE,GAGhD,KAAK9B,KAAL,CAAW+B,IAHqC,CAGlED,aAHkE;;AAI1E,UAAMlC,WAAW,iBAAjB;AACA,UAAMoC,aAAaF,cAAc,EAAEG,IAAI,0CAAN,EAAkDC,gBAAgB,SAAlE,EAAd,CAAnB;AACA,UAAMd,YAAY,KAAKpB,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,YAA7B,CAAlB;;AAEA,UAAI4B,eAAeQ,SAAf,IAA4B,OAAOR,UAAP,KAAsB,WAAtD,EAAmE;AACjE;AACAA,qBAAaA,WAAWS,OAAX,CAAmB,IAAIC,MAAJ,CAAW,UAAX,CAAnB,EAA2C,EAA3C,CAAb;;AAEA;AACA,aAAKrC,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,cAA7B,EAA6CuC,OAA7C,CAAqD,UAACC,IAAD,EAAOC,GAAP,EAAe;AAClE,cAAIA,QAAQ,SAAR,IAAqBA,QAAQ,QAA7B,IAAyCA,QAAQvB,IAArD,EAA2D;AACzD,gBAAIW,OAAJ,EAAa;AACX,qBAAK5B,KAAL,CAAWyC,QAAX,CAAoBH,OAApB,CAA4B,UAACI,OAAD,EAAa;AACvC,oBAAIA,QAAQ3C,GAAR,CAAY,aAAZ,MAA+B4B,UAA/B,IAA6Ce,QAAQ3C,GAAR,CAAY,YAAZ,MAA8B4B,UAA/E,EAA2F;AACzFL,6BAAWL,SAAS,IAAT,GAAgByB,QAAQ3C,GAAR,CAAY,aAAZ,CAAhB,GAA6C2C,QAAQ3C,GAAR,CAAY,YAAZ,CAAxD;AACD;AACF,eAJD;AAKD;AACD,mBAAKC,KAAL,CAAW2C,kBAAX,CAA8B,OAAK3C,KAAL,CAAW0B,SAAX,CAAqB3B,GAArB,CAAyB,YAAzB,CAA9B,EAAsEyC,GAAtE,EAA2ElB,QAA3E;AACD;AACF,SAXD;;AAaA;AACA,aAAKtB,KAAL,CAAW4C,qBAAX,CAAiCxB,SAAjC,EAA4CxB,QAA5C;;AAEA;AACA,YAAI+B,eAAe,EAAf,IAAqBA,eAAeQ,SAAxC,EAAmD;AACjD,cAAMU,WAAWrD,eAAeyB,IAAf,CAAjB;AACAY,yBAAepC,WAAWqD,aAAX,CAAyBnB,UAAzB,EAAqCX,MAArC,EAA6C6B,QAA7C,CAAf;AACA,eAAK7C,KAAL,CAAW+C,sBAAX,CAAkC3B,SAAlC,EAA6CS,YAA7C;AACA,eAAK7B,KAAL,CAAWgD,gBAAX,CAA4B5B,SAA5B,EAAuC,YAAvC,EAAqDS,YAArD;AACA,eAAKpB,oBAAL,CAA0BoB,YAA1B;;AAEA;AACA,cAAIA,YAAJ,EAAkB;AAChB;AACA,gBAAIgB,aAAarD,eAAeyD,SAAhC,EAA2C;AACzC,mBAAKjD,KAAL,CAAWkD,eAAX,CAA2B9B,SAA3B,EAAsCO,UAAtC;AACD,aAFD,MAEO,IAAIjC,eAAeyD,iBAAf,CAAiC,KAAKnD,KAAL,CAAWH,aAA5C,CAAJ,EAAgE;AACrE,kBAAMuD,UAAU1D,eAAe2D,oBAAf,CAAoC,SAApC,CAAhB;AACA,mBAAKrD,KAAL,CAAWkD,eAAX,CAA2B9B,SAA3B,EAAsCO,UAAtC,EAAkDyB,OAAlD;AACD;AACF,WARD,MAQO;AACL,iBAAKpD,KAAL,CAAWsD,kBAAX,CAA8BlC,SAA9B,EAAyCxB,QAAzC,EAAmDoC,UAAnD;AACD;AACF,SAnBD,MAmBO;AACL,eAAKhC,KAAL,CAAWsD,kBAAX,CAA8BlC,SAA9B,EAAyCxB,QAAzC,EAAmDoC,UAAnD;AACD;AACD;AACA;AACA,aAAKhC,KAAL,CAAWuD,gBAAX,CAA4B,KAAKvD,KAAL,CAAW0B,SAAX,CAAqB3B,GAArB,CAAyB,YAAzB,CAA5B,EAAoE4B,UAApE;AACA,aAAK3B,KAAL,CAAW2C,kBAAX,CAA8B,KAAK3C,KAAL,CAAW0B,SAAX,CAAqB3B,GAArB,CAAyB,YAAzB,CAA9B,EAAsEkB,IAAtE,EAA4EU,UAA5E;AACA;AACD;AACF;;AAED;;;;;;;yCAIqBR,K,EAAO;AAC1B,WAAKN,QAAL,CAAc,EAAER,OAAOc,KAAT,EAAd;AACD;;AAED;;;;;;;+CAI2B;AACzB,aAAO,KAAKnB,KAAL,CAAWwD,WAAX,CAAuBzD,GAAvB,CAA2B,kBAA3B,MAAmD,IAAnD,GACH,uDAAa,aAAa,KAAKC,KAAL,CAAWwD,WAArC,EAAkD,OAAO,KAAKxD,KAAL,CAAW0B,SAAX,CAAqB3B,GAArB,CAAyB,YAAzB,CAAzD,GADG,GAEH,EAFJ;AAGD;;AAED;;;;;;;;;;;4CAQwB0D,K,EAAOxC,I,EAAMyC,U,EAAY;AAAA;;AAC/C,aACE;AACE,aAAKD,KADP;AAEE,YAAIA,KAFN;AAGE,oBAAY,KAAKxD,KAAL,CAAWI,KAHzB;AAIE,cAAMb,eAAeyB,IAAf,CAJR;AAKE,kBAAU,KAAKjB,KAAL,CAAWyC,QALvB;AAME,gCAAwB,gCAAC1B,KAAD,EAAW;AACjC,iBAAKT,sBAAL,CAA4BS,KAA5B,EAAmC0C,KAAnC,EAA0CxC,IAA1C;AACD,SARH;AASE,kBAAU,kBAACF,KAAD,EAAW;AACnB,iBAAKT,sBAAL,CAA4BS,KAA5B,EAAmC0C,KAAnC,EAA0CxC,IAA1C;AACD,SAXH;AAYE,+BAAuB,+BAACU,UAAD,EAAgB;AACrC,iBAAKnB,iCAAL,CAAuCmB,UAAvC,EAAmD8B,KAAnD,EAA0DxC,IAA1D;AACD,SAdH;AAeE,oBAAYyC,UAfd;AAgBE,eAAOA,UAhBT;AAiBE,gBAAQ,KAAK1D,KAAL,CAAW2D;AAjBrB,QADF;AAqBD;;AAGD;;;;;;;;;;;8CAQ0B1C,I,EAAMwC,K,EAAO;AACrC,UAAIG,YAAY,kBAAhB;AACA,UAAMC,+BAA6BJ,KAAnC;AACA,UAAMrC,YAAY,KAAKpB,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,YAA7B,CAAlB;AACA,UAAMH,WAAW,iBAAjB;AACA,UAAI8D,aAAa,KAAK1D,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,cAA7B,EAA6CA,GAA7C,CAAiDkB,IAAjD,CAAjB;;AAEA,UAAIyC,eAAe,IAAf,IAAuB,OAAOA,UAAP,KAAsB,WAAjD,EAA8D;AAC5DA,qBAAa,EAAb;AACD;;AAED;AACAA,mBAAaA,WAAWtB,OAAX,CAAmB,IAAIC,MAAJ,CAAW,UAAX,CAAnB,EAA2C,EAA3C,CAAb;;AAEA;AACA,UAAIoB,UAAU,KAAKzD,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,cAA7B,EAA6CA,GAA7C,CAAiD,QAAjD,CAAd,EAA0E;AACxE6D,oBAAeA,SAAf;AACA,aAAK5D,KAAL,CAAWuD,gBAAX,CAA4BnC,SAA5B,EAAuCsC,UAAvC;AACA,aAAK1D,KAAL,CAAW2C,kBAAX,CAA8BvB,SAA9B,EAAyC,SAAzC,EAAoDH,IAApD;AACD;;AAED,aACE;AAAA;AAAA,UAAK,WAAW2C,SAAhB,EAA2B,IAAIC,GAA/B,EAAoC,MAAK,UAAzC,EAAoD,KAAKJ,KAAzD;AACI,aAAKK,uBAAL,CAA6BL,KAA7B,EAAoCxC,IAApC,EAA0CyC,UAA1C,CADJ;AAEI,aAAKzD,KAAL,CAAWC,QAAX,GAAsB,KAAK6D,wBAAL,EAAtB,GAAwD,EAF5D;AAGIL,uBAAe,EAAf,IAAqB,KAAK1D,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,iBAA7B,MAAoD,KAAzE,GAAiFJ,QAAQqE,yBAAR,CAAkCpE,QAAlC,EAA4C,KAAKI,KAAL,CAAWH,aAAvD,CAAjF,GAAyJ;AAH7J,OADF;AAOD;;AAED;;;;;;;;;4CAMwBoB,I,EAAMwC,K,EAAO;AACnC,UAAI5B,eAAe,KAAnB;AACA,UAAMjC,WAAW,iBAAjB;AAFmC,UAG3BkC,aAH2B,GAGT,KAAK9B,KAAL,CAAW+B,IAHF,CAG3BD,aAH2B;;AAInC,UAAME,aAAaF,cAAc,EAAEG,IAAI,0CAAN,EAAkDC,gBAAgB,OAAlE,EAAd,CAAnB;AACA,UAAMd,YAAY,KAAKpB,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,YAA7B,CAAlB;AACA,UAAI2D,aAAa,KAAK1D,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,cAA7B,EAA6CA,GAA7C,CAAiDkB,IAAjD,CAAjB;;AAEA,UAAIyC,eAAe,IAAnB,EAAyB;AACvBA,qBAAa,EAAb;AACD;;AAED,WAAK1D,KAAL,CAAW2C,kBAAX,CAA8BvB,SAA9B,EAAyC,SAAzC,EAAoDH,IAApD;AACA;;;;;;;;;;;AAWA,aACE;AAAA;AAAA,UAAK,KAAKwC,KAAV;AACI,aAAKK,uBAAL,CAA6BL,KAA7B,EAAoCxC,IAApC,EAA0CyC,UAA1C,CADJ;AAEI,aAAKzD,KAAL,CAAWC,QAAX,GAAsB,KAAK6D,wBAAL,EAAtB,GAAwD,EAF5D;AAGIL,uBAAe,EAAf,IAAqB,KAAK1D,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,iBAA7B,MAAoD,KAAzE,GAAiFJ,QAAQqE,yBAAR,CAAkCpE,QAAlC,EAA4C,KAAKI,KAAL,CAAWH,aAAvD,CAAjF,GAAyJ;AAH7J,OADF;AAOD;;AAED;;;;;;;;;qCAMiBoB,I,EAAMwC,K,EAAO;AAAA;;AAC5B,UAAMI,eAAaJ,KAAnB;AACA,UAAIG,YAAY,UAAhB;;AAEA,UAAIH,UAAU,KAAKzD,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,cAA7B,EAA6CA,GAA7C,CAAiD,QAAjD,CAAd,EAA0E;AACxE6D,oBAAeA,SAAf;AACD;;AAED,aACE;AAAA;AAAA,UAAI,WAAWA,SAAf,EAA0B,KAAKH,KAA/B;AACE;AAAA;AAAA;AACE,uBAAU,sBADZ;AAEE,2BAAY,KAFd;AAGE,kBAAK,KAHP;AAIE,kBAAMI,GAJR;AAKE,qBAAS,mBAAM;AACb,qBAAK7D,KAAL,CAAW2C,kBAAX,CAA8B,OAAK3C,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,YAA7B,CAA9B,EAA0E,QAA1E,EAAoF0D,KAApF;AACD;AAPH;AAQExC;AARF;AADF,OADF;AAaD;;AAED;;;;;;;;;;wCAOoBgD,Y,EAAc;AAAA;;AAChC,aAAQA,aAAaC,IAAb,GAAoB,CAApB,GACF;AACF;AAAA;AAAA;AACE;AAAA;AAAA,YAAI,WAAU,4CAAd,EAA2D,MAAK,SAAhE;AACID,uBAAaE,GAAb,CAAiB,UAAClD,IAAD,EAAOwC,KAAP;AAAA,mBACjB,OAAKW,gBAAL,CAAsB5E,eAAeyB,IAAf,CAAtB,EAA4CwC,KAA5C,CADiB;AAAA,WAAjB;AADJ,SADF;AAME;AAAA;AAAA,YAAK,WAAU,aAAf;AAEIQ,uBAAaE,GAAb,CAAiB,UAAClD,IAAD,EAAOwC,KAAP;AAAA,mBACf,OAAKY,yBAAL,CAA+BpD,IAA/B,EAAqCwC,KAArC,CADe;AAAA,WAAjB;AAFJ;AANF,OAFI,GAiBNQ,aAAaE,GAAb,CAAiB,UAAClD,IAAD,EAAOwC,KAAP;AAAA,eAAmB;AAClC,iBAAKa,uBAAL,CAA6BrD,IAA7B,EAAmCwC,KAAnC;AADe;AAAA,OAAjB,CAjBF;AAqBD;;AAED;;;;;;;6CAIyB;AACvB,aAAQ,KAAKxD,KAAL,CAAWG,OAAX,GACJ;AAAA;AAAA,UAAK,WAAU,YAAf;AACA;AAAA;AAAA;AACE,uEAAkB,IAAG,mCAArB,EAAyD,gBAAe,SAAxE;AADF;AADA,OADI,GAMJ,EANJ;AAQD;;AAED;;;;;;;;;;AAUA;;;;kDAI8B;AAAA;;AAC5B,aAAQ,KAAKJ,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,cAA7B,EAA6CA,GAA7C,CAAiD,SAAjD,MAAgE,WAAhE,GACF;AAAA;AAAA,UAAK,WAAU,kBAAf;AACE,iDAAO,MAAK,MAAZ;AACO,gBAAK,eADZ;AAEO,cAAG,eAFV;AAGO,qBAAU,cAHjB;AAIO,qBAAU,GAJjB;AAKO,0BAAa,MALpB;AAMO,oBAAU,kBAACgB,KAAD;AAAA,mBAAW,OAAKJ,mBAAL,CAAyBI,KAAzB,CAAX;AAAA;AANjB,UADF;AASE;AAAA;AAAA,YAAO,SAAQ,eAAf;AACE,uEAAkB,IAAG,qCAArB,EAA2D,gBAAe,SAA1E;AADF,SATF;AAYE,iDAAO,MAAK,UAAZ;AACO,iBAAM,GADb;AAEO,gBAAK,iBAFZ;AAGO,cAAG,iBAHV;AAIO,oBAAU;AAAA,mBAAM,OAAKL,0BAAL,EAAN;AAAA;AAJjB,UAZF;AAkBE;AAAA;AAAA,YAAO,SAAQ,iBAAf;AACE,uEAAkB,IAAG,0CAArB,EAAgE,gBAAe,0CAA/E;AADF;AAlBF,OADE,GAuBF,IAvBN;AAyBD;;;6BAEQ;AAAA;;AAAA,mBACwE,KAAKV,KAD7E;AAAA,UACCiC,EADD,UACCA,EADD;AAAA,UACKsC,iBADL,UACKA,iBADL;AAAA,UACwBN,YADxB,UACwBA,YADxB;AAAA,UACsCO,oBADtC,UACsCA,oBADtC;AAAA,UAC4DC,OAD5D,UAC4DA,OAD5D;AAAA,UAECtE,UAFD,GAEgB,KAAKF,KAFrB,CAECE,UAFD;;;AAIP,aACE;AAAA;AAAA,UAAK,WAAU,mBAAf,EAAmC,KAAK8B,EAAxC;AAEE;AAAA;AAAA,YAAK,WAAU,2BAAf;AACE,iDAAK,KAAKsC,iBAAV,EAA6B,KAAI,gBAAjC;AADF,SAFF;AAKE;AAAA;AAAA,YAAK,WAAU,KAAf;AACE;AAAA;AAAA,cAAM,WAAU,WAAhB;AACE;AAAA;AAAA;AACE;AAAA;AAAA,kBAAK,WAAU,oBAAf;AACE;AAAA;AAAA,oBAAK,WAAU,gBAAf;AACE,+EAAkB,IAAG,mCAArB,EAAyD,gBAAe,eAAxE,GADF;AAEE,6EAAiB,SAASE,OAA1B,EAAmC,OAAO,KAAKzE,KAAL,CAAW0B,SAAX,CAAqB3B,GAArB,CAAyB,YAAzB,CAA1C;AAFF,iBADF;AAKGyE,qCAAqBzE,GAArB,CAAyB,SAAzB,EAAoCA,GAApC,CAAwC,YAAxC,EAAsD,KAAtD,MAAiE,IAAjE,GACC;AACE,sBAAI,CAACI,UADP;AAEE,2BAAS,mBAAM;AACb,2BAAKuE,kBAAL,CAAwBvE,UAAxB;AACD;AAJH,kBADD,GAOG;AAZN;AADF,aADF;AAmBE;AAAA;AAAA;AACE;AAAA;AAAA,kBAAK,WAAU,qCAAf;AACI,qBAAKwE,sBAAL,EADJ;AAGG,qBAAK1E,KAAL,CAAWC,QAAX,GACG;AAAA;AAAA,oBAAK,WAAU,aAAf;AACE,uBAAK0E,mBAAL,CAAyBX,YAAzB,CADF;AAEE,uBAAKY,2BAAL;AAFF,iBADH,GAKG;AARN;AADF;AAnBF;AADF;AALF,OADF;AA2CD;;;kCApFoBC,O,EAAS;AAC5B,UAAMC,iBAAiB,YAAvB;AACA,aAAO,CAACA,eAAeC,IAAf,CAAoBF,OAApB,CAAR;AACD;;;;EAhWmB,gBAAMG,S;;AAob5BtF,QAAQuF,SAAR,GAAoB;AAClBjD,MAAI,qBAAUkD,MAAV,CAAiBC,UADH,EACe;AACjCb,qBAAmB,qBAAUY,MAAV,CAAiBC,UAFlB,EAE8B;AAChDnB,gBAAc,qBAAUoB,MAAV,CAAiBD,UAHb,EAGyB;AAC3C3C,YAAU,qBAAU4C,MAAV,CAAiBD,UAJT;AAKlBzB,UAAQ,qBAAU0B,MAAV,CAAiBD,UALP,EAKmB;AACrC1D,aAAW,qBAAU2D,MAAV,CAAiBD,UANV;AAOlBZ,wBAAsB,qBAAUa,MAAV,CAAiBD,UAPrB;AAQlBX,WAAS,qBAAUY,MAAV,CAAiBD,UARR,EAQoB;AACtC5B,eAAa,qBAAU6B,MAAV,CAAiBD,UATZ,EASwB;AAC1CvF,iBAAe,qBAAUwF,MAAV,CAAiBD,UAVd,EAU0B;AAC5C7B,oBAAkB,qBAAU+B,IAAV,CAAeF,UAXf,EAW2B;AAC7CtE,iBAAe,qBAAUwE,IAAV,CAAeF,UAZZ,EAYwB;AAC1C9B,sBAAoB,qBAAUgC,IAAV,CAAeF,UAbjB,EAa6B;AAC/CxC,yBAAuB,qBAAU0C,IAAV,CAAeF,UAdpB,EAcgC;AAClDzC,sBAAoB,qBAAU2C,IAAV,CAAeF,UAfjB,EAe6B;AAC/C;AACAlC,mBAAiB,qBAAUoC,IAAV,CAAeF,UAjBd;AAkBlB;AACArC,0BAAwB,qBAAUuC,IAAV,CAAeF,UAnBrB;AAoBlBpC,oBAAkB,qBAAUsC,IAAV,CAAeF,UApBf,EAoB2B;AAC7C7D,uBAAqB,qBAAU+D,IAAV,CAAeF,UArBlB;AAsBlBjF,cAAY,qBAAUoF,IAAV,CAAeH,UAtBT,EAsBqB;AACvCrD,QAAM,qBAAUqD,UAvBE,CAuBU;AAvBV,CAApB;;kBA0Be,2BAAWzF,OAAX,C","file":"KeyCard.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Map } from 'immutable';\nimport Switch from 'react-toggle-switch';\nimport 'react-toggle-switch/dist/css/switch.min.css';\nimport PopoverQuestion from '../PopoverQuestion/PopoverQuestion';\nimport PopoverLink from '../PopoverLink/PopoverLink';\nimport CardNumberField from '../CardNumberField/CardNumberField';\nimport * as tabKeycardType from '../../constants/keycardsType';\nimport * as MaskHelper from '../../helpers/MaskHelper';\nimport * as CardTypeHelper from '../../helpers/CardTypeHelper';\n\n/**\n * Keycard\n */\nclass KeyCard extends React.Component {\n  /**\n   * Display Error Message\n   * @param errorKey\n   * @param localItemInfo\n   * @returns {*}\n   */\n  static renderedErrorInputMessage(errorKey, localItemInfo) {\n    const error = localItemInfo.get('errors', new Map()).get(errorKey, '');\n    return <p className=\"errorInputKeyCard\">{error}</p>;\n  }\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkYes: !props.hasSupport,\n      checkNo: props.hasSupport,\n      hasSupport: props.hasSupport,\n      valid: true,\n    };\n    this.handleChangeCardNumber = this.handleChangeCardNumber.bind(this);\n    this.handleChangeAutoSuggestCardNumber = this.handleChangeAutoSuggestCardNumber.bind(this);\n    this.changeValidationCard = this.changeValidationCard.bind(this);\n    this.handleChangeCheckSwisspass = this.handleChangeCheckSwisspass.bind(this);\n    this.handleChangeZipcode = this.handleChangeZipcode.bind(this);\n  }\n\n  /**\n   * Change local state when click support change value\n   * @param checked\n   */\n  handleChangeToggle(checked) {\n    this.setState({\n      checkYes: checked,\n      checkNo: !checked,\n      hasSupport: !checked,\n    });\n    this.props.onChangeCheck(checked ? 'yes' : 'no');\n  }\n\n  /**\n   * Change card number\n   * @param event\n   * @param cardId\n   * @param type\n   */\n  handleChangeCardNumber(event, cardId, type) {\n    this.handleChangeAutoSuggestCardNumber(event.target.value, cardId, type, false);\n  }\n\n  /**\n   * handle Change Check Swisspass\n   */\n  handleChangeCheckSwisspass() {\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const currentItem = this.props.localItemInfo.get(currentId);\n    const newValue = !currentItem.get('swissPassElem').get('checked');\n\n    this.props.updateSwissPassElem(currentId, 'validNumber', newValue);\n  }\n\n  /**\n   * handle Change Zipcode\n   * @param event\n   */\n  handleChangeZipcode(event) {\n    const validZipcode = this.verifyZipcode(event.target.value);\n    this.props.updateSwissPassElem(orderitem.get('skierIndex'), 'validZipcode', validZipcode);\n  }\n\n  /**\n   *\n   * @param cardnumber\n   * @param cardId\n   * @param type\n   * @param suggest\n   */\n  handleChangeAutoSuggestCardNumber(cardnumber, cardId, type, suggest = true) {\n    let newValue = '';\n    let validKeycard = this.props.localItemInfo.get('validateKeycard');\n    const { formatMessage } = this.props.intl;\n    const errorKey = 'data.cardNumber';\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'invalid' });\n    const currentId = this.props.localItemInfo.get('skierIndex');\n\n    if (cardnumber !== undefined && typeof cardnumber !== 'undefined') {\n      // Remove spaces on card number\n      cardnumber = cardnumber.replace(new RegExp(/( )|(_)/g), '');\n\n      // Update others card types values\n      this.props.localItemInfo.get('keycardsMask').forEach((item, key) => {\n        if (key !== 'current' && key !== 'idCard' && key !== type) {\n          if (suggest) {\n            this.props.keycards.forEach((element) => {\n              if (element.get('shortnumber') === cardnumber || element.get('cardnumber') === cardnumber) {\n                newValue = type === 'sd' ? element.get('shortnumber') : element.get('cardnumber');\n              }\n            });\n          }\n          this.props.updateKeycardsMask(this.props.orderitem.get('skierIndex'), key, newValue);\n        }\n      });\n\n      // Delete errors\n      this.props.deleteKeyFieldsErrors(currentId, errorKey);\n\n      // verification keycard number is correct\n      if (cardnumber !== '' || cardnumber !== undefined) {\n        const cardType = tabKeycardType[type];\n        validKeycard = MaskHelper.verifyKeycard(cardnumber, cardId, cardType);\n        this.props.updateValidatedKeycard(currentId, validKeycard);\n        this.props.updateValidField(currentId, 'cardNumber', validKeycard);\n        this.changeValidationCard(validKeycard);\n\n        // Keycard mask is valid\n        if (validKeycard) {\n          // If no swisspass, we can validate keycard\n          if (cardType !== tabKeycardType.swisspass) {\n            this.props.validateKeycard(currentId, cardnumber);\n          } else if (CardTypeHelper.canCheckSwissPass(this.props.localItemInfo)) {\n            const zipCode = CardTypeHelper.getSwissPassProperty('zipcode');\n            this.props.validateKeycard(currentId, cardnumber, zipCode);\n          }\n        } else {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n      } else {\n        this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n      }\n      // Update current card type value\n      // if (typeof cardnumber !== 'undefined') {\n      this.props.changeCardNumber(this.props.orderitem.get('skierIndex'), cardnumber);\n      this.props.updateKeycardsMask(this.props.orderitem.get('skierIndex'), type, cardnumber);\n      // }\n    }\n  }\n\n  /**\n   *\n   * @param value\n   */\n  changeValidationCard(value) {\n    this.setState({ valid: value });\n  }\n\n  /**\n   * Content for popover link\n   * @returns {*}\n   */\n  renderedLabelLinkPopover() {\n    return this.props.popoverLink.get('labelKeycardInfo') !== null\n      ? <PopoverLink popoverLink={this.props.popoverLink} index={this.props.orderitem.get('skierIndex')} />\n      : '';\n  }\n\n  /**\n   *\n   * @param index\n   * @param type\n   * @param cardNumber\n   * @param errorKey\n   * @param className\n   */\n  renderedCardNumberField(index, type, cardNumber) {\n    return (\n      <CardNumberField\n        key={index}\n        id={index}\n        validInput={this.state.valid}\n        mode={tabKeycardType[type]}\n        keycards={this.props.keycards}\n        handleChangeCardNumber={(event) => {\n          this.handleChangeCardNumber(event, index, type);\n        }}\n        onChange={(event) => {\n          this.handleChangeCardNumber(event, index, type);\n        }}\n        onAutoSuggestSelected={(cardnumber) => {\n          this.handleChangeAutoSuggestCardNumber(cardnumber, index, type);\n        }}\n        cardNumber={cardNumber}\n        value={cardNumber}\n        params={this.props.params}\n      />\n    );\n  }\n\n\n  /**\n   * Display of the double input mask\n   * @param card\n   * @param index\n   * @param keycards\n   * @param params\n   * @returns {XML}\n   */\n  renderedSomeInputKeyCards(type, index) {\n    let className = 'tab-pane fade in';\n    const aux = `tabKeycardType[type]${index}`;\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const errorKey = 'data.cardNumber';\n    let cardNumber = this.props.localItemInfo.get('keycardsMask').get(type);\n\n    if (cardNumber === null || typeof cardNumber === 'undefined') {\n      cardNumber = '';\n    }\n\n    // Remove spaces on card number\n    cardNumber = cardNumber.replace(new RegExp(/( )|(_)/g), '');\n\n    // active tab on select\n    if (index === this.props.localItemInfo.get('keycardsMask').get('idCard')) {\n      className = `${className} active`;\n      this.props.changeCardNumber(currentId, cardNumber);\n      this.props.updateKeycardsMask(currentId, 'current', type);\n    }\n\n    return (\n      <div className={className} id={aux} role=\"tabpanel\" key={index}>\n        { this.renderedCardNumberField(index, type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        { cardNumber === '' || this.props.localItemInfo.get('validateKeycard') === false ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo) : '' }\n      </div>\n    );\n  }\n\n  /**\n   * Display of the simple input mask\n   * @param type\n   * @param index\n   * @returns {*}\n   */\n  renderedInputOneKeyCard(type, index) {\n    let validKeycard = false;\n    const errorKey = 'data.cardNumber';\n    const { formatMessage } = this.props.intl;\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'empty' });\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    let cardNumber = this.props.localItemInfo.get('keycardsMask').get(type);\n\n    if (cardNumber === null) {\n      cardNumber = '';\n    }\n\n    this.props.updateKeycardsMask(currentId, 'current', type);\n    /*\n        if (cardNumber !== '') {\n          validKeycard = MaskHelper.verifyKeycard(cardNumber, index, tabKeycardType[type]);\n          if (validKeycard) {\n            this.props.validateKeycard(currentId, cardNumber);\n            this.props.deleteKeyFieldsErrors(currentId, errorKey);\n          }\n        } else {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n    */\n    return (\n      <div key={index}>\n        { this.renderedCardNumberField(index, type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        { cardNumber === '' || this.props.localItemInfo.get('validateKeycard') === false ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo) : '' }\n      </div>\n    );\n  }\n\n  /**\n   * Display labels for inputs - select active input\n   * @param card\n   * @param index\n   * @returns {XML}\n   */\n  renderedLabelTab(type, index) {\n    const aux = `type${index}`;\n    let className = 'nav-item';\n\n    if (index === this.props.localItemInfo.get('keycardsMask').get('idCard')) {\n      className = `${className} active`;\n    }\n\n    return (\n      <li className={className} key={index}>\n        <a\n          className=\"nav-link text-center\"\n          data-toggle=\"tab\"\n          role=\"tab\"\n          href={aux}\n          onClick={() => {\n            this.props.updateKeycardsMask(this.props.localItemInfo.get('skierIndex'), 'idCard', index);\n          }}\n        >{type}</a>\n      </li>\n    );\n  }\n\n  /**\n   *\n   * @param keycardTypes\n   * @param keycards\n   * @param params\n   * @returns {XML}\n   */\n  renderedListKeyCard(keycardTypes) {\n    return (keycardTypes.size > 1\n      ? ( // Display Double Mask KeyCard\n        <div>\n          <ul className=\"nav nav-tabs nav-justified responsive-tabs\" role=\"tablist\">\n            { keycardTypes.map((type, index) => (\n              this.renderedLabelTab(tabKeycardType[type], index)\n            )) }\n          </ul>\n          <div className=\"tab-content\">\n            {\n              keycardTypes.map((type, index) => (\n                this.renderedSomeInputKeyCards(type, index)\n              ))\n            }\n          </div>\n        </div>\n      ) :\n      keycardTypes.map((type, index) => ( // Display one Input for keyCard\n        this.renderedInputOneKeyCard(type, index)\n      ))\n    );\n  }\n\n  /**\n   * Display content checked no\n   * @returns {*}\n   */\n  renderedContentCheckNo() {\n    return (this.state.checkNo\n      ? <div className=\"msgCheckNo\">\n        <p>\n          <FormattedMessage id=\"rp.checkout.ordercustom.nokeycard\" defaultMessage=\"no card\" />\n        </p>\n      </div>\n      : ''\n    );\n  }\n\n  /**\n   *\n   * @param zipcode\n   * @returns {boolean}\n   */\n  static verifyZipcode(zipcode) {\n    const patternZipcode = /^[0-9]{4}$/;\n    return !patternZipcode.test(zipcode);\n  }\n\n  /**\n   *\n   * @returns {null}\n   */\n  renderedContentForSwisspass() {\n    return (this.props.localItemInfo.get('keycardsMask').get('current') === \"swisspass\"\n        ? <div className=\"contentSwisspass\">\n            <input type=\"text\"\n                   name=\"zipcode-swiss\"\n                   id=\"zipcode-swiss\"\n                   className=\"form-control\"\n                   maxLength=\"4\"\n                   data-control=\"true\"\n                   onChange={(event) => this.handleChangeZipcode(event)}\n            />\n            <label htmlFor=\"zipcode-swiss\">\n              <FormattedMessage id=\"rp.checkout.shippingaddress.zipcode\" defaultMessage=\"Zipcode\" />\n            </label>\n            <input type=\"checkbox\"\n                   value=\"1\"\n                   name=\"check-swisspass\"\n                   id=\"check-swisspass\"\n                   onChange={() => this.handleChangeCheckSwisspass()}\n            />\n            <label htmlFor=\"check-swisspass\">\n              <FormattedMessage id=\"rp.checkout.keycard.swisspass.check.text\" defaultMessage=\"I agree with the conditions of SwissPass\" />\n            </label>\n          </div>\n        : null\n    );\n  }\n\n  render() {\n    const { id, keycardPictureSrc, keycardTypes, itemFieldsDefinition, popover } = this.props;\n    const { hasSupport } = this.state;\n\n    return (\n      <div className=\"blockPopover test\" key={id}>\n\n        <div className=\"col-xs-4 keyCardAreaImage\">\n          <img src={keycardPictureSrc} alt=\"keycardPicture\" />\n        </div>\n        <div className=\"row\">\n          <form className=\"col-xs-12\">\n            <div>\n              <div className=\"keycard_area_title\">\n                <div className=\"keycardMessage\">\n                  <FormattedMessage id=\"rp.checkout.keycard.area.question\" defaultMessage=\"I have a card\" />\n                  <PopoverQuestion popover={popover} index={this.props.orderitem.get('skierIndex')} />\n                </div>\n                {itemFieldsDefinition.get('keycard').get('hasSupport', false) === true ?\n                  <Switch\n                    on={!hasSupport}\n                    onClick={() => {\n                      this.handleChangeToggle(hasSupport);\n                    }}\n                  />\n                  : ''\n                }\n              </div>\n            </div>\n\n            <div>\n              <div className=\"col-xs-8 form-group keyCardAreaForm\">\n                { this.renderedContentCheckNo() }\n\n                {this.state.checkYes\n                  ? <div className=\"msgCheckYes\">\n                    { this.renderedListKeyCard(keycardTypes) }\n                    { this.renderedContentForSwisspass() }\n                  </div>\n                  : ''}\n              </div>\n            </div>\n          </form>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nKeyCard.propTypes = {\n  id: PropTypes.string.isRequired, // index\n  keycardPictureSrc: PropTypes.string.isRequired, // keycard picture src\n  keycardTypes: PropTypes.object.isRequired, // keycards to display the tabs\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired, // generic params\n  orderitem: PropTypes.object.isRequired,\n  itemFieldsDefinition: PropTypes.object.isRequired,\n  popover: PropTypes.object.isRequired, // content for popover info keycard\n  popoverLink: PropTypes.object.isRequired, // content for popover link keycard\n  localItemInfo: PropTypes.object.isRequired, // current local Item\n  changeCardNumber: PropTypes.func.isRequired, // function to change cardnumber of item\n  onChangeCheck: PropTypes.func.isRequired, // function to make changes when checking\n  updateFieldsErrors: PropTypes.func.isRequired, // function to update fields errors\n  deleteKeyFieldsErrors: PropTypes.func.isRequired, // function to delete key on fields errors\n  updateKeycardsMask: PropTypes.func.isRequired, // function to update elements on a keycardsMask\n  // validateKeycard: function call api for verification of keycard number\n  validateKeycard: PropTypes.func.isRequired,\n  // updateValidatedKeycard: function to change boolean value of keycard number\n  updateValidatedKeycard: PropTypes.func.isRequired,\n  updateValidField: PropTypes.func.isRequired, //\n  updateSwissPassElem: PropTypes.func.isRequired,\n  hasSupport: PropTypes.bool.isRequired, // boolean to know if support exists\n  intl: intlShape.isRequired, // for the internationalization\n};\n\nexport default injectIntl(KeyCard);\n"]}