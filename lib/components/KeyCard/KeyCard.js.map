{"version":3,"sources":["../../../src/components/KeyCard/KeyCard.jsx"],"names":["configs","ZIPCODE","placeholder","mask","getErrors","localItemInfo","keys","errors","get","Map","isEmpty","List","isList","filter","value","errorField","includes","KeyCard","errorKey","valueSeq","map","suberrors","isMap","error","__html","props","state","checkYes","hasSupport","checkNo","valid","handleChangeCardNumber","bind","handleChangeAutoSuggestCardNumber","changeValidationCard","handleChangeCheckSwisspass","handleChangeZipcode","checked","setState","onChangeCheck","event","type","target","property","currentId","newValue","stateUpdateCardNumberTypeProperty","checkValidKeycard","zipCode","pattern","isValid","test","deleteKeyFieldsErrors","intl","errorLabel","formatMessage","id","defaultMessage","updateFieldsErrors","cardnumber","suggest","skierIndex","orderitem","validKeycard","undefined","replace","RegExp","toUpperCase","forEach","item","key","keycards","element","cardType","tabKeycardType","MaskHelper","verifyKeycard","popoverLink","keycardTypes","size","keySeq","toJS","renderedLabelTab","renderedSomeInputKeyCards","renderedInputOneKeyCard","first","cardNumber","updateCurrentCardNumberType","renderedCardNumberField","renderedLabelLinkPopover","renderedErrorInputMessage","className","labelKeycard","aux","isCurrentType","renderedContentForSwisspass","number","params","zipcodeValue","keycardPictureSrc","fields","popover","handleChangeToggle","renderedContentCheckNo","renderedKeyCardTypesContent","React","Component","propTypes","PropTypes","object","isRequired","string","func","updateValidField","bool"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,OAAO,GAAG;AACdC,EAAAA,OAAO,EAAE;AACPC,IAAAA,WAAW,EAAE,MADN;AAEPC,IAAAA,IAAI,EAAE,CACJ,OADI,EACK,OADL,EACc,OADd,EACuB,OADvB;AAFC;AADK,CAAhB;AASA;;;;;;;AAMA,SAASC,SAAT,CAAmBC,aAAnB,EAAkCC,IAAlC,EAAwC;AACtC,MAAIC,MAAM,GAAGF,aAAa,CAACG,GAAd,CAAkB,QAAlB,EAA4B,IAAIC,cAAJ,EAA5B,CAAb;;AACA,MAAI,OAAOF,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,IAAAA,MAAM,GAAG,IAAIE,cAAJ,EAAT;AACD,GAJqC,CAKtC;;;AACA,MAAIF,MAAM,CAACG,OAAP,EAAJ,EAAsB;AACpB,WAAOH,MAAP;AACD,GARqC,CAUtC;;;AACA,MAAI,CAACI,gBAAKC,MAAL,CAAYN,IAAZ,CAAL,EAAwB;AACtBA,IAAAA,IAAI,GAAG,IAAIK,eAAJ,CAAS,CAACL,IAAD,CAAT,CAAP;AACD;;AAED,SAAOC,MAAM,CAACM,MAAP,CAAc,UAACC,KAAD,EAAQC,UAAR;AAAA,WACnBT,IAAI,CAACU,QAAL,CAAcD,UAAd,CADmB;AAAA,GAAd,CAAP;AAGD;AAED;;;;;IAGME,O;;;;;;;;AACJ;;;;;;8CAOiCC,Q,EAAUb,a,EAAe;AACxD,UAAME,MAAM,GAAGH,SAAS,CAACC,aAAD,EAAgBa,QAAhB,CAAxB;;AACA,UAAIX,MAAJ,EAAY;AACV,eAAOA,MAAM,CAACY,QAAP,GAAkBC,GAAlB,CAAsB,UAAAC,SAAS,EAAI;AACxC,cAAIZ,eAAIa,KAAJ,CAAUD,SAAV,KAAwBV,gBAAKC,MAAL,CAAYS,SAAZ,CAA5B,EAAoD;AAClD,mBAAOA,SAAS,CACbF,QADI,GAEJC,GAFI,CAEA,UAAAG,KAAK;AAAA,qBACR;AACE,gBAAA,GAAG,EAAEA,KADP;AAEE,gBAAA,SAAS,EAAC,mBAFZ;AAGE,gBAAA,uBAAuB,EAAE;AAAEC,kBAAAA,MAAM,EAAED;AAAV;AAH3B,gBADQ;AAAA,aAFL,CAAP;AASD;;AACD,iBAAO;AAAG,YAAA,SAAS,EAAC;AAAb,aAAkCF,SAAlC,CAAP;AACD,SAbM,CAAP;AAcD;;AACD,aAAO,EAAP;AACD;AAED;;;;;;;AAIA,mBAAYI,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,CAACF,KAAK,CAACG,UADN;AAEXC,MAAAA,OAAO,EAAEJ,KAAK,CAACG,UAFJ;AAGXA,MAAAA,UAAU,EAAEH,KAAK,CAACG,UAHP;AAIXE,MAAAA,KAAK,EAAE;AAJI,KAAb;AAMA,UAAKC,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BC,IAA5B,+BAA9B;AACA,UAAKC,iCAAL,GAAyC,MAAKA,iCAAL,CAAuCD,IAAvC,+BAAzC;AACA,UAAKE,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BF,IAA1B,+BAA5B;AACA,UAAKG,0BAAL,GAAkC,MAAKA,0BAAL,CAAgCH,IAAhC,+BAAlC;AACA,UAAKI,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBJ,IAAzB,+BAA3B;AAbiB;AAclB;AAED;;;;;;;;uCAImBK,O,EAAS;AAC1B,WAAKC,QAAL,CAAc;AACZX,QAAAA,QAAQ,EAAEU,OADE;AAEZR,QAAAA,OAAO,EAAE,CAACQ,OAFE;AAGZT,QAAAA,UAAU,EAAE,CAACS;AAHD,OAAd;AAKA,WAAKZ,KAAL,CAAWc,aAAX,CAAyBF,OAAO,GAAG,KAAH,GAAW,IAA3C;AACD;AAED;;;;;;;;;2CAMuBG,K,EAAOC,I,EAAM;AAClC,WAAKR,iCAAL,CAAuCO,KAAK,CAACE,MAAN,CAAa5B,KAApD,EAA2D2B,IAA3D,EAAiE,KAAjE;AACD;AAED;;;;;;iDAG6B;AAC3B,UAAMA,IAAI,GAAG,WAAb;AACA,UAAME,QAAQ,GAAG,SAAjB;AACA,UAAMC,SAAS,GAAG,KAAKnB,KAAL,CAAWpB,aAAX,CAAyBG,GAAzB,CAA6B,YAA7B,CAAlB;AACA,UAAMqC,QAAQ,GAAG,CAAC,sDAAiC,KAAKpB,KAAL,CAAWpB,aAA5C,EAA2DoC,IAA3D,EAAiEE,QAAjE,CAAlB;AAEA,WAAKlB,KAAL,CAAWqB,iCAAX,CAA6CF,SAA7C,EAAwDH,IAAxD,EAA8DE,QAA9D,EAAwEE,QAAxE;AAEA,WAAKpB,KAAL,CAAWsB,iBAAX,CAA6BH,SAA7B;AACD;AAED;;;;;;;wCAIoBJ,K,EAAO;AACzB,UAAMC,IAAI,GAAG,WAAb;AACA,UAAMO,OAAO,GAAGR,KAAK,CAACE,MAAN,CAAa5B,KAA7B;AACA,UAAMI,QAAQ,GAAG,wBAAjB;AAEA,UAAM0B,SAAS,GAAG,KAAKnB,KAAL,CAAWpB,aAAX,CAAyBG,GAAzB,CAA6B,YAA7B,CAAlB;AACA,WAAKiB,KAAL,CAAWqB,iCAAX,CAA6CF,SAA7C,EAAwDH,IAAxD,EAA8D,SAA9D,EAAyEO,OAAzE;AAEA,UAAMC,OAAO,GAAG,YAAhB;AACA,UAAMC,OAAO,GAAGD,OAAO,CAACE,IAAR,CAAaH,OAAb,CAAhB;AACA,WAAKvB,KAAL,CAAWqB,iCAAX,CAA6CF,SAA7C,EAAwDH,IAAxD,EAA8D,oBAA9D,EAAoFS,OAApF,EAVyB,CAYzB;;AACA,WAAKzB,KAAL,CAAW2B,qBAAX,CAAiCR,SAAjC,EAA4C1B,QAA5C;;AAEA,UAAI,CAACgC,OAAL,EAAc;AAAA,YACJG,IADI,GACK,KAAK5B,KADV,CACJ4B,IADI;AAEZ,YAAMC,UAAU,GAAGD,IAAI,CAACE,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAE,iDAAN;AAAyDC,UAAAA,cAAc,EAAE;AAAzE,SAAnB,CAAnB;AACA,aAAKhC,KAAL,CAAWiC,kBAAX,CAA8Bd,SAA9B,EAAyC1B,QAAzC,EAAmDoC,UAAnD;AACD,OAJD,MAIO;AACL,aAAK7B,KAAL,CAAWsB,iBAAX,CAA6BH,SAA7B;AACD;AACF;AAED;;;;;;;;;sDAMkCe,U,EAAYlB,I,EAAsB;AAAA;;AAAA,UAAhBmB,OAAgB,uEAAN,IAAM;AAClE,UAAIf,QAAQ,GAAG,EAAf;AADkE,UAE1DQ,IAF0D,GAEjD,KAAK5B,KAF4C,CAE1D4B,IAF0D;AAGlE,UAAMnC,QAAQ,GAAG,iBAAjB;AACA,UAAMoC,UAAU,GAAGD,IAAI,CAACE,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE,0CAAN;AAAkDC,QAAAA,cAAc,EAAE;AAAlE,OAAnB,CAAnB;AACA,UAAMb,SAAS,GAAG,KAAKnB,KAAL,CAAWpB,aAAX,CAAyBG,GAAzB,CAA6B,YAA7B,CAAlB;AACA,UAAMqD,UAAU,GAAG,KAAKpC,KAAL,CAAWqC,SAAX,CAAqBtD,GAArB,CAAyB,YAAzB,CAAnB;AAEA,UAAIuD,YAAY,GAAG,sDAAiC,KAAKtC,KAAL,CAAWpB,aAA5C,EAA2DoC,IAA3D,EAAiE,aAAjE,CAAnB;;AAEA,UAAIkB,UAAU,KAAKK,SAAf,IAA4B,OAAOL,UAAP,KAAsB,WAAtD,EAAmE;AACjE;AACAA,QAAAA,UAAU,GAAGA,UAAU,CAACM,OAAX,CAAmB,IAAIC,MAAJ,CAAW,UAAX,CAAnB,EAA2C,EAA3C,CAAb,CAFiE,CAGjE;;AACA,YAAIzB,IAAI,KAAK,WAAb,EAA0B;AACxBkB,UAAAA,UAAU,GAAGA,UAAU,CAACQ,WAAX,EAAb;AACD,SANgE,CAQjE;;;AACA,gDAAmB,KAAK1C,KAAL,CAAWpB,aAA9B,EAA6C+D,OAA7C,CAAqD,UAACC,IAAD,EAAOC,GAAP,EAAe;AAClE,cAAI,CAAC,CAAC7B,IAAD,EAAO,WAAP,EAAoBzB,QAApB,CAA6BsD,GAA7B,CAAL,EAAwC;AACtC,gBAAIV,OAAJ,EAAa;AACX,cAAA,MAAI,CAACnC,KAAL,CAAW8C,QAAX,CAAoBH,OAApB,CAA4B,UAACI,OAAD,EAAa;AACvC,oBAAIA,OAAO,CAAChE,GAAR,CAAY,aAAZ,MAA+BmD,UAA/B,IAA6Ca,OAAO,CAAChE,GAAR,CAAY,YAAZ,MAA8BmD,UAA/E,EAA2F;AACzFd,kBAAAA,QAAQ,GAAGJ,IAAI,KAAK,IAAT,GAAgB+B,OAAO,CAAChE,GAAR,CAAY,aAAZ,CAAhB,GAA6CgE,OAAO,CAAChE,GAAR,CAAY,YAAZ,CAAxD;AACD;AACF,eAJD;AAKD;;AACD,YAAA,MAAI,CAACiB,KAAL,CAAWqB,iCAAX,CAA6Ce,UAA7C,EAAyDS,GAAzD,EAA8D,QAA9D,EAAwEzB,QAAxE;AACD;AACF,SAXD,EATiE,CAsBjE;;AACA,aAAKpB,KAAL,CAAW2B,qBAAX,CAAiCR,SAAjC,EAA4C1B,QAA5C;AAEA,YAAMuD,QAAQ,GAAGC,cAAc,CAACjC,IAAD,CAA/B,CAzBiE,CA2BjE;;AACA,aAAKhB,KAAL,CAAWqB,iCAAX,CAA6Ce,UAA7C,EAAyDpB,IAAzD,EAA+D,QAA/D,EAAyEkB,UAAzE,EA5BiE,CA8BjE;;AACA,YAAIA,UAAU,KAAK,EAAf,IAAqBA,UAAU,KAAKK,SAAxC,EAAmD;AACjDD,UAAAA,YAAY,GAAGY,UAAU,CAACC,aAAX,CAAyBjB,UAAzB,EAAqCc,QAArC,CAAf;AAEA,eAAKhD,KAAL,CAAWqB,iCAAX,CAA6Ce,UAA7C,EAAyDpB,IAAzD,EAA+D,aAA/D,EAA8EsB,YAA9E;AACA,eAAK7B,oBAAL,CAA0B6B,YAA1B;AAEA,eAAKtC,KAAL,CAAWsB,iBAAX,CAA6Bc,UAA7B,EANiD,CAQjD;;AACA,cAAI,CAACE,YAAL,EAAmB;AACjB,iBAAKtC,KAAL,CAAWiC,kBAAX,CAA8Bd,SAA9B,EAAyC1B,QAAzC,EAAmDoC,UAAnD;AACD;AACF,SAZD,MAYO;AACL,eAAK7B,KAAL,CAAWiC,kBAAX,CAA8Bd,SAA9B,EAAyC1B,QAAzC,EAAmDoC,UAAnD;AACD;AACF;AACF;AAED;;;;;;;yCAIqBxC,K,EAAO;AAC1B,WAAKwB,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAEhB;AAAT,OAAd;AACD;AAED;;;;;;;+CAI2B;AACzB,aAAO,KAAKW,KAAL,CAAWoD,WAAX,CAAuBrE,GAAvB,CAA2B,kBAA3B,MAAmD,IAAnD,GACH,gCAAC,uBAAD;AAAa,QAAA,WAAW,EAAE,KAAKiB,KAAL,CAAWoD,WAArC;AAAkD,QAAA,KAAK,EAAE,KAAKpD,KAAL,CAAWqC,SAAX,CAAqBtD,GAArB,CAAyB,YAAzB;AAAzD,QADG,GAEH,EAFJ;AAGD;AAED;;;;;;;;;gDAM4BsE,Y,EAAc;AAAA;;AACxC,aAAQA,YAAY,CAACC,IAAb,GAAoB,CAApB,GACA;AACF,mDACE;AAAI,QAAA,SAAS,EAAC,4CAAd;AAA2D,QAAA,IAAI,EAAC;AAAhE,SACID,YAAY,CAACE,MAAb,GAAsBC,IAAtB,GAA6B7D,GAA7B,CAAiC,UAAAqB,IAAI;AAAA,eAAI,MAAI,CAACyC,gBAAL,CAAsBzC,IAAtB,CAAJ;AAAA,OAArC,CADJ,CADF,EAIE;AAAK,QAAA,SAAS,EAAC;AAAf,SAEIqC,YAAY,CAACE,MAAb,GAAsBC,IAAtB,GAA6B7D,GAA7B,CAAiC,UAAAqB,IAAI;AAAA,eACnC,MAAI,CAAC0C,yBAAL,CAA+B1C,IAA/B,CADmC;AAAA,OAArC,CAFJ,CAJF,CAFE,GAeF;AACA,WAAK2C,uBAAL,CAA6BN,YAAY,CAACE,MAAb,GAAsBK,KAAtB,EAA7B,CAhBN;AAmBD;AAED;;;;;;;;;4CAMwB5C,I,EAAM;AAC5B,UAAMvB,QAAQ,GAAG,IAAIP,eAAJ,CAAS,CAAC,YAAD,EAAe,iBAAf,CAAT,CAAjB;AACA,UAAMiC,SAAS,GAAG,KAAKnB,KAAL,CAAWpB,aAAX,CAAyBG,GAAzB,CAA6B,YAA7B,CAAlB;AACA,UAAI8E,UAAU,GAAG,+CAA0B,KAAK7D,KAAL,CAAWpB,aAArC,CAAjB;;AAEA,UAAIiF,UAAU,KAAK,IAAf,IAAuB,OAAOA,UAAP,KAAsB,WAAjD,EAA8D;AAC5DA,QAAAA,UAAU,GAAG,EAAb;AACD,OAP2B,CAS5B;;;AACA,WAAK7D,KAAL,CAAW8D,2BAAX,CAAuC3C,SAAvC,EAAkDH,IAAlD;AAEA,aACE;AAAK,QAAA,GAAG,EAAEA;AAAV,SACI,KAAK+C,uBAAL,CAA6B/C,IAA7B,EAAmC6C,UAAnC,CADJ,EAEI,KAAK5D,KAAL,CAAWC,QAAX,GAAsB,KAAK8D,wBAAL,EAAtB,GAAwD,EAF5D,EAIIH,UAAU,KAAK,EAAf,IAAqB,CAAC,8CAAyB,KAAK7D,KAAL,CAAWpB,aAApC,CAAtB,GACIY,OAAO,CAACyE,yBAAR,CAAkCxE,QAAlC,EAA4C,KAAKO,KAAL,CAAWpB,aAAvD,CADJ,GAEI,EANR,CADF;AAUD;AAED;;;;;;;;;qCAMiBoC,I,EAAM;AAAA;;AACrB,UAAIkD,SAAS,GAAG,UAAhB;AADqB,UAEbtC,IAFa,GAEJ,KAAK5B,KAFD,CAEb4B,IAFa;AAGrB,UAAMuC,YAAY,uCAAgCnD,IAAhC,CAAlB;;AAEA,UAAI,6CAAwB,KAAKhB,KAAL,CAAWpB,aAAnC,EAAkDoC,IAAlD,CAAJ,EAA6D;AAC3DkD,QAAAA,SAAS,aAAMA,SAAN,YAAT;AACD;;AAED,aACE;AAAI,QAAA,SAAS,EAAEA,SAAf;AAA0B,QAAA,GAAG,EAAElD;AAA/B,SACE;AACE,QAAA,SAAS,EAAC,sBADZ;AAEE,uBAAY,KAFd;AAGE,QAAA,IAAI,EAAC,KAHP;AAIE,QAAA,IAAI,gBAASA,IAAT,CAJN;AAKE,QAAA,OAAO,EAAE,mBAAM;AACb;AACA,UAAA,MAAI,CAAChB,KAAL,CAAW8D,2BAAX,CAAuC,MAAI,CAAC9D,KAAL,CAAWpB,aAAX,CAAyBG,GAAzB,CAA6B,YAA7B,CAAvC,EAAmFiC,IAAnF;AACD;AARH,SAUGY,IAAI,CAACE,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAEoC,YAAN;AAAoBnC,QAAAA,cAAc,EAAE;AAApC,OAAnB,CAVH,CADF,CADF;AAgBD;AAED;;;;;;;;;8CAM0BhB,I,EAAM;AAC9B,UAAIkD,SAAS,GAAG,kBAAhB;AACA,UAAME,GAAG,iCAA0BpD,IAA1B,CAAT;AACA,UAAMvB,QAAQ,GAAG,iBAAjB;AACA,UAAIoE,UAAU,GAAG,+CAA0B,KAAK7D,KAAL,CAAWpB,aAArC,CAAjB;;AAEA,UAAIiF,UAAU,KAAK,IAAf,IAAuB,OAAOA,UAAP,KAAsB,WAAjD,EAA8D;AAC5DA,QAAAA,UAAU,GAAG,EAAb;AACD,OAR6B,CAU9B;;;AACAA,MAAAA,UAAU,GAAGA,UAAU,CAACrB,OAAX,CAAmB,IAAIC,MAAJ,CAAW,UAAX,CAAnB,EAA2C,EAA3C,CAAb;AAEA,UAAM4B,aAAa,GAAG,6CAAwB,KAAKrE,KAAL,CAAWpB,aAAnC,EAAkDoC,IAAlD,CAAtB,CAb8B,CAe9B;;AACA,UAAIqD,aAAJ,EAAmB;AACjBH,QAAAA,SAAS,aAAMA,SAAN,YAAT;AACD;;AAED,aACE;AAAK,QAAA,SAAS,EAAEA,SAAhB;AAA2B,QAAA,EAAE,EAAEE,GAA/B;AAAoC,QAAA,IAAI,EAAC,UAAzC;AAAoD,QAAA,GAAG,EAAEpD;AAAzD,SACI,KAAK+C,uBAAL,CAA6B/C,IAA7B,EAAmC6C,UAAnC,CADJ,EAEI,KAAK5D,KAAL,CAAWC,QAAX,GAAsB,KAAK8D,wBAAL,EAAtB,GAAwD,EAF5D,EAIIH,UAAU,KAAK,EAAf,IAAqB,CAAC,8CAAyB,KAAK7D,KAAL,CAAWpB,aAApC,CAAtB,GACIY,OAAO,CAACyE,yBAAR,CAAkCxE,QAAlC,EAA4C,KAAKO,KAAL,CAAWpB,aAAvD,CADJ,GAEI,EANR,EASI,6CAAwB,KAAKoB,KAAL,CAAWpB,aAAnC,EAAkD,WAAlD,IACI,KAAK0F,2BAAL,EADJ,GAEI,IAXR,CADF;AAgBD;AAED;;;;;;;;;4CAMwBtD,I,EAAM6C,U,EAAY;AAAA;;AACxC,aACE,gCAAC,2BAAD;AACE,QAAA,GAAG,EAAE7C,IADP;AAEE,QAAA,EAAE,EAAEA,IAFN;AAGE,QAAA,UAAU,EAAE,KAAKf,KAAL,CAAWI,KAHzB;AAIE,QAAA,IAAI,EAAE4C,cAAc,CAACjC,IAAD,CAJtB;AAKE,QAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAW8C,QALvB;AAME,QAAA,sBAAsB,EAAE,gCAAC/B,KAAD,EAAW;AACjC,UAAA,MAAI,CAACT,sBAAL,CAA4BS,KAA5B,EAAmCC,IAAnC;AACD,SARH;AASE,QAAA,QAAQ,EAAE,kBAACD,KAAD,EAAW;AACnB,UAAA,MAAI,CAACT,sBAAL,CAA4BS,KAA5B,EAAmCC,IAAnC;AACD,SAXH;AAYE,QAAA,qBAAqB,EAAE,+BAACuD,MAAD,EAAY;AACjC,UAAA,MAAI,CAAC/D,iCAAL,CAAuC+D,MAAvC,EAA+CvD,IAA/C;AACD,SAdH;AAeE,QAAA,UAAU,EAAE6C,UAfd;AAgBE,QAAA,KAAK,EAAEA,UAhBT;AAiBE,QAAA,MAAM,EAAE,KAAK7D,KAAL,CAAWwE;AAjBrB,QADF;AAqBD;AAED;;;;;;;6CAIyB;AACvB,aAAQ,KAAKvE,KAAL,CAAWG,OAAX,GACF;AAAK,QAAA,SAAS,EAAC;AAAf,SACA,2CACE,gCAAC,2BAAD;AAAkB,QAAA,EAAE,EAAC,mCAArB;AAAyD,QAAA,cAAc,EAAC;AAAxE,QADF,CADA,CADE,GAMF,EANN;AAQD;AAED;;;;;;;kDAI8B;AAAA;;AAC5B,UAAMqE,YAAY,GAAG,sDAAiC,KAAKzE,KAAL,CAAWpB,aAA5C,EAA2D,WAA3D,EAAwE,SAAxE,CAArB;;AACA,UAAMF,IAAI,qBAAQH,OAAO,CAAC,SAAD,CAAf,CAAV;;AAF4B,UAGpBqD,IAHoB,GAGX,KAAK5B,KAHM,CAGpB4B,IAHoB;AAI5B,UAAMQ,UAAU,GAAG,KAAKpC,KAAL,CAAWpB,aAAX,CAAyBG,GAAzB,CAA6B,YAA7B,CAAnB;AAEA,aAAQ;AAAK,QAAA,SAAS,EAAC;AAAf,SACJ;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,gCAAC,yBAAD,eACML,IADN;AAEE,QAAA,IAAI,EAAC,eAFP;AAGE,QAAA,EAAE,EAAC,eAHL;AAIE,wBAAa,MAJf;AAKE,QAAA,QAAQ,EAAE,kBAAAqC,KAAK;AAAA,iBAAI,MAAI,CAACJ,mBAAL,CAAyBI,KAAzB,CAAJ;AAAA,SALjB;AAME,QAAA,KAAK,EAAE,OAAO0D,YAAP,KAAwB,WAAxB,GAAsCA,YAAtC,GAAqD;AAN9D,SADF,EASE;AAAO,QAAA,OAAO,EAAC,eAAf;AAA+B,QAAA,SAAS,EAAC;AAAzC,SACE,gCAAC,2BAAD;AAAkB,QAAA,EAAE,EAAC,qCAArB;AAA2D,QAAA,cAAc,EAAC;AAA1E,QADF,CATF,CADI,EAeF,CAAC,8CAAyB,KAAKzE,KAAL,CAAWpB,aAApC,EAAmD,oBAAnD,CAAD,GACIY,OAAO,CAACyE,yBAAR,CAAkC,wBAAlC,EAA4D,KAAKjE,KAAL,CAAWpB,aAAvE,CADJ,GAEI,EAjBF,EAmBJ;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,OAAO,EAAE,sDAAiC,KAAKoB,KAAL,CAAWpB,aAA5C,EAA2D,WAA3D,EAAwE,SAAxE,CAFX;AAGE,QAAA,IAAI,2BAAoBwD,UAApB,CAHN;AAIE,QAAA,EAAE,2BAAoBA,UAApB,CAJJ,CAKE;AALF;AAME,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAAC1B,0BAAL,EAAN;AAAA;AANX,QAnBI,EA2BJ;AAAO,QAAA,OAAO,2BAAoB0B,UAApB,CAAd;AAAgD,QAAA,QAAQ,EAAE;AAAA,iBAAM,MAAI,CAAC1B,0BAAL,CAAgC0B,UAAhC,CAAN;AAAA;AAA1D,SACE,gCAAC,2BAAD;AAAkB,QAAA,EAAE,EAAC,0CAArB;AAAgE,QAAA,cAAc,EAAC;AAA/E,QADF,CA3BI,EA8BJ;AAAK,QAAA,uBAAuB,EAAE;AAACrC,UAAAA,MAAM,EAAE6B,IAAI,CAACE,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAC,oCAAL;AAA2CC,YAAAA,cAAc,EAAE;AAA3D,WAAnB;AAAT;AAA9B,QA9BI,CAAR;AAiCD;;;6BAEQ;AAAA;;AAAA,wBAC0D,KAAKhC,KAD/D;AAAA,UACC+B,EADD,eACCA,EADD;AAAA,UACK2C,iBADL,eACKA,iBADL;AAAA,UACwBrB,YADxB,eACwBA,YADxB;AAAA,UACsCsB,MADtC,eACsCA,MADtC;AAAA,UAC8CC,OAD9C,eAC8CA,OAD9C;AAAA,UAECzE,UAFD,GAEgB,KAAKF,KAFrB,CAECE,UAFD;AAIP,aACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,GAAG,EAAE4B;AAAnC,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,GAAG,EAAE2C,iBAAV;AAA6B,QAAA,GAAG,EAAC;AAAjC,QADF,CADF,EAIE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAM,QAAA,SAAS,EAAC;AAAhB,SACE,6CACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,gCAAC,2BAAD;AAAkB,QAAA,EAAE,EAAC,mCAArB;AAAyD,QAAA,cAAc,EAAC;AAAxE,QADF,EAEE,gCAAC,2BAAD;AAAiB,QAAA,OAAO,EAAEE,OAA1B;AAAmC,QAAA,KAAK,EAAE,KAAK5E,KAAL,CAAWqC,SAAX,CAAqBtD,GAArB,CAAyB,YAAzB;AAA1C,QAFF,CADF,EAKG4F,MAAM,CAAC5F,GAAP,CAAW,YAAX,EAAyBA,GAAzB,CAA6B,YAA7B,EAA2C,KAA3C,MAAsD,IAAtD,GACC,gCAAC,6BAAD;AACE,QAAA,EAAE,EAAE,CAACoB,UADP;AAEE,QAAA,OAAO,EAAE,mBAAM;AACb,UAAA,MAAI,CAAC0E,kBAAL,CAAwB1E,UAAxB;AACD;AAJH,QADD,GAOG,EAZN,CADF,CADF,EAmBE,6CACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACI,KAAK2E,sBAAL,EADJ,EAGG,KAAK7E,KAAL,CAAWC,QAAX,GACG;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,KAAK6E,2BAAL,CAAiC1B,YAAjC,CADF,CADH,GAIG,EAPN,CADF,CAnBF,CADF,CAJF,CADF;AAyCD;;;;EAndmB2B,kBAAMC,S;;AAsd5BzF,OAAO,CAAC0F,SAAR,GAAoB;AAClBtD,EAAAA,IAAI,EAAEuD,qBAAUC,MAAV,CAAiBC,UADL;AAElBtD,EAAAA,EAAE,EAAEoD,qBAAUG,MAAV,CAAiBD,UAFH;AAEe;AACjCX,EAAAA,iBAAiB,EAAES,qBAAUG,MAAV,CAAiBD,UAHlB;AAG8B;AAChDhC,EAAAA,YAAY,EAAE8B,qBAAUC,MAAV,CAAiBC,UAJb;AAIyB;AAC3CvC,EAAAA,QAAQ,EAAEqC,qBAAUC,MAAV,CAAiBC,UALT;AAMlBb,EAAAA,MAAM,EAAEW,qBAAUC,MAAV,CAAiBC,UANP;AAMmB;AACrChD,EAAAA,SAAS,EAAE8C,qBAAUC,MAAV,CAAiBC,UAPV;AAQlBV,EAAAA,MAAM,EAAEQ,qBAAUC,MAAV,CAAiBC,UARP;AASlBT,EAAAA,OAAO,EAAEO,qBAAUC,MAAV,CAAiBC,UATR;AASoB;AACtCjC,EAAAA,WAAW,EAAE+B,qBAAUC,MAAV,CAAiBC,UAVZ;AAUwB;AAC1CzG,EAAAA,aAAa,EAAEuG,qBAAUC,MAAV,CAAiBC,UAXd;AAW0B;AAC5CvE,EAAAA,aAAa,EAAEqE,qBAAUI,IAAV,CAAeF,UAZZ;AAYwB;AAC1CpD,EAAAA,kBAAkB,EAAEkD,qBAAUI,IAAV,CAAeF,UAbjB;AAa6B;AAC/C1D,EAAAA,qBAAqB,EAAEwD,qBAAUI,IAAV,CAAeF,UAdpB;AAcgC;AAClDvB,EAAAA,2BAA2B,EAAEqB,qBAAUI,IAAV,CAAeF,UAf1B;AAesC;AACxDG,EAAAA,gBAAgB,EAAEL,qBAAUI,IAAV,CAAeF,UAhBf;AAgB2B;AAC7ClF,EAAAA,UAAU,EAAEgF,qBAAUM,IAAV,CAAeJ,UAjBT;AAiBqB;AACvChE,EAAAA,iCAAiC,EAAE8D,qBAAUI,IAAV,CAAeF,UAlBhC;AAkB4C;AAC9D/D,EAAAA,iBAAiB,EAAE6D,qBAAUI,IAAV,CAAeF,UAnBhB,CAmB4B;;AAnB5B,CAApB;;eAsBe,2BAAW7F,OAAX,C","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl/dist/react-intl';\nimport { Map, List } from 'immutable';\nimport MaskedInput from 'react-text-mask';\nimport Switch from 'react-toggle-switch';\nimport PopoverQuestion from '../PopoverQuestion/PopoverQuestion';\nimport PopoverLink from '../PopoverLink/PopoverLink';\nimport CardNumberField from '../CardNumberField/CardNumberField';\nimport * as tabKeycardType from '../../constants/keycardsType';\nimport * as MaskHelper from '../../helpers/MaskHelper';\nimport {\n  isCurrentCardNumberType,\n  getCurrentCardNumberValue,\n  isCurrentCardNumberValid,\n  getCardNumberTypes,\n  getCardNumberTypeElementProperty,\n  isSwissPassPropertyValid,\n} from '../../helpers/CardTypeHelper';\n\nconst configs = {\n  ZIPCODE: {\n    placeholder: '0000',\n    mask: [\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/,\n    ],\n  },\n};\n\n/**\n * Get errors according to specific key ([property], global)\n *\n * @param localItemInfo\n * @param keys\n */\nfunction getErrors(localItemInfo, keys) {\n  let errors = localItemInfo.get('errors', new Map());\n  if (typeof errors === 'undefined') {\n    errors = new Map();\n  }\n  // If no errors, return empty list\n  if (errors.isEmpty()) {\n    return errors;\n  }\n\n  // Build a list if is not it\n  if (!List.isList(keys)) {\n    keys = new List([keys]);\n  }\n\n  return errors.filter((value, errorField) => (\n    keys.includes(errorField)\n  ));\n}\n\n/**\n * Keycard\n */\nclass KeyCard extends React.Component {\n  /**\n   * Display Error Message\n   * @param errorKey\n   * @param localItemInfo\n   * @returns {*}\n   */\n\n  static renderedErrorInputMessage(errorKey, localItemInfo) {\n    const errors = getErrors(localItemInfo, errorKey);\n    if (errors) {\n      return errors.valueSeq().map(suberrors => {\n        if (Map.isMap(suberrors) || List.isList(suberrors)) {\n          return suberrors\n            .valueSeq()\n            .map(error => (\n              <span\n                key={error}\n                className=\"errorInputKeyCard\"\n                dangerouslySetInnerHTML={{ __html: error }}\n              />\n            ));\n        }\n        return <p className=\"errorInputKeyCard\">{suberrors}</p>;\n      });\n    }\n    return '';\n  }\n\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkYes: !props.hasSupport,\n      checkNo: props.hasSupport,\n      hasSupport: props.hasSupport,\n      valid: true,\n    };\n    this.handleChangeCardNumber = this.handleChangeCardNumber.bind(this);\n    this.handleChangeAutoSuggestCardNumber = this.handleChangeAutoSuggestCardNumber.bind(this);\n    this.changeValidationCard = this.changeValidationCard.bind(this);\n    this.handleChangeCheckSwisspass = this.handleChangeCheckSwisspass.bind(this);\n    this.handleChangeZipcode = this.handleChangeZipcode.bind(this);\n  }\n\n  /**\n   * Change local state when click support change value\n   * @param checked\n   */\n  handleChangeToggle(checked) {\n    this.setState({\n      checkYes: checked,\n      checkNo: !checked,\n      hasSupport: !checked,\n    });\n    this.props.onChangeCheck(checked ? 'yes' : 'no');\n  }\n\n  /**\n   * Change card number\n   *\n   * @param event\n   * @param type\n   */\n  handleChangeCardNumber(event, type) {\n    this.handleChangeAutoSuggestCardNumber(event.target.value, type, false);\n  }\n\n  /**\n   * handle Change Check Swisspass\n   */\n  handleChangeCheckSwisspass() {\n    const type = 'swisspass';\n    const property = 'checked';\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const newValue = !getCardNumberTypeElementProperty(this.props.localItemInfo, type, property);\n\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, property, newValue);\n\n    this.props.checkValidKeycard(currentId);\n  }\n\n  /**\n   * handle Change Zipcode\n   * @param event\n   */\n  handleChangeZipcode(event) {\n    const type = 'swisspass';\n    const zipCode = event.target.value;\n    const errorKey = 'data.swisspass.zipcode';\n\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, 'zipcode', zipCode);\n\n    const pattern = /^[0-9]{4}$/;\n    const isValid = pattern.test(zipCode);\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, 'zipcodeFormatValid', isValid);\n\n    // Delete errors\n    this.props.deleteKeyFieldsErrors(currentId, errorKey);\n\n    if (!isValid) {\n      const { intl } = this.props;\n      const errorLabel = intl.formatMessage({ id: 'rp.checkout.customize.swisspass.zipcode.invalid', defaultMessage: 'invalid' });\n      this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n    } else {\n      this.props.checkValidKeycard(currentId);\n    }\n  }\n\n  /**\n   *\n   * @param cardnumber\n   * @param type\n   * @param suggest\n   */\n  handleChangeAutoSuggestCardNumber(cardnumber, type, suggest = true) {\n    let newValue = '';\n    const { intl } = this.props;\n    const errorKey = 'data.cardNumber';\n    const errorLabel = intl.formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'invalid' });\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const skierIndex = this.props.orderitem.get('skierIndex');\n\n    let validKeycard = getCardNumberTypeElementProperty(this.props.localItemInfo, type, 'formatValid');\n\n    if (cardnumber !== undefined && typeof cardnumber !== 'undefined') {\n      // Remove spaces on card number\n      cardnumber = cardnumber.replace(new RegExp(/( )|(_)/g), '');\n      // Force SwissPass number to uppercase\n      if (type === 'swisspass') {\n        cardnumber = cardnumber.toUpperCase();\n      }\n\n      // Update others card types values\n      getCardNumberTypes(this.props.localItemInfo).forEach((item, key) => {\n        if (![type, 'swisspass'].includes(key)) {\n          if (suggest) {\n            this.props.keycards.forEach((element) => {\n              if (element.get('shortnumber') === cardnumber || element.get('cardnumber') === cardnumber) {\n                newValue = type === 'sd' ? element.get('shortnumber') : element.get('cardnumber');\n              }\n            });\n          }\n          this.props.stateUpdateCardNumberTypeProperty(skierIndex, key, 'number', newValue);\n        }\n      });\n\n      // Delete errors\n      this.props.deleteKeyFieldsErrors(currentId, errorKey);\n\n      const cardType = tabKeycardType[type];\n\n      // Save cardNumber value\n      this.props.stateUpdateCardNumberTypeProperty(skierIndex, type, 'number', cardnumber);\n\n      // verification keycard number is correct\n      if (cardnumber !== '' || cardnumber !== undefined) {\n        validKeycard = MaskHelper.verifyKeycard(cardnumber, cardType);\n\n        this.props.stateUpdateCardNumberTypeProperty(skierIndex, type, 'formatValid', validKeycard);\n        this.changeValidationCard(validKeycard);\n\n        this.props.checkValidKeycard(skierIndex);\n\n        // Keycard mask is valid\n        if (!validKeycard) {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n      } else {\n        this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param value\n   */\n  changeValidationCard(value) {\n    this.setState({ valid: value });\n  }\n\n  /**\n   * Content for popover link\n   * @returns {*}\n   */\n  renderedLabelLinkPopover() {\n    return this.props.popoverLink.get('labelKeycardInfo') !== null\n      ? <PopoverLink popoverLink={this.props.popoverLink} index={this.props.orderitem.get('skierIndex')} />\n      : '';\n  }\n\n  /**\n   * Render keycard types content (choice or not)\n   *\n   * @param keycardTypes\n   * @returns {XML}\n   */\n  renderedKeyCardTypesContent(keycardTypes) {\n    return (keycardTypes.size > 1\n        ? ( // Display Double Mask KeyCard\n          <div>\n            <ul className=\"nav nav-tabs nav-justified responsive-tabs\" role=\"tablist\">\n              { keycardTypes.keySeq().toJS().map(type => this.renderedLabelTab(type)) }\n            </ul>\n            <div className=\"tab-content\">\n              {\n                keycardTypes.keySeq().toJS().map(type => (\n                  this.renderedSomeInputKeyCards(type)\n                ))\n              }\n            </div>\n          </div>\n        ) : (\n          // Display one Input for keyCard : get the first cardNumber type (first key of map)\n          this.renderedInputOneKeyCard(keycardTypes.keySeq().first())\n        )\n    );\n  }\n\n  /**\n   * Display of the simple input mask\n   *\n   * @param type\n   * @returns {*}\n   */\n  renderedInputOneKeyCard(type) {\n    const errorKey = new List(['cardNumber', 'data.cardNumber']);\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    let cardNumber = getCurrentCardNumberValue(this.props.localItemInfo);\n\n    if (cardNumber === null || typeof cardNumber === 'undefined') {\n      cardNumber = '';\n    }\n\n    // Change current cardNumber type\n    this.props.updateCurrentCardNumberType(currentId, type);\n\n    return (\n      <div key={type}>\n        { this.renderedCardNumberField(type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        {\n          cardNumber === '' || !isCurrentCardNumberValid(this.props.localItemInfo)\n            ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo)\n            : '' }\n      </div>\n    );\n  }\n\n  /**\n   * Display labels for inputs - select active input\n   * @returns {XML}\n   * @param textType\n   * @param type\n   */\n  renderedLabelTab(type) {\n    let className = 'nav-item';\n    const { intl } = this.props;\n    const labelKeycard = `rp.checkout.keycard.label.${type}`;\n\n    if (isCurrentCardNumberType(this.props.localItemInfo, type)) {\n      className = `${className} active`;\n    }\n\n    return (\n      <li className={className} key={type}>\n        <a\n          className=\"nav-link text-center\"\n          data-toggle=\"tab\"\n          role=\"tab\"\n          href={`type${type}`}\n          onClick={() => {\n            // Change current cardNumber type\n            this.props.updateCurrentCardNumberType(this.props.localItemInfo.get('skierIndex'), type);\n          }}\n        >\n          {intl.formatMessage({ id: labelKeycard, defaultMessage: 'Keycard' })}\n        </a>\n      </li>\n    );\n  }\n\n  /**\n   * Display of the double input mask\n   *\n   * @param type\n   * @returns {XML}\n   */\n  renderedSomeInputKeyCards(type) {\n    let className = 'tab-pane fade in';\n    const aux = `tabKeycardType[type]${type}`;\n    const errorKey = 'data.cardNumber';\n    let cardNumber = getCurrentCardNumberValue(this.props.localItemInfo);\n\n    if (cardNumber === null || typeof cardNumber === 'undefined') {\n      cardNumber = '';\n    }\n\n    // Remove spaces on card number\n    cardNumber = cardNumber.replace(new RegExp(/( )|(_)/g), '');\n\n    const isCurrentType = isCurrentCardNumberType(this.props.localItemInfo, type);\n\n    // active tab on select\n    if (isCurrentType) {\n      className = `${className} active`;\n    }\n\n    return (\n      <div className={className} id={aux} role=\"tabpanel\" key={type}>\n        { this.renderedCardNumberField(type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        {\n          cardNumber === '' || !isCurrentCardNumberValid(this.props.localItemInfo)\n            ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo)\n            : ''\n        }\n        {\n          isCurrentCardNumberType(this.props.localItemInfo, 'swisspass')\n            ? this.renderedContentForSwisspass()\n            : null\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Render a cardNumber field\n   *\n   * @param type\n   * @param cardNumber\n   */\n  renderedCardNumberField(type, cardNumber) {\n    return (\n      <CardNumberField\n        key={type}\n        id={type}\n        validInput={this.state.valid}\n        mode={tabKeycardType[type]}\n        keycards={this.props.keycards}\n        handleChangeCardNumber={(event) => {\n          this.handleChangeCardNumber(event, type);\n        }}\n        onChange={(event) => {\n          this.handleChangeCardNumber(event, type);\n        }}\n        onAutoSuggestSelected={(number) => {\n          this.handleChangeAutoSuggestCardNumber(number, type);\n        }}\n        cardNumber={cardNumber}\n        value={cardNumber}\n        params={this.props.params}\n      />\n    );\n  }\n\n  /**\n   * Display content checked no\n   * @returns {*}\n   */\n  renderedContentCheckNo() {\n    return (this.state.checkNo\n        ? <div className=\"msgCheckNo\">\n          <p>\n            <FormattedMessage id=\"rp.checkout.ordercustom.nokeycard\" defaultMessage=\"no card\" />\n          </p>\n        </div>\n        : ''\n    );\n  }\n\n  /**\n   *\n   * @returns {null}\n   */\n  renderedContentForSwisspass() {\n    const zipcodeValue = getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'zipcode');\n    const mask = { ...configs['ZIPCODE']};\n    const { intl } = this.props;\n    const skierIndex = this.props.localItemInfo.get('skierIndex');\n\n    return (<div className=\"contentSwisspass\">\n        <div className=\"wrapperForm\">\n          <MaskedInput\n            {...mask}\n            name=\"zipcode-swiss\"\n            id=\"zipcode-swiss\"\n            data-control=\"true\"\n            onChange={event => this.handleChangeZipcode(event)}\n            value={typeof zipcodeValue !== 'undefined' ? zipcodeValue : ''}\n          />\n          <label htmlFor=\"zipcode-swiss\" className=\"control-label\">\n            <FormattedMessage id=\"rp.checkout.shippingaddress.zipcode\" defaultMessage=\"Zipcode\" />\n          </label>\n        </div>\n        {\n          !isSwissPassPropertyValid(this.props.localItemInfo, 'zipcodeFormatValid')\n            ? KeyCard.renderedErrorInputMessage('data.swisspass.zipcode', this.props.localItemInfo)\n            : ''\n        }\n        <input\n          type=\"checkbox\"\n          checked={getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'checked')}\n          name={`check-swisspass${skierIndex}`}\n          id={`check-swisspass${skierIndex}`}\n          // onChange={() => this.handleChangeCheckSwisspass()}\n          onClick={() => this.handleChangeCheckSwisspass()}\n        />\n        <label htmlFor={`check-swisspass${skierIndex}`} onChange={() => this.handleChangeCheckSwisspass(skierIndex)}>\n          <FormattedMessage id=\"rp.checkout.keycard.swisspass.check.text\" defaultMessage=\"I agree with the conditions of SwissPass\" />\n        </label>\n        <div dangerouslySetInnerHTML={{__html: intl.formatMessage({ id:'rp.checkout.keycard.swisspass.link', defaultMessage: 'Disclaimer' })}} />\n      </div>\n    );\n  }\n\n  render() {\n    const { id, keycardPictureSrc, keycardTypes, fields, popover } = this.props;\n    const { hasSupport } = this.state;\n\n    return (\n      <div className=\"blockPopover\" key={id}>\n        <div className=\"col-xs-4 keyCardAreaImage\">\n          <img src={keycardPictureSrc} alt=\"keycardPicture\" />\n        </div>\n        <div className=\"row\">\n          <form className=\"col-xs-12\">\n            <div>\n              <div className=\"keycard_area_title\">\n                <div className=\"keycardMessage\">\n                  <FormattedMessage id=\"rp.checkout.keycard.area.question\" defaultMessage=\"I have a card\" />\n                  <PopoverQuestion popover={popover} index={this.props.orderitem.get('skierIndex')} />\n                </div>\n                {fields.get('cardNumber').get('hasSupport', false) === true ?\n                  <Switch\n                    on={!hasSupport}\n                    onClick={() => {\n                      this.handleChangeToggle(hasSupport);\n                    }}\n                  />\n                  : ''\n                }\n              </div>\n            </div>\n\n            <div>\n              <div className=\"col-xs-8 form-group keyCardAreaForm\">\n                { this.renderedContentCheckNo() }\n\n                {this.state.checkYes\n                  ? <div className=\"msgCheckYes\">\n                    { this.renderedKeyCardTypesContent(keycardTypes) }\n                  </div>\n                  : ''}\n              </div>\n            </div>\n          </form>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nKeyCard.propTypes = {\n  intl: PropTypes.object.isRequired,\n  id: PropTypes.string.isRequired, // index\n  keycardPictureSrc: PropTypes.string.isRequired, // keycard picture src\n  keycardTypes: PropTypes.object.isRequired, // keycards to display the tabs\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired, // generic params\n  orderitem: PropTypes.object.isRequired,\n  fields: PropTypes.object.isRequired,\n  popover: PropTypes.object.isRequired, // content for popover info keycard\n  popoverLink: PropTypes.object.isRequired, // content for popover link keycard\n  localItemInfo: PropTypes.object.isRequired, // current local Item\n  onChangeCheck: PropTypes.func.isRequired, // function to make changes when checking\n  updateFieldsErrors: PropTypes.func.isRequired, // function to update fields errors\n  deleteKeyFieldsErrors: PropTypes.func.isRequired, // function to delete key on fields errors\n  updateCurrentCardNumberType: PropTypes.func.isRequired, // function to update current cardNumber type\n  updateValidField: PropTypes.func.isRequired, //\n  hasSupport: PropTypes.bool.isRequired, // boolean to know if support exists\n  stateUpdateCardNumberTypeProperty: PropTypes.func.isRequired, // function to update cardNumber property value\n  checkValidKeycard: PropTypes.func.isRequired, // function to check complete cardCardNumber valid\n};\n\nexport default injectIntl(KeyCard);\n"],"file":"KeyCard.js"}