{"version":3,"sources":["../../../src/components/KeyCard/KeyCard.jsx"],"names":["tabKeycardType","MaskHelper","configs","ZIPCODE","placeholder","mask","KeyCard","errorKey","localItemInfo","error","get","props","state","checkYes","hasSupport","checkNo","valid","handleChangeCardNumber","bind","handleChangeAutoSuggestCardNumber","changeValidationCard","handleChangeCheckSwisspass","handleChangeZipcode","checked","setState","onChangeCheck","event","type","target","value","property","currentId","newValue","stateUpdateCardNumberTypeProperty","cardNumber","zipCode","validateKeycard","pattern","isValid","test","deleteKeyFieldsErrors","formatMessage","intl","errorLabel","id","defaultMessage","updateFieldsErrors","cardnumber","suggest","skierIndex","orderitem","validKeycard","undefined","replace","RegExp","forEach","item","key","includes","keycards","element","cardType","isSwissPass","verifyKeycard","getState","console","log","formatIsValid","popoverLink","keycardTypes","size","map","data","renderedLabelTab","renderedSomeInputKeyCards","renderedInputOneKeyCard","keySeq","first","updateCurrentCardNumberType","renderedCardNumberField","renderedLabelLinkPopover","renderedErrorInputMessage","textType","className","aux","isCurrentType","renderedContentForSwisspass","number","params","zipcodeValue","keycardPictureSrc","fields","popover","handleChangeToggle","renderedContentCheckNo","renderedKeyCardTypesContent","Component","propTypes","string","isRequired","object","func","updateValidField","bool"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,c;;AACZ;;IAAYC,U;;AACZ;;AASA;;AACA;;;;;;;;;;;;;;AAEA,IAAMC,UAAU;AACdC,WAAS;AACPC,iBAAa,MADN;AAEPC,UAAM,CACJ,OADI,EACK,OADL,EACc,OADd,EACuB,OADvB;AAFC;AADK,CAAhB;;AASA;;;;IAGMC,O;;;;;;AACJ;;;;;;8CAMiCC,Q,EAAUC,a,EAAe;AACxD,UAAMC,QAAQD,cAAcE,GAAd,CAAkB,QAAlB,EAA4B,oBAA5B,EAAuCA,GAAvC,CAA2CH,QAA3C,EAAqD,EAArD,CAAd;AACA,aAAO;AAAA;AAAA,UAAG,WAAU,mBAAb;AAAkCE;AAAlC,OAAP;AACD;;AAED;;;;;;;AAIA,mBAAYE,KAAZ,EAAmB;AAAA;;AAAA,kHACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,gBAAU,CAACF,MAAMG,UADN;AAEXC,eAASJ,MAAMG,UAFJ;AAGXA,kBAAYH,MAAMG,UAHP;AAIXE,aAAO;AAJI,KAAb;AAMA,UAAKC,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BC,IAA5B,OAA9B;AACA,UAAKC,iCAAL,GAAyC,MAAKA,iCAAL,CAAuCD,IAAvC,OAAzC;AACA,UAAKE,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BF,IAA1B,OAA5B;AACA,UAAKG,0BAAL,GAAkC,MAAKA,0BAAL,CAAgCH,IAAhC,OAAlC;AACA,UAAKI,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBJ,IAAzB,OAA3B;AAbiB;AAclB;;AAED;;;;;;;;uCAImBK,O,EAAS;AAC1B,WAAKC,QAAL,CAAc;AACZX,kBAAUU,OADE;AAEZR,iBAAS,CAACQ,OAFE;AAGZT,oBAAY,CAACS;AAHD,OAAd;AAKA,WAAKZ,KAAL,CAAWc,aAAX,CAAyBF,UAAU,KAAV,GAAkB,IAA3C;AACD;;AAED;;;;;;;;;2CAMuBG,K,EAAOC,I,EAAM;AAClC,WAAKR,iCAAL,CAAuCO,MAAME,MAAN,CAAaC,KAApD,EAA2DF,IAA3D,EAAiE,KAAjE;AACD;;AAED;;;;;;iDAG6B;AAC3B,UAAMA,OAAO,WAAb;AACA,UAAMG,WAAW,SAAjB;AACA,UAAMC,YAAY,KAAKpB,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,YAA7B,CAAlB;AACA,UAAMsB,WAAW,CAAC,sDAAiC,KAAKrB,KAAL,CAAWH,aAA5C,EAA2DmB,IAA3D,EAAiEG,QAAjE,CAAlB;;AAEA,WAAKnB,KAAL,CAAWsB,iCAAX,CAA6CF,SAA7C,EAAwDJ,IAAxD,EAA8DG,QAA9D,EAAwEE,QAAxE;;AAEA,UAAI,8CAAyB,KAAKrB,KAAL,CAAWH,aAApC,EAAmD,aAAnD,KACC,8CAAyB,KAAKG,KAAL,CAAWH,aAApC,EAAmD,oBAAnD,CADD,IAECwB,QAFL,EAEe;AACb,YAAME,aAAa,sDAAiC,KAAKvB,KAAL,CAAWH,aAA5C,EAA2D,WAA3D,EAAwE,QAAxE,CAAnB;AACA,YAAM2B,UAAU,sDAAiC,KAAKxB,KAAL,CAAWH,aAA5C,EAA2D,WAA3D,EAAwE,SAAxE,CAAhB;AACA,aAAKG,KAAL,CAAWyB,eAAX,CAA2BL,SAA3B,EAAsCG,UAAtC,EAAkDC,OAAlD;AACD;AACF;;AAED;;;;;;;wCAIoBT,K,EAAO;AACzB,UAAMC,OAAO,WAAb;AACA,UAAMQ,UAAUT,MAAME,MAAN,CAAaC,KAA7B;AACA,UAAMtB,WAAW,wBAAjB;;AAEA,UAAMwB,YAAY,KAAKpB,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,YAA7B,CAAlB;AACA,WAAKC,KAAL,CAAWsB,iCAAX,CAA6CF,SAA7C,EAAwDJ,IAAxD,EAA8D,SAA9D,EAAyEQ,OAAzE;;AAEA,UAAME,UAAU,YAAhB;AACA,UAAMC,UAAUD,QAAQE,IAAR,CAAaJ,OAAb,CAAhB;AACA,WAAKxB,KAAL,CAAWsB,iCAAX,CAA6CF,SAA7C,EAAwDJ,IAAxD,EAA8D,oBAA9D,EAAoFW,OAApF;;AAEA;AACA,WAAK3B,KAAL,CAAW6B,qBAAX,CAAiCT,SAAjC,EAA4CxB,QAA5C;;AAEA,UAAI,CAAC+B,OAAL,EAAc;AAAA,YACJG,aADI,GACc,KAAK9B,KAAL,CAAW+B,IADzB,CACJD,aADI;;AAEZ,YAAME,aAAaF,cAAc,EAAEG,IAAI,iDAAN,EAAyDC,gBAAgB,SAAzE,EAAd,CAAnB;AACA,aAAKlC,KAAL,CAAWmC,kBAAX,CAA8Bf,SAA9B,EAAyCxB,QAAzC,EAAmDoC,UAAnD;AACD,OAJD,MAIO,IAAI,8CAAyB,KAAKhC,KAAL,CAAWH,aAApC,EAAmD,aAAnD,KACJ,8CAAyB,KAAKG,KAAL,CAAWH,aAApC,EAAmD,SAAnD,CADA,EAC+D;AACpE,YAAM0B,aAAa,sDAAiC,KAAKvB,KAAL,CAAWH,aAA5C,EAA2D,WAA3D,EAAwE,QAAxE,CAAnB;AACA,aAAKG,KAAL,CAAWyB,eAAX,CAA2BL,SAA3B,EAAsCG,UAAtC,EAAkDC,OAAlD;AACD;AACF;;AAED;;;;;;;;;sDAMkCY,U,EAAYpB,I,EAAsB;AAAA;;AAAA,UAAhBqB,OAAgB,uEAAN,IAAM;;AAClE,UAAIhB,WAAW,EAAf;AADkE,UAE1DS,aAF0D,GAExC,KAAK9B,KAAL,CAAW+B,IAF6B,CAE1DD,aAF0D;;AAGlE,UAAMlC,WAAW,iBAAjB;AACA,UAAMoC,aAAaF,cAAc,EAAEG,IAAI,0CAAN,EAAkDC,gBAAgB,SAAlE,EAAd,CAAnB;AACA,UAAMd,YAAY,KAAKpB,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,YAA7B,CAAlB;AACA,UAAMuC,aAAa,KAAKtC,KAAL,CAAWuC,SAAX,CAAqBxC,GAArB,CAAyB,YAAzB,CAAnB;;AAEA,UAAIyC,eAAe,sDAAiC,KAAKxC,KAAL,CAAWH,aAA5C,EAA2DmB,IAA3D,EAAiE,aAAjE,CAAnB;;AAEA,UAAIoB,eAAeK,SAAf,IAA4B,OAAOL,UAAP,KAAsB,WAAtD,EAAmE;AACjE;AACAA,qBAAaA,WAAWM,OAAX,CAAmB,IAAIC,MAAJ,CAAW,UAAX,CAAnB,EAA2C,EAA3C,CAAb;;AAEA;AACA,gDAAmB,KAAK3C,KAAL,CAAWH,aAA9B,EAA6C+C,OAA7C,CAAqD,UAACC,IAAD,EAAOC,GAAP,EAAe;AAClE,cAAI,CAAC,CAAC9B,IAAD,EAAO,WAAP,EAAoB+B,QAApB,CAA6BD,GAA7B,CAAL,EAAwC;AACtC,gBAAIT,OAAJ,EAAa;AACX,qBAAKrC,KAAL,CAAWgD,QAAX,CAAoBJ,OAApB,CAA4B,UAACK,OAAD,EAAa;AACvC,oBAAIA,QAAQlD,GAAR,CAAY,aAAZ,MAA+BqC,UAA/B,IAA6Ca,QAAQlD,GAAR,CAAY,YAAZ,MAA8BqC,UAA/E,EAA2F;AACzFf,6BAAWL,SAAS,IAAT,GAAgBiC,QAAQlD,GAAR,CAAY,aAAZ,CAAhB,GAA6CkD,QAAQlD,GAAR,CAAY,YAAZ,CAAxD;AACD;AACF,eAJD;AAKD;AACD,mBAAKC,KAAL,CAAWsB,iCAAX,CAA6CgB,UAA7C,EAAyDQ,GAAzD,EAA8D,QAA9D,EAAwEzB,QAAxE;AACD;AACF,SAXD;;AAaA;AACA,aAAKrB,KAAL,CAAW6B,qBAAX,CAAiCT,SAAjC,EAA4CxB,QAA5C;;AAEA,YAAMsD,WAAW7D,eAAe2B,IAAf,CAAjB;AACA,YAAMmC,cAAc,6CAAwB,KAAKnD,KAAL,CAAWH,aAAnC,EAAkD,WAAlD,CAApB;;AAEA;AACA,YAAIuC,eAAe,EAAf,IAAqBA,eAAeK,SAAxC,EAAmD;AACjDD,yBAAelD,WAAW8D,aAAX,CAAyBhB,UAAzB,EAAqCc,QAArC,CAAf;;AAEA,eAAKlD,KAAL,CAAWsB,iCAAX,CAA6CgB,UAA7C,EAAyDtB,IAAzD,EAA+D,aAA/D,EAA8EwB,YAA9E;AACA,eAAK/B,oBAAL,CAA0B+B,YAA1B;;AAEA;AACA,cAAIA,YAAJ,EAAkB;AAChB;AACA,gBAAMvC,QAAQ,gBAAMoD,QAAN,EAAd;AACAC,oBAAQC,GAAR,CAAY,OAAZ,EAAqBtD,KAArB;;AAEA,gBAAMuD,gBAAgB,+CAAwB,KAAKxD,KAAL,CAAWH,aAAnC,CAAtB;AACAyD,oBAAQC,GAAR,CAAY,eAAZ,EAA6BC,aAA7B;;AAEA,gBAAI,CAACL,WAAL,EAAkB;AAChB,mBAAKnD,KAAL,CAAWyB,eAAX,CAA2BL,SAA3B,EAAsCgB,UAAtC;AACD,aAFD,MAEO,IAAI,8CAAyB,KAAKpC,KAAL,CAAWH,aAApC,EAAmD,oBAAnD,KACJ,8CAAyB,KAAKG,KAAL,CAAWH,aAApC,EAAmD,SAAnD,CADA,EAC+D;AACpE,kBAAM2B,UAAU,sDAAiC,KAAKxB,KAAL,CAAWH,aAA5C,EAA2D,WAA3D,EAAwE,SAAxE,CAAhB;AACA,mBAAKG,KAAL,CAAWyB,eAAX,CAA2BL,SAA3B,EAAsCgB,UAAtC,EAAkDZ,OAAlD;AACD;AACF,WAfD,MAeO;AACL,iBAAKxB,KAAL,CAAWmC,kBAAX,CAA8Bf,SAA9B,EAAyCxB,QAAzC,EAAmDoC,UAAnD;AACD;AACF,SAzBD,MAyBO;AACL,eAAKhC,KAAL,CAAWmC,kBAAX,CAA8Bf,SAA9B,EAAyCxB,QAAzC,EAAmDoC,UAAnD;AACD;;AAED;AACA,aAAKhC,KAAL,CAAWsB,iCAAX,CAA6CgB,UAA7C,EAAyDtB,IAAzD,EAA+D,QAA/D,EAAyEoB,UAAzE;AACD;AACF;;AAED;;;;;;;yCAIqBlB,K,EAAO;AAC1B,WAAKL,QAAL,CAAc,EAAER,OAAOa,KAAT,EAAd;AACD;;AAED;;;;;;;+CAI2B;AACzB,aAAO,KAAKlB,KAAL,CAAWyD,WAAX,CAAuB1D,GAAvB,CAA2B,kBAA3B,MAAmD,IAAnD,GACH,uDAAa,aAAa,KAAKC,KAAL,CAAWyD,WAArC,EAAkD,OAAO,KAAKzD,KAAL,CAAWuC,SAAX,CAAqBxC,GAArB,CAAyB,YAAzB,CAAzD,GADG,GAEH,EAFJ;AAGD;;AAED;;;;;;;;;gDAM4B2D,Y,EAAc;AAAA;;AACxC,aAAQA,aAAaC,IAAb,GAAoB,CAApB,GACF;AACF;AAAA;AAAA;AACE;AAAA;AAAA,YAAI,WAAU,4CAAd,EAA2D,MAAK,SAAhE;AACID,uBAAaE,GAAb,CAAiB,UAACC,IAAD,EAAO7C,IAAP;AAAA,mBACjB,OAAK8C,gBAAL,CAAsBzE,eAAe2B,IAAf,CAAtB,EAA4CA,IAA5C,CADiB;AAAA,WAAjB;AADJ,SADF;AAME;AAAA;AAAA,YAAK,WAAU,aAAf;AAEI0C,uBAAaE,GAAb,CAAiB,UAACC,IAAD,EAAO7C,IAAP;AAAA,mBACf,OAAK+C,yBAAL,CAA+B/C,IAA/B,CADe;AAAA,WAAjB;AAFJ;AANF,OAFI;AAmBJ;AACA,WAAKgD,uBAAL,CAA6BN,aAAaO,MAAb,GAAsBC,KAAtB,EAA7B,CApBJ;AAuBD;;AAED;;;;;;;;;4CAMwBlD,I,EAAM;AAC5B,UAAIwB,eAAe,KAAnB;AACA,UAAM5C,WAAW,iBAAjB;AAF4B,UAGpBkC,aAHoB,GAGF,KAAK9B,KAAL,CAAW+B,IAHT,CAGpBD,aAHoB;;AAI5B,UAAME,aAAaF,cAAc,EAAEG,IAAI,0CAAN,EAAkDC,gBAAgB,OAAlE,EAAd,CAAnB;AACA,UAAMd,YAAY,KAAKpB,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,YAA7B,CAAlB;AACA,UAAIwB,aAAa,+CAA0B,KAAKvB,KAAL,CAAWH,aAArC,CAAjB;;AAEA,UAAI0B,eAAe,IAAf,IAAuB,OAAOA,UAAP,KAAsB,WAAjD,EAA8D;AAC5DA,qBAAa,EAAb;AACD;;AAED;AACA,WAAKvB,KAAL,CAAWmE,2BAAX,CAAuC/C,SAAvC,EAAkDJ,IAAlD;AACA;;;;;;;;;;;AAWA,aACE;AAAA;AAAA,UAAK,KAAKA,IAAV;AACI,aAAKoD,uBAAL,CAA6BpD,IAA7B,EAAmCO,UAAnC,CADJ;AAEI,aAAKtB,KAAL,CAAWC,QAAX,GAAsB,KAAKmE,wBAAL,EAAtB,GAAwD,EAF5D;AAII9C,uBAAe,EAAf,IAAqB,CAAC,8CAAyB,KAAKvB,KAAL,CAAWH,aAApC,CAAtB,GACIF,QAAQ2E,yBAAR,CAAkC1E,QAAlC,EAA4C,KAAKI,KAAL,CAAWH,aAAvD,CADJ,GAEI;AANR,OADF;AAUD;;AAED;;;;;;;;;qCAMiB0E,Q,EAAUvD,I,EAAM;AAAA;;AAC/B,UAAIwD,YAAY,UAAhB;AACA,UAAI,6CAAwB,KAAKxE,KAAL,CAAWH,aAAnC,EAAkDmB,IAAlD,CAAJ,EAA6D;AAC3DwD,oBAAeA,SAAf;AACD;;AAED,aACE;AAAA;AAAA,UAAI,WAAWA,SAAf,EAA0B,KAAKxD,IAA/B;AACE;AAAA;AAAA;AACE,uBAAU,sBADZ;AAEE,2BAAY,KAFd;AAGE,kBAAK,KAHP;AAIE,2BAAaA,IAJf;AAKE,qBAAS,mBAAM;AACb;AACA,qBAAKhB,KAAL,CAAWmE,2BAAX,CAAuC,OAAKnE,KAAL,CAAWH,aAAX,CAAyBE,GAAzB,CAA6B,YAA7B,CAAvC,EAAmFiB,IAAnF;AACD;AARH;AASEuD;AATF;AADF,OADF;AAcD;;AAED;;;;;;;;;8CAM0BvD,I,EAAM;AAC9B,UAAIwD,YAAY,kBAAhB;AACA,UAAMC,+BAA6BzD,IAAnC;AACA,UAAMpB,WAAW,iBAAjB;AACA,UAAI2B,aAAa,+CAA0B,KAAKvB,KAAL,CAAWH,aAArC,CAAjB;;AAEA,UAAI0B,eAAe,IAAf,IAAuB,OAAOA,UAAP,KAAsB,WAAjD,EAA8D;AAC5DA,qBAAa,EAAb;AACD;;AAED;AACAA,mBAAaA,WAAWmB,OAAX,CAAmB,IAAIC,MAAJ,CAAW,UAAX,CAAnB,EAA2C,EAA3C,CAAb;;AAEA,UAAM+B,gBAAgB,6CAAwB,KAAK1E,KAAL,CAAWH,aAAnC,EAAkDmB,IAAlD,CAAtB;;AAEA;AACA,UAAI0D,aAAJ,EAAmB;AACjBF,oBAAeA,SAAf;AACD;;AAED,aACE;AAAA;AAAA,UAAK,WAAWA,SAAhB,EAA2B,IAAIC,GAA/B,EAAoC,MAAK,UAAzC,EAAoD,KAAKzD,IAAzD;AACI,aAAKoD,uBAAL,CAA6BpD,IAA7B,EAAmCO,UAAnC,CADJ;AAEI,aAAKtB,KAAL,CAAWC,QAAX,GAAsB,KAAKmE,wBAAL,EAAtB,GAAwD,EAF5D;AAII9C,uBAAe,EAAf,IAAqB,CAAC,8CAAyB,KAAKvB,KAAL,CAAWH,aAApC,CAAtB,GACIF,QAAQ2E,yBAAR,CAAkC1E,QAAlC,EAA4C,KAAKI,KAAL,CAAWH,aAAvD,CADJ,GAEI,EANR;AASI,qDAAwB,KAAKG,KAAL,CAAWH,aAAnC,EAAkD,WAAlD,IACI,KAAK8E,2BAAL,EADJ,GAEI;AAXR,OADF;AAgBD;;AAED;;;;;;;;;4CAMwB3D,I,EAAMO,U,EAAY;AAAA;;AACxC,aACE;AACE,aAAKP,IADP;AAEE,YAAIA,IAFN;AAGE,oBAAY,KAAKf,KAAL,CAAWI,KAHzB;AAIE,cAAMhB,eAAe2B,IAAf,CAJR;AAKE,kBAAU,KAAKhB,KAAL,CAAWgD,QALvB;AAME,gCAAwB,gCAACjC,KAAD,EAAW;AACjC,iBAAKT,sBAAL,CAA4BS,KAA5B,EAAmCC,IAAnC;AACD,SARH;AASE,kBAAU,kBAACD,KAAD,EAAW;AACnB,iBAAKT,sBAAL,CAA4BS,KAA5B,EAAmCC,IAAnC;AACD,SAXH;AAYE,+BAAuB,+BAAC4D,MAAD,EAAY;AACjC,iBAAKpE,iCAAL,CAAuCoE,MAAvC,EAA+C5D,IAA/C;AACD,SAdH;AAeE,oBAAYO,UAfd;AAgBE,eAAOA,UAhBT;AAiBE,gBAAQ,KAAKvB,KAAL,CAAW6E;AAjBrB,QADF;AAqBD;;AAED;;;;;;;6CAIyB;AACvB,aAAQ,KAAK5E,KAAL,CAAWG,OAAX,GACJ;AAAA;AAAA,UAAK,WAAU,YAAf;AACA;AAAA;AAAA;AACE,uEAAkB,IAAG,mCAArB,EAAyD,gBAAe,SAAxE;AADF;AADA,OADI,GAMJ,EANJ;AAQD;;AAED;;;;;;;kDAI8B;AAAA;;AAC5B,UAAM0E,eAAe,sDAAiC,KAAK9E,KAAL,CAAWH,aAA5C,EAA2D,WAA3D,EAAwE,SAAxE,CAArB;AACA,UAAMH,oBAAYH,QAAQ,SAAR,CAAZ,CAAN;AACA,aAAQ;AAAA;AAAA,UAAK,WAAU,kBAAf;AACN;AAAA;AAAA,YAAK,WAAU,aAAf;AACE,8EACMG,IADN;AAEE,kBAAM,eAFR;AAGE,gBAAI,eAHN;AAIE,4BAAa,MAJf;AAKE,sBAAU;AAAA,qBAAS,OAAKiB,mBAAL,CAAyBI,KAAzB,CAAT;AAAA,aALZ;AAME,mBAAQ,OAAO+D,YAAP,KAAwB,WAAxB,GAAsCA,YAAtC,GAAqD;AAN/D,aADF;AASE;AAAA;AAAA,cAAO,SAAQ,eAAf,EAA+B,WAAU,eAAzC;AACE,yEAAkB,IAAG,qCAArB,EAA2D,gBAAe,SAA1E;AADF;AATF,SADM;AAeF,SAAC,8CAAyB,KAAK9E,KAAL,CAAWH,aAApC,EAAmD,oBAAnD,CAAD,GACIF,QAAQ2E,yBAAR,CAAkC,wBAAlC,EAA4D,KAAKtE,KAAL,CAAWH,aAAvE,CADJ,GAEI,EAjBF;AAmBJ;AACE,gBAAK;AACL;AAFF,YAGE,SAAS,sDAAiC,KAAKG,KAAL,CAAWH,aAA5C,EAA2D,WAA3D,EAAwE,SAAxE,CAHX;AAIE,gBAAK,iBAJP;AAKE,cAAG;AACH;AANF,YAOE,SAAS;AAAA,mBAAM,OAAKa,0BAAL,EAAN;AAAA;AAPX,UAnBI;AA4BJ;AAAA;AAAA,YAAO,SAAQ,iBAAf,EAAiC,UAAU;AAAA,qBAAM,OAAKA,0BAAL,EAAN;AAAA,aAA3C;AACE,uEAAkB,IAAG,0CAArB,EAAgE,gBAAe,0CAA/E;AADF,SA5BI;AA+BJ;AAAA;AAAA,YAAG,WAAU,eAAb;AACE,uEAAkB,IAAG,oCAArB,EAA0D,gBAAe,YAAzE;AADF;AA/BI,OAAR;AAoCD;;;6BAEQ;AAAA;;AAAA,mBAC0D,KAAKV,KAD/D;AAAA,UACCiC,EADD,UACCA,EADD;AAAA,UACK8C,iBADL,UACKA,iBADL;AAAA,UACwBrB,YADxB,UACwBA,YADxB;AAAA,UACsCsB,MADtC,UACsCA,MADtC;AAAA,UAC8CC,OAD9C,UAC8CA,OAD9C;AAAA,UAEC9E,UAFD,GAEgB,KAAKF,KAFrB,CAECE,UAFD;;;AAIP,aACE;AAAA;AAAA,UAAK,WAAU,cAAf,EAA8B,KAAK8B,EAAnC;AAEE;AAAA;AAAA,YAAK,WAAU,2BAAf;AACE,iDAAK,KAAK8C,iBAAV,EAA6B,KAAI,gBAAjC;AADF,SAFF;AAKE;AAAA;AAAA,YAAK,WAAU,KAAf;AACE;AAAA;AAAA,cAAM,WAAU,WAAhB;AACE;AAAA;AAAA;AACE;AAAA;AAAA,kBAAK,WAAU,oBAAf;AACE;AAAA;AAAA,oBAAK,WAAU,gBAAf;AACE,+EAAkB,IAAG,mCAArB,EAAyD,gBAAe,eAAxE,GADF;AAEE,6EAAiB,SAASE,OAA1B,EAAmC,OAAO,KAAKjF,KAAL,CAAWuC,SAAX,CAAqBxC,GAArB,CAAyB,YAAzB,CAA1C;AAFF,iBADF;AAKGiF,uBAAOjF,GAAP,CAAW,YAAX,EAAyBA,GAAzB,CAA6B,YAA7B,EAA2C,KAA3C,MAAsD,IAAtD,GACC;AACE,sBAAI,CAACI,UADP;AAEE,2BAAS,mBAAM;AACb,2BAAK+E,kBAAL,CAAwB/E,UAAxB;AACD;AAJH,kBADD,GAOG;AAZN;AADF,aADF;AAmBE;AAAA;AAAA;AACE;AAAA;AAAA,kBAAK,WAAU,qCAAf;AACI,qBAAKgF,sBAAL,EADJ;AAGG,qBAAKlF,KAAL,CAAWC,QAAX,GACG;AAAA;AAAA,oBAAK,WAAU,aAAf;AACE,uBAAKkF,2BAAL,CAAiC1B,YAAjC;AADF,iBADH,GAIG;AAPN;AADF;AAnBF;AADF;AALF,OADF;AA0CD;;;;EAjemB,gBAAM2B,S;;AAoe5B1F,QAAQ2F,SAAR,GAAoB;AAClBrD,MAAI,qBAAUsD,MAAV,CAAiBC,UADH,EACe;AACjCT,qBAAmB,qBAAUQ,MAAV,CAAiBC,UAFlB,EAE8B;AAChD9B,gBAAc,qBAAU+B,MAAV,CAAiBD,UAHb,EAGyB;AAC3CxC,YAAU,qBAAUyC,MAAV,CAAiBD,UAJT;AAKlBX,UAAQ,qBAAUY,MAAV,CAAiBD,UALP,EAKmB;AACrCjD,aAAW,qBAAUkD,MAAV,CAAiBD,UANV;AAOlBR,UAAQ,qBAAUS,MAAV,CAAiBD,UAPP;AAQlBP,WAAS,qBAAUQ,MAAV,CAAiBD,UARR,EAQoB;AACtC/B,eAAa,qBAAUgC,MAAV,CAAiBD,UATZ,EASwB;AAC1C3F,iBAAe,qBAAU4F,MAAV,CAAiBD,UAVd,EAU0B;AAC5C1E,iBAAe,qBAAU4E,IAAV,CAAeF,UAXZ,EAWwB;AAC1CrD,sBAAoB,qBAAUuD,IAAV,CAAeF,UAZjB,EAY6B;AAC/C3D,yBAAuB,qBAAU6D,IAAV,CAAeF,UAbpB,EAagC;AAClDrB,+BAA6B,qBAAUuB,IAAV,CAAeF,UAd1B,EAcsC;AACxD;AACA/D,mBAAiB,qBAAUiE,IAAV,CAAeF,UAhBd;AAiBlBG,oBAAkB,qBAAUD,IAAV,CAAeF,UAjBf,EAiB2B;AAC7CrF,cAAY,qBAAUyF,IAAV,CAAeJ,UAlBT,EAkBqB;AACvCzD,QAAM,qBAAUyD,UAnBE,EAmBU;AAC5BlE,qCAAmC,qBAAUoE,IAAV,CAAeF,UApBhC,CAoB4C;AApB5C,CAApB;;kBAuBe,2BAAW7F,OAAX,C","file":"KeyCard.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Map } from 'immutable';\nimport MaskedInput from 'react-text-mask';\nimport Switch from 'react-toggle-switch';\nimport 'react-toggle-switch/dist/css/switch.min.css';\nimport PopoverQuestion from '../PopoverQuestion/PopoverQuestion';\nimport PopoverLink from '../PopoverLink/PopoverLink';\nimport CardNumberField from '../CardNumberField/CardNumberField';\nimport * as tabKeycardType from '../../constants/keycardsType';\nimport * as MaskHelper from '../../helpers/MaskHelper';\nimport {\n  isCurrentCardNumberType,\n  getCurrentCardNumberValue,\n  isCurrentCardNumberValid,\n  getCardNumberTypes,\n  getCardNumberTypeElementProperty,\n  canCheckSwissPass,\n  isSwissPassPropertyValid,\n} from '../../helpers/CardTypeHelper';\nimport { cardNumberFormatIsValid } from '../../helpers/CardNumberHelper';\nimport store from '../../redux/stores/store';\n\nconst configs = {\n  ZIPCODE: {\n    placeholder: '0000',\n    mask: [\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/,\n    ],\n  },\n};\n\n/**\n * Keycard\n */\nclass KeyCard extends React.Component {\n  /**\n   * Display Error Message\n   * @param errorKey\n   * @param localItemInfo\n   * @returns {*}\n   */\n  static renderedErrorInputMessage(errorKey, localItemInfo) {\n    const error = localItemInfo.get('errors', new Map()).get(errorKey, '');\n    return <p className=\"errorInputKeyCard\">{error}</p>;\n  }\n\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkYes: !props.hasSupport,\n      checkNo: props.hasSupport,\n      hasSupport: props.hasSupport,\n      valid: true,\n    };\n    this.handleChangeCardNumber = this.handleChangeCardNumber.bind(this);\n    this.handleChangeAutoSuggestCardNumber = this.handleChangeAutoSuggestCardNumber.bind(this);\n    this.changeValidationCard = this.changeValidationCard.bind(this);\n    this.handleChangeCheckSwisspass = this.handleChangeCheckSwisspass.bind(this);\n    this.handleChangeZipcode = this.handleChangeZipcode.bind(this);\n  }\n\n  /**\n   * Change local state when click support change value\n   * @param checked\n   */\n  handleChangeToggle(checked) {\n    this.setState({\n      checkYes: checked,\n      checkNo: !checked,\n      hasSupport: !checked,\n    });\n    this.props.onChangeCheck(checked ? 'yes' : 'no');\n  }\n\n  /**\n   * Change card number\n   *\n   * @param event\n   * @param type\n   */\n  handleChangeCardNumber(event, type) {\n    this.handleChangeAutoSuggestCardNumber(event.target.value, type, false);\n  }\n\n  /**\n   * handle Change Check Swisspass\n   */\n  handleChangeCheckSwisspass() {\n    const type = 'swisspass';\n    const property = 'checked';\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const newValue = !getCardNumberTypeElementProperty(this.props.localItemInfo, type, property);\n\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, property, newValue);\n\n    if (isSwissPassPropertyValid(this.props.localItemInfo, 'formatValid')\n      && isSwissPassPropertyValid(this.props.localItemInfo, 'zipcodeFormatValid')\n      && newValue) {\n      const cardNumber = getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'number');\n      const zipCode = getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'zipcode');\n      this.props.validateKeycard(currentId, cardNumber, zipCode);\n    }\n  }\n\n  /**\n   * handle Change Zipcode\n   * @param event\n   */\n  handleChangeZipcode(event) {\n    const type = 'swisspass';\n    const zipCode = event.target.value;\n    const errorKey = 'data.swisspass.zipcode';\n\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, 'zipcode', zipCode);\n\n    const pattern = /^[0-9]{4}$/;\n    const isValid = pattern.test(zipCode);\n    this.props.stateUpdateCardNumberTypeProperty(currentId, type, 'zipcodeFormatValid', isValid);\n\n    // Delete errors\n    this.props.deleteKeyFieldsErrors(currentId, errorKey);\n\n    if (!isValid) {\n      const { formatMessage } = this.props.intl;\n      const errorLabel = formatMessage({ id: 'rp.checkout.customize.swisspass.zipcode.invalid', defaultMessage: 'invalid' });\n      this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n    } else if (isSwissPassPropertyValid(this.props.localItemInfo, 'formatValid')\n        && isSwissPassPropertyValid(this.props.localItemInfo, 'checked')) {\n      const cardNumber = getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'number');\n      this.props.validateKeycard(currentId, cardNumber, zipCode);\n    }\n  }\n\n  /**\n   *\n   * @param cardnumber\n   * @param type\n   * @param suggest\n   */\n  handleChangeAutoSuggestCardNumber(cardnumber, type, suggest = true) {\n    let newValue = '';\n    const { formatMessage } = this.props.intl;\n    const errorKey = 'data.cardNumber';\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'invalid' });\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    const skierIndex = this.props.orderitem.get('skierIndex');\n\n    let validKeycard = getCardNumberTypeElementProperty(this.props.localItemInfo, type, 'formatValid');\n\n    if (cardnumber !== undefined && typeof cardnumber !== 'undefined') {\n      // Remove spaces on card number\n      cardnumber = cardnumber.replace(new RegExp(/( )|(_)/g), '');\n\n      // Update others card types values\n      getCardNumberTypes(this.props.localItemInfo).forEach((item, key) => {\n        if (![type, 'swisspass'].includes(key)) {\n          if (suggest) {\n            this.props.keycards.forEach((element) => {\n              if (element.get('shortnumber') === cardnumber || element.get('cardnumber') === cardnumber) {\n                newValue = type === 'sd' ? element.get('shortnumber') : element.get('cardnumber');\n              }\n            });\n          }\n          this.props.stateUpdateCardNumberTypeProperty(skierIndex, key, 'number', newValue);\n        }\n      });\n\n      // Delete errors\n      this.props.deleteKeyFieldsErrors(currentId, errorKey);\n\n      const cardType = tabKeycardType[type];\n      const isSwissPass = isCurrentCardNumberType(this.props.localItemInfo, 'swisspass');\n\n      // verification keycard number is correct\n      if (cardnumber !== '' || cardnumber !== undefined) {\n        validKeycard = MaskHelper.verifyKeycard(cardnumber, cardType);\n\n        this.props.stateUpdateCardNumberTypeProperty(skierIndex, type, 'formatValid', validKeycard);\n        this.changeValidationCard(validKeycard);\n\n        // Keycard mask is valid\n        if (validKeycard) {\n          // If no swisspass, we can validate keycard\n          const state = store.getState();\n          console.log('state', state);\n\n          const formatIsValid = cardNumberFormatIsValid(this.props.localItemInfo);\n          console.log('formatIsValid', formatIsValid);\n\n          if (!isSwissPass) {\n            this.props.validateKeycard(currentId, cardnumber);\n          } else if (isSwissPassPropertyValid(this.props.localItemInfo, 'zipcodeFormatValid')\n              && isSwissPassPropertyValid(this.props.localItemInfo, 'checked')) {\n            const zipCode = getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'zipcode');\n            this.props.validateKeycard(currentId, cardnumber, zipCode);\n          }\n        } else {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n      } else {\n        this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n      }\n\n      // Save cardNumber value\n      this.props.stateUpdateCardNumberTypeProperty(skierIndex, type, 'number', cardnumber);\n    }\n  }\n\n  /**\n   *\n   * @param value\n   */\n  changeValidationCard(value) {\n    this.setState({ valid: value });\n  }\n\n  /**\n   * Content for popover link\n   * @returns {*}\n   */\n  renderedLabelLinkPopover() {\n    return this.props.popoverLink.get('labelKeycardInfo') !== null\n      ? <PopoverLink popoverLink={this.props.popoverLink} index={this.props.orderitem.get('skierIndex')} />\n      : '';\n  }\n\n  /**\n   * Render keycard types content (choice or not)\n   *\n   * @param keycardTypes\n   * @returns {XML}\n   */\n  renderedKeyCardTypesContent(keycardTypes) {\n    return (keycardTypes.size > 1\n      ? ( // Display Double Mask KeyCard\n        <div>\n          <ul className=\"nav nav-tabs nav-justified responsive-tabs\" role=\"tablist\">\n            { keycardTypes.map((data, type) => (\n              this.renderedLabelTab(tabKeycardType[type], type)\n            )) }\n          </ul>\n          <div className=\"tab-content\">\n            {\n              keycardTypes.map((data, type) => (\n                this.renderedSomeInputKeyCards(type)\n              ))\n            }\n          </div>\n        </div>\n      )\n      :\n      (\n        // Display one Input for keyCard : get the first cardNumber type (first key of map)\n        this.renderedInputOneKeyCard(keycardTypes.keySeq().first())\n      )\n    );\n  }\n\n  /**\n   * Display of the simple input mask\n   *\n   * @param type\n   * @returns {*}\n   */\n  renderedInputOneKeyCard(type) {\n    let validKeycard = false;\n    const errorKey = 'data.cardNumber';\n    const { formatMessage } = this.props.intl;\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'empty' });\n    const currentId = this.props.localItemInfo.get('skierIndex');\n    let cardNumber = getCurrentCardNumberValue(this.props.localItemInfo);\n\n    if (cardNumber === null || typeof cardNumber === 'undefined') {\n      cardNumber = '';\n    }\n\n    // Change current cardNumber type\n    this.props.updateCurrentCardNumberType(currentId, type);\n    /*\n        if (cardNumber !== '') {\n          validKeycard = MaskHelper.verifyKeycard(cardNumber, index, tabKeycardType[type]);\n          if (validKeycard) {\n            this.props.validateKeycard(currentId, cardNumber);\n            this.props.deleteKeyFieldsErrors(currentId, errorKey);\n          }\n        } else {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n    */\n    return (\n      <div key={type}>\n        { this.renderedCardNumberField(type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        {\n          cardNumber === '' || !isCurrentCardNumberValid(this.props.localItemInfo)\n            ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo)\n            : '' }\n      </div>\n    );\n  }\n\n  /**\n   * Display labels for inputs - select active input\n   * @returns {XML}\n   * @param textType\n   * @param type\n   */\n  renderedLabelTab(textType, type) {\n    let className = 'nav-item';\n    if (isCurrentCardNumberType(this.props.localItemInfo, type)) {\n      className = `${className} active`;\n    }\n\n    return (\n      <li className={className} key={type}>\n        <a\n          className=\"nav-link text-center\"\n          data-toggle=\"tab\"\n          role=\"tab\"\n          href={`type${type}`}\n          onClick={() => {\n            // Change current cardNumber type\n            this.props.updateCurrentCardNumberType(this.props.localItemInfo.get('skierIndex'), type);\n          }}\n        >{textType}</a>\n      </li>\n    );\n  }\n\n  /**\n   * Display of the double input mask\n   *\n   * @param type\n   * @returns {XML}\n   */\n  renderedSomeInputKeyCards(type) {\n    let className = 'tab-pane fade in';\n    const aux = `tabKeycardType[type]${type}`;\n    const errorKey = 'data.cardNumber';\n    let cardNumber = getCurrentCardNumberValue(this.props.localItemInfo);\n\n    if (cardNumber === null || typeof cardNumber === 'undefined') {\n      cardNumber = '';\n    }\n\n    // Remove spaces on card number\n    cardNumber = cardNumber.replace(new RegExp(/( )|(_)/g), '');\n\n    const isCurrentType = isCurrentCardNumberType(this.props.localItemInfo, type);\n\n    // active tab on select\n    if (isCurrentType) {\n      className = `${className} active`;\n    }\n\n    return (\n      <div className={className} id={aux} role=\"tabpanel\" key={type}>\n        { this.renderedCardNumberField(type, cardNumber) }\n        { this.state.checkYes ? this.renderedLabelLinkPopover() : '' }\n        {\n          cardNumber === '' || !isCurrentCardNumberValid(this.props.localItemInfo)\n            ? KeyCard.renderedErrorInputMessage(errorKey, this.props.localItemInfo)\n            : ''\n        }\n        {\n          isCurrentCardNumberType(this.props.localItemInfo, 'swisspass')\n            ? this.renderedContentForSwisspass()\n            : null\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Render a cardNumber field\n   *\n   * @param type\n   * @param cardNumber\n   */\n  renderedCardNumberField(type, cardNumber) {\n    return (\n      <CardNumberField\n        key={type}\n        id={type}\n        validInput={this.state.valid}\n        mode={tabKeycardType[type]}\n        keycards={this.props.keycards}\n        handleChangeCardNumber={(event) => {\n          this.handleChangeCardNumber(event, type);\n        }}\n        onChange={(event) => {\n          this.handleChangeCardNumber(event, type);\n        }}\n        onAutoSuggestSelected={(number) => {\n          this.handleChangeAutoSuggestCardNumber(number, type);\n        }}\n        cardNumber={cardNumber}\n        value={cardNumber}\n        params={this.props.params}\n      />\n    );\n  }\n\n  /**\n   * Display content checked no\n   * @returns {*}\n   */\n  renderedContentCheckNo() {\n    return (this.state.checkNo\n      ? <div className=\"msgCheckNo\">\n        <p>\n          <FormattedMessage id=\"rp.checkout.ordercustom.nokeycard\" defaultMessage=\"no card\" />\n        </p>\n      </div>\n      : ''\n    );\n  }\n\n  /**\n   *\n   * @returns {null}\n   */\n  renderedContentForSwisspass() {\n    const zipcodeValue = getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'zipcode');\n    const mask = { ...configs['ZIPCODE']};\n    return (<div className=\"contentSwisspass\">\n      <div className=\"wrapperForm\">\n        <MaskedInput\n          {...mask}\n          name= \"zipcode-swiss\"\n          id= \"zipcode-swiss\"\n          data-control=\"true\"\n          onChange={event => this.handleChangeZipcode(event)}\n          value={ typeof zipcodeValue !== \"undefined\" ? zipcodeValue : '' }\n        />\n        <label htmlFor=\"zipcode-swiss\" className=\"control-label\">\n          <FormattedMessage id=\"rp.checkout.shippingaddress.zipcode\" defaultMessage=\"Zipcode\" />\n        </label>\n      </div>\n        {\n          !isSwissPassPropertyValid(this.props.localItemInfo, 'zipcodeFormatValid')\n            ? KeyCard.renderedErrorInputMessage('data.swisspass.zipcode', this.props.localItemInfo)\n            : ''\n        }\n        <input\n          type=\"checkbox\"\n          // value={CardTypeHelper.getSwissPassProperty(this.props.localItemInfo, 'checked') === true ? '1' : '0'}\n          checked={getCardNumberTypeElementProperty(this.props.localItemInfo, 'swisspass', 'checked')}\n          name=\"check-swisspass\"\n          id=\"check-swisspass\"\n          // onChange={() => this.handleChangeCheckSwisspass()}\n          onClick={() => this.handleChangeCheckSwisspass()}\n        />\n        <label htmlFor=\"check-swisspass\" onChange={() => this.handleChangeCheckSwisspass()}>\n          <FormattedMessage id=\"rp.checkout.keycard.swisspass.check.text\" defaultMessage=\"I agree with the conditions of SwissPass\" />\n        </label>\n        <a className=\"btn-swisspass\">\n          <FormattedMessage id=\"rp.checkout.keycard.swisspass.link\" defaultMessage=\"Disclaimer\" />\n        </a>\n      </div>\n    );\n  }\n\n  render() {\n    const { id, keycardPictureSrc, keycardTypes, fields, popover } = this.props;\n    const { hasSupport } = this.state;\n\n    return (\n      <div className=\"blockPopover\" key={id}>\n\n        <div className=\"col-xs-4 keyCardAreaImage\">\n          <img src={keycardPictureSrc} alt=\"keycardPicture\" />\n        </div>\n        <div className=\"row\">\n          <form className=\"col-xs-12\">\n            <div>\n              <div className=\"keycard_area_title\">\n                <div className=\"keycardMessage\">\n                  <FormattedMessage id=\"rp.checkout.keycard.area.question\" defaultMessage=\"I have a card\" />\n                  <PopoverQuestion popover={popover} index={this.props.orderitem.get('skierIndex')} />\n                </div>\n                {fields.get('cardNumber').get('hasSupport', false) === true ?\n                  <Switch\n                    on={!hasSupport}\n                    onClick={() => {\n                      this.handleChangeToggle(hasSupport);\n                    }}\n                  />\n                  : ''\n                }\n              </div>\n            </div>\n\n            <div>\n              <div className=\"col-xs-8 form-group keyCardAreaForm\">\n                { this.renderedContentCheckNo() }\n\n                {this.state.checkYes\n                  ? <div className=\"msgCheckYes\">\n                    { this.renderedKeyCardTypesContent(keycardTypes) }\n                  </div>\n                  : ''}\n              </div>\n            </div>\n          </form>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nKeyCard.propTypes = {\n  id: PropTypes.string.isRequired, // index\n  keycardPictureSrc: PropTypes.string.isRequired, // keycard picture src\n  keycardTypes: PropTypes.object.isRequired, // keycards to display the tabs\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired, // generic params\n  orderitem: PropTypes.object.isRequired,\n  fields: PropTypes.object.isRequired,\n  popover: PropTypes.object.isRequired, // content for popover info keycard\n  popoverLink: PropTypes.object.isRequired, // content for popover link keycard\n  localItemInfo: PropTypes.object.isRequired, // current local Item\n  onChangeCheck: PropTypes.func.isRequired, // function to make changes when checking\n  updateFieldsErrors: PropTypes.func.isRequired, // function to update fields errors\n  deleteKeyFieldsErrors: PropTypes.func.isRequired, // function to delete key on fields errors\n  updateCurrentCardNumberType: PropTypes.func.isRequired, // function to update current cardNumber type\n  // validateKeycard: function call api for verification of keycard number\n  validateKeycard: PropTypes.func.isRequired,\n  updateValidField: PropTypes.func.isRequired, //\n  hasSupport: PropTypes.bool.isRequired, // boolean to know if support exists\n  intl: intlShape.isRequired, // for the internationalization\n  stateUpdateCardNumberTypeProperty: PropTypes.func.isRequired, // function to update cardNumber property value\n};\n\nexport default injectIntl(KeyCard);\n"]}