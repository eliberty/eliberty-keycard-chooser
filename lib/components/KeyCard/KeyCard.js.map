{"version":3,"sources":["../../../src/components/KeyCard/KeyCard.jsx"],"names":["KeyCard","props","state","checkYes","hasSupport","checkNo","setState","onChangeCheck","popoverLink","get","keycardTypes","size","keycards","params","localItemInfo","updateKeycardsMask","deleteKeyFieldsErrors","updateFieldsErrors","orderitem","changeCardNumber","map","card","index","itemFieldsDefinition","popover","checkSupportYes","checkSupportNo","handleClickCheckYes","handleClickCheckNo","renderedContentCheckNo","renderedListKeyCard","renderedLabelLinkPopover","Component","propTypes","object","isRequired","func","bool","intl"],"mappings":"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","file":"KeyCard.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport PopoverQuestion from '../PopoverQuestion/PopoverQuestion';\nimport PopoverLink from '../PopoverLink/PopoverLink';\nimport OneMask from '../OneMask/OneMask';\nimport DoubleMask from '../DoubleMask/DoubleMask';\n// import './keyCard.scss';\n\n/**\n * Keycard\n */\nclass KeyCard extends React.Component {\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkYes: !props.hasSupport,\n      checkNo: props.hasSupport,\n      hasSupport: props.hasSupport,\n    };\n  }\n\n  /**\n   * Change local state when click on yes\n   */\n  handleClickCheckYes() {\n    this.setState({\n      checkYes: true,\n      checkNo: false,\n      hasSupport: false,\n    });\n    this.props.onChangeCheck('yes');\n  }\n\n  /**\n   * Change local state when click on no\n   */\n  handleClickCheckNo() {\n    this.setState({\n      checkYes: false,\n      checkNo: true,\n      hasSupport: true,\n    });\n    this.props.onChangeCheck('no');\n  }\n\n  /**\n   * Content for popover link\n   * @returns {*}\n   */\n  renderedLabelLinkPopover() {\n    return this.props.popoverLink.get('labelKeycardInfo') !== null\n      ? <PopoverLink popoverLink={this.props.popoverLink} />\n      : '';\n  }\n\n  /**\n   *\n   * @param keycardTypes\n   * @param keycards\n   * @param params\n   * @returns {XML}\n   */\n  renderedListKeyCard(keycardTypes) {\n    return (keycardTypes.size > 1\n        ? (\n          <DoubleMask\n            keycards={this.props.keycards}\n            keycardTypes={keycardTypes}\n            params={this.props.params}\n            localItemInfo={this.props.localItemInfo}\n            updateKeycardsMask={this.props.updateKeycardsMask}\n            deleteKeyFieldsErrors={this.props.deleteKeyFieldsErrors}\n            updateFieldsErrors={this.props.updateFieldsErrors}\n            orderitem={this.props.orderitem}\n            changeCardNumber={this.props.changeCardNumber}\n          />\n        ) :\n        keycardTypes.map((card, index) => (\n          <OneMask\n            card={card}\n            index={index}\n            keycards={this.props.keycards}\n            params={this.props.params}\n            localItemInfo={this.props.localItemInfo}\n            updateKeycardsMask={this.props.updateKeycardsMask}\n            deleteKeyFieldsErrors={this.props.deleteKeyFieldsErrors}\n            updateFieldsErrors={this.props.updateFieldsErrors}\n            orderitem={this.props.orderitem}\n            changeCardNumber={this.props.changeCardNumber}\n          />\n        ))\n    );\n  }\n\n  /**\n   * Display content checked no\n   * @returns {*}\n   */\n  renderedContentCheckNo() {\n    return (this.state.checkNo\n        ? <div className=\"msgCheckNo\">\n          <p>\n            <FormattedMessage id=\"rp.checkout.ordercustom.nokeycard\" defaultMessage=\"no card\" />\n          </p>\n        </div>\n        : ''\n    );\n  }\n\n\n  render() {\n    const { keycardTypes, itemFieldsDefinition, popover } = this.props;\n    const { hasSupport } = this.state;\n\n    let checkSupportYes = '';\n    let checkSupportNo = '';\n    if (hasSupport) {\n      checkSupportNo = 'checked';\n    } else {\n      checkSupportYes = 'checked';\n    }\n\n    return (\n      <div>\n        <div className=\"blockPopover\">\n          <p><FormattedMessage id=\"rp.checkout.keycard.area.question\" defaultMessage=\"I have a card\" /></p>\n\n          <PopoverQuestion popover={popover} />\n\n          <form>\n            <div className=\"form-group keyCardAreaForm\">\n              {itemFieldsDefinition.get('keycard').get('forceReloading') === false ?\n                <div>\n                  <input type=\"radio\" id={`inputCheckYes${this.props.orderitem.get('id')}`} name=\"card\" checked={checkSupportYes} value=\"yes\" onChange={() => { this.handleClickCheckYes(); }} />\n                  <label htmlFor={`inputCheckYes${this.props.orderitem.get('id')}`} className=\"keycardChoice\"><FormattedMessage id=\"rp.checkout.keycard.area.reponse.yes\" defaultMessage=\"yes\" /></label>\n                  <input type=\"radio\" id={`inputCheckNo${this.props.orderitem.get('id')}`} name=\"card\" value=\"non\" checked={checkSupportNo} onChange={() => { this.handleClickCheckNo(); }} />\n                  <label htmlFor={`inputCheckNo${this.props.orderitem.get('id')}`} className=\"keycardChoice\"><FormattedMessage id=\"rp.checkout.keycard.area.reponse.no\" defaultMessage=\"no\" /></label>\n                </div>\n                : ''\n              }\n\n              { this.renderedContentCheckNo() }\n\n              {this.state.checkYes\n                ? <div className=\"msgCheckYes\">\n                  { this.renderedListKeyCard(keycardTypes) }\n                  { this.renderedLabelLinkPopover() }\n                </div>\n                : ''}\n\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nKeyCard.propTypes = {\n  keycardTypes: PropTypes.object.isRequired, // keycards to display the tabs\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired, // generic params\n  orderitem: PropTypes.object.isRequired,\n  itemFieldsDefinition: PropTypes.object.isRequired,\n  popover: PropTypes.object.isRequired, // content for popover info keycard\n  popoverLink: PropTypes.object.isRequired, // content for popover link keycard\n  localItemInfo: PropTypes.object.isRequired, // current local Item\n  changeCardNumber: PropTypes.func.isRequired, // function to change cardnumber of item\n  onChangeCheck: PropTypes.func.isRequired, // function to make changes when checking\n  updateFieldsErrors: PropTypes.func.isRequired, // function to update fields errors\n  deleteKeyFieldsErrors: PropTypes.func.isRequired, // function to delete key on fields errors\n  updateKeycardsMask: PropTypes.func.isRequired, // function to update elements on a keycardsMask\n  hasSupport: PropTypes.bool.isRequired, // boolean to know if support exists\n  intl: intlShape.isRequired, // for the internationalization\n};\n\nexport default injectIntl(KeyCard);\n"]}