{"version":3,"sources":["../../src/components/CardNumberField.jsx"],"names":["configs","SKIDATA","placeholder","mask","pipe","value","slice","indexesOfPipedChars","TEAMAXESS","ALFI","SWISSPASS","VERBIER","CardNumberField","props","onSuggestionsFetchRequested","bind","onSuggestionsClearRequested","onSuggestionSelected","state","suggestions","cardType","listKeycards","AutoSuggestionHelper","getSuggestions","keycards","toJS","params","mode","tabKeycardType","forEach","keycard","setState","event","suggestion","cardnumber","shortnumber","onAutoSuggestSelected","inputProps","get","getSuggestionValue","renderSuggestion","renderInputComponent","handleChangeCardNumber","cardNumber","validInput","id","className","onChange","renderedCardNumberField","React","Component","propTypes","PropTypes","string","isRequired","func","object","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport Autosuggest from 'react-autosuggest';\nimport * as AutoSuggestionHelper from '../helpers/AutoSuggest/MaskedInputAutoSuggestHelper';\nimport * as tabKeycardType from '../constants/keycardsType';\n\nconst configs = {\n  SKIDATA: {\n    placeholder: '00-0000 0000 0000 0000 0000-0',\n    mask: [\n      /[0-3]/, /\\d/, '-',\n      /\\d/, /\\d/, /\\d/, /\\d/, ' ',\n      /\\d/, /\\d/, /\\d/, /\\d/, ' ',\n      /\\d/, /\\d/, /\\d/, /\\d/, ' ',\n      /\\d/, /\\d/, /\\d/, /\\d/, ' ',\n      /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/,\n    ],\n    pipe: (value => (value[0] === '1' ? { value: `01${value.slice(2)}`, indexesOfPipedChars: [0] } : value)),\n  },\n  TEAMAXESS: {\n    placeholder: 'XXXXXXXX-XXX-XXX',\n    mask: [\n      /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[a-zA-Z0-9]/,\n      /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[Aa-zA-Z0-9]/, '-',\n      /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, '-',\n      /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[a-zA-Z0-9]/,\n    ],\n  },\n  ALFI: {\n    placeholder: '_____-_____-____',\n    mask: [\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-',\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-',\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/,\n    ],\n  },\n  'GO-SKI': {\n    placeholder: '000000000-0',\n    mask: [\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-',\n      /[0-9]/,\n    ],\n  },\n  SWISSPASS: {\n    placeholder: 'S00-000-000-000',\n    mask: [\n      /[S|s]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, /[0-9]/, '-',\n      /[0-9]/, /[0-9]/, /[0-9]/,\n    ],\n  },\n  VERBIER: {\n    placeholder: 'A000000',\n    mask: [\n      /[A|B]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/,\n    ],\n  },\n};\n\n/**\n * Card Number Field\n */\nclass CardNumberField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSuggestionsFetchRequested = this.onSuggestionsFetchRequested.bind(this);\n    this.onSuggestionsClearRequested = this.onSuggestionsClearRequested.bind(this);\n    this.onSuggestionSelected = this.onSuggestionSelected.bind(this);\n\n    this.state = {\n      suggestions: [],\n    };\n  }\n\n  /**\n   *\n   * @param value\n   */\n  onSuggestionsFetchRequested({ value }) {\n    const cardType = 'open';\n    const listKeycards = AutoSuggestionHelper.getSuggestions(\n      value,\n      this.props.keycards.toJS(),\n      this.props.params,\n      this.props.mode === tabKeycardType[cardType], // Define if we are on shortnumber using mode\n    );\n    // Add element type card for display suggestions\n    listKeycards.forEach((keycard) => {\n      keycard.mode = this.props.mode;\n    });\n\n    this.setState({\n      suggestions: listKeycards,\n    });\n  }\n\n  onSuggestionsClearRequested() {\n    this.setState({\n      suggestions: [],\n    });\n  }\n\n  /**\n   *\n   * @param event\n   * @param suggestion\n   */\n  onSuggestionSelected(event, { suggestion }) {\n    const cardType = 'open';\n    const cardnumber = suggestion.mode === tabKeycardType[cardType]\n      ? suggestion.shortnumber\n      : suggestion.cardnumber;\n    this.props.onAutoSuggestSelected(cardnumber);\n  }\n\n  /**\n   *\n   * @param mode\n   * @param params\n   * @param suggestions\n   * @param inputProps\n   * @returns {XML}\n   */\n  renderedCardNumberField(mode, params, suggestions, inputProps) {\n    return (mode !== 'OPEN' && params.get('displayKeycardAutoComplete', false) === true\n      ? (\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          onSuggestionSelected={this.onSuggestionSelected}\n          shouldRenderSuggestions={() => true}\n          getSuggestionValue={AutoSuggestionHelper.getSuggestionValue}\n          renderSuggestion={AutoSuggestionHelper.renderSuggestion}\n          inputProps={inputProps}\n          renderInputComponent={AutoSuggestionHelper.renderInputComponent}\n          focusInputOnSuggestionClick={false}\n        />)\n      : <MaskedInput {...inputProps} />\n    );\n  }\n\n  render() {\n    const { suggestions } = this.state;\n    const { mode, handleChangeCardNumber, cardNumber, params, validInput } = this.props;\n\n    const inputProps = {\n      ...configs[mode],\n      id: cardNumber,\n      className: validInput === true ? 'form-control text-left' : 'form-control text-left inputError',\n      onChange: handleChangeCardNumber,\n      value: cardNumber,\n    };\n\n    return (\n      <div>\n        { this.renderedCardNumberField(mode, params, suggestions, inputProps) }\n      </div>\n    );\n  }\n}\n\nCardNumberField.propTypes = {\n  mode: PropTypes.string.isRequired,\n  handleChangeCardNumber: PropTypes.func.isRequired,\n  onAutoSuggestSelected: PropTypes.func.isRequired,\n  cardNumber: PropTypes.string.isRequired,\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired,\n  validInput: PropTypes.bool.isRequired,\n};\n\nexport default CardNumberField;\n"],"file":"CardNumberField.js"}