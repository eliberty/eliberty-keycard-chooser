{"version":3,"sources":["../../../src/components/DoubleMask/DoubleMask.jsx"],"names":["tabKeycardType","MaskHelper","DoubleMask","errorKey","localItemInfo","error","get","length","props","handleChangeCardNumber","bind","handleChangeAutoSuggestCardNumber","event","cardId","card","target","value","cardnumber","suggest","newValue","forEach","item","key","keycards","updateKeycardsMask","orderitem","changeCardNumber","index","className","validKeycard","aux","formatMessage","intl","errorLabel","id","defaultMessage","currentId","cardNumber","verifyKeycard","deleteKeyFieldsErrors","updateFieldsErrors","params","renderedErrorInputMessage","keycardTypes","map","renderedLabelTab","renderedSomeInputKeyCards","Component","propTypes","object","isRequired","func"],"mappings":"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","file":"DoubleMask.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Map } from 'immutable';\nimport { injectIntl, intlShape } from 'react-intl';\nimport CardNumberField from '../CardNumberField/CardNumberField';\nimport * as tabKeycardType from '../../constants/keycardsType';\nimport * as MaskHelper from '../../helpers/MaskHelper';\n\n/**\n * Double Mask\n */\nclass DoubleMask extends React.Component {\n  /**\n   * Display Error Message\n   * @param errorKey\n   * @param localItemInfo\n   * @returns {*}\n   */\n  static renderedErrorInputMessage(errorKey, localItemInfo) {\n    const error = localItemInfo.get('errors', new Map()).get(errorKey, '');\n\n    return error.length === 0\n      ? null\n      : <span className=\"errorInputKeyCard\">{error}</span>;\n  }\n\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.handleChangeCardNumber = this.handleChangeCardNumber.bind(this);\n    this.handleChangeAutoSuggestCardNumber = this.handleChangeAutoSuggestCardNumber.bind(this);\n  }\n\n  /**\n   * Change card number\n   * @param event\n   * @param cardId\n   */\n  handleChangeCardNumber(event, cardId, card) {\n    this.handleChangeAutoSuggestCardNumber(event.target.value, cardId, card, false);\n  }\n\n  /**\n   *\n   * @param cardnumber\n   * @param cardId\n   */\n  handleChangeAutoSuggestCardNumber(cardnumber, cardId, card, suggest = true) {\n    let newValue = '';\n\n    this.props.localItemInfo.get('keycardsMask').forEach((item, key) => {\n      if (key !== 'current' && key !== 'idCard' && key !== card) {\n        if (suggest) {\n          this.props.keycards.forEach((item, key) => {\n            if (item.get('shortnumber') === cardnumber || item.get('cardnumber') === cardnumber) {\n              newValue = card === 'sd' ? item.get('shortnumber') : item.get('cardnumber');\n            }\n          });\n          this.props.updateKeycardsMask(this.props.orderitem.get('id'), key, newValue);\n        } else {\n          this.props.updateKeycardsMask(this.props.orderitem.get('id'), key, newValue);\n        }\n      }\n    });\n\n    if (typeof cardnumber !== 'undefined') {\n      this.props.changeCardNumber(this.props.orderitem.get('id'), cardnumber);\n      this.props.updateKeycardsMask(this.props.orderitem.get('id'), card, cardnumber);\n    }\n  }\n\n\n  /**\n   * Display of the double input mask\n   * @param card\n   * @param index\n   * @param keycards\n   * @param params\n   * @returns {XML}\n   */\n  renderedSomeInputKeyCards(card, index) {\n    let className = 'tab-pane fade in';\n    let validKeycard = false;\n    const aux = `tabKeycardType[card]${index}`;\n    const errorKey = 'data.cardNumber';\n    const { formatMessage } = this.props.intl;\n    const errorLabel = formatMessage({ id: 'rp.checkout.customize.cardnumber.invalid', defaultMessage: 'invalid' });\n    const currentId = this.props.localItemInfo.get('id');\n    let cardNumber = this.props.localItemInfo.get('keycardsMask').get(card);\n\n    if (cardNumber === null) {\n      cardNumber = '';\n    }\n\n    if (index === this.props.localItemInfo.get('keycardsMask').get('idCard')) {\n      className = `${className} active`;\n\n      if (cardNumber !== '') {\n        validKeycard = MaskHelper.verifyKeycard(cardNumber, index, tabKeycardType[card]);\n        if (validKeycard) {\n          this.props.deleteKeyFieldsErrors(currentId, errorKey);\n        } else {\n          this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n        }\n      } else {\n        this.props.updateFieldsErrors(currentId, errorKey, errorLabel);\n      }\n\n      this.props.changeCardNumber(currentId, cardNumber);\n      this.props.updateKeycardsMask(currentId, 'current', card);\n    }\n\n    return (\n      <div className={className} id={aux} role=\"tabpanel\" key={index}>\n        <CardNumberField\n          key={index}\n          id={index}\n          mode={tabKeycardType[card]}\n          keycards={this.props.keycards}\n          handleChangeCardNumber={(event) => {\n            this.handleChangeCardNumber(event, index, card);\n          }}\n          onChange={(event) => {\n            this.handleChangeCardNumber(event, index, card);\n          }}\n          onAutoSuggestSelected={(cardnumber) => {\n            this.handleChangeAutoSuggestCardNumber(cardnumber, index, card);\n          }}\n          cardNumber={cardNumber}\n          value={cardNumber}\n          params={this.props.params}\n        />\n        { cardNumber === '' || validKeycard === false ? DoubleMask.renderedErrorInputMessage(errorKey, this.props.localItemInfo) : '' }\n      </div>\n    );\n  }\n\n\n  /**\n   * Display labels for inputs - select active input\n   * @param card\n   * @param index\n   * @returns {XML}\n   */\n  renderedLabelTab(card, index) {\n    const aux = `card${index}`;\n    let className = 'nav-item';\n\n    if (index === this.props.localItemInfo.get('keycardsMask').get('idCard')) {\n      className = `${className} active`;\n    }\n\n    return (\n      <li className={className} key={index}>\n        <a\n          className=\"nav-link text-center\"\n          data-toggle=\"tab\"\n          role=\"tab\"\n          href={aux}\n          onClick={() => {\n            this.props.updateKeycardsMask(this.props.localItemInfo.get('id'), 'idCard', index);\n          }}\n        >{card}</a>\n      </li>\n    );\n  }\n\n\n  render() {\n    const { keycardTypes } = this.props;\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs nav-justified responsive-tabs\" role=\"tablist\">\n          { keycardTypes.map((card, index) => (\n            this.renderedLabelTab(tabKeycardType[card], index)\n          )) }\n        </ul>\n        <div className=\"tab-content\">\n          {\n            keycardTypes.map((card, index) => (\n              this.renderedSomeInputKeyCards(card, index)\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nDoubleMask.propTypes = {\n  keycards: PropTypes.object.isRequired,\n  keycardTypes: PropTypes.object.isRequired, // keycards to display the tabs\n  params: PropTypes.object.isRequired, // generic params\n  localItemInfo: PropTypes.object.isRequired, // current local Item\n  orderitem: PropTypes.object.isRequired,\n  changeCardNumber: PropTypes.func.isRequired, // function to change cardnumber of item\n  updateKeycardsMask: PropTypes.func.isRequired, // function to update elements on a keycardsMask\n  deleteKeyFieldsErrors: PropTypes.func.isRequired, // function to delete key on fields errors\n  updateFieldsErrors: PropTypes.func.isRequired, // function to update fields errors,\n  intl: intlShape.isRequired, // for the internationalization\n};\n\nexport default injectIntl(DoubleMask);\n"]}