{"version":3,"sources":["../../../src/components/KeyCardArea/KeyCardArea.jsx"],"names":["tabKeycardType","KeyCardArea","props","state","checkYes","checkNo","idCard","cardNumberList","popoverOpen","handleChangeCardNumber","bind","handleChangeAutoSuggestCardNumber","toggle","onChangeCheck","setState","event","cardId","target","value","cardnumber","set","changeCardNumber","orderitem","get","card","index","aux","className","keycards","params","cardNumber","toUpperCase","keycardTypes","size","map","renderedLabelTab","renderedSomeInputKeyCards","renderedOneInputKeyCard","renderedListKeyCard","itemFieldsDefinition","popover","questionImageSvg","handleClickCheckYes","handleClickCheckNo","renderedContentCheckNo","renderedContentCheckYes","Component","propTypes","object","isRequired","func","intl"],"mappings":"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","file":"KeyCardArea.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Map } from 'immutable';\nimport { FormattedMessage, injectIntl, intlShape } from 'react-intl';\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap';\nimport CardNumberField from '../CardNumberField/CardNumberField';\nimport * as tabKeycardType from '../../constants/keycardsType';\n// import './keyCardArea.scss';\n\n/**\n * Keycard area\n */\nclass KeyCardArea extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkYes: false,\n      checkNo: false,\n      idCard: 0,\n      cardNumberList: new Map(),\n      popoverOpen: false,\n    };\n    //this.handleClickCheckYes = this.handleClickCheckYes.bind(this);\n    //this.handleClickCheckNo = this.handleClickCheckNo.bind(this);\n    this.handleChangeCardNumber = this.handleChangeCardNumber.bind(this);\n    this.handleChangeAutoSuggestCardNumber = this.handleChangeAutoSuggestCardNumber.bind(this);\n    this.toggle = this.toggle.bind(this);\n  }\n\n  handleClickCheckYes() {\n    this.props.onChangeCheck('yes');\n    this.setState({\n      checkYes: true,\n      checkNo: false,\n    });\n  }\n\n  handleClickCheckNo() {\n    this.props.onChangeCheck('no');\n    this.setState({\n      checkYes: false,\n      checkNo: true,\n    });\n  }\n\n  handleChangeCardNumber(event, cardId) {\n    this.handleChangeAutoSuggestCardNumber(event.target.value, cardId);\n  }\n\n  handleChangeAutoSuggestCardNumber(cardnumber, cardId) {\n    if (typeof cardnumber !== 'undefined') {\n      let cardNumberList = this.state.cardNumberList;\n\n      /*if (cardnumber.substr(0, 1) !== '_') {\n        cardNumberList = new Map();\n      }*/\n\n      cardNumberList = cardNumberList.set(cardId, cardnumber);\n      this.setState({ cardNumberList });\n      this.props.changeCardNumber(this.props.orderitem.get('id'), cardnumber);\n    }\n  }\n\n  toggle() {\n    this.setState({\n      popoverOpen: !this.state.popoverOpen\n    });\n  }\n\n  renderedContentCheckNo() {\n    return (this.state.checkNo\n        ?\n        (\n          <div className=\"msgCheckNo\">\n            <p>\n              <FormattedMessage id=\"rp.checkout.keycard.area.message.no.card\" defaultMessage=\"no card\" />\n            </p>\n          </div>\n        )\n        : ''\n    );\n  }\n\n  renderedLabelTab(card,index) {\n    const aux = `card${index}`;\n    let className = 'nav-item';\n\n    if (index === this.state.idCard) {\n      className = `${className} active`;\n    }\n\n    return (\n      <li className={className} key={index}>\n        <a\n          className=\"nav-link text-center\"\n          data-toggle=\"tab\"\n          role=\"tab\"\n          href={aux}\n          onClick={() => {\n            this.setState({\n              idCard: index,\n            });\n          }}\n        >{card}</a>\n      </li>\n    );\n  }\n\n  renderedSomeInputKeyCards(card, index, cardNumberList, keycards, params) {\n    const aux = `card${index}`;\n    let className = 'tab-pane fade in';\n    if (index === this.state.idCard) {\n      className = `${className} active`;\n    }\n    const cardNumber = cardNumberList.get(index, '');\n    return (\n      <div className={className} id={aux} role=\"tabpanel\" key={index}>\n        <CardNumberField\n          id={index}\n          mode={card}\n          keycards={keycards}\n          handleChangeCardNumber={(event) => {\n            this.handleChangeCardNumber(event, index);\n          }}\n          onChange={(event) => {\n            this.handleChangeCardNumber(event, index);\n          }}\n          onAutoSuggestSelected={(cardnumber) => {\n            this.handleChangeAutoSuggestCardNumber(cardnumber, index);\n          }}\n          cardNumber={cardNumber.toUpperCase()}\n          value={cardNumber}\n          params={params}\n        />\n      </div>\n    );\n  }\n\n  renderedOneInputKeyCard(card, index, cardNumberList, keycards, params) {\n    const cardNumber = cardNumberList.get(index, '');\n    return (\n      <CardNumberField\n        id={index}\n        mode={card}\n        keycards={keycards}\n        handleChangeCardNumber={(event) => {\n          this.handleChangeCardNumber(event, index);\n        }}\n        onChange={(event) => {\n          this.handleChangeCardNumber(event, index);\n        }}\n        onAutoSuggestSelected={(cardnumber) => {\n          this.handleChangeAutoSuggestCardNumber(cardnumber, index);\n        }}\n        cardNumber={cardNumber.toUpperCase()}\n        value={cardNumber}\n        params={params}\n      />\n    );\n  }\n\n  renderedListKeyCard(keycardTypes, cardNumberList, keycards, params) {\n\n    return (keycardTypes.size > 1\n        ?\n        (\n          <div>\n            <ul className=\"nav nav-tabs nav-justified responsive-tabs\" role=\"tablist\">\n              {\n                keycardTypes.map((card,index) => (this.renderedLabelTab(tabKeycardType[card],index)))\n              }\n            </ul>\n            <div className=\"tab-content\">\n              {\n                keycardTypes.map((card,index) => (\n                  this.renderedSomeInputKeyCards(tabKeycardType[card], index, cardNumberList, keycards, params)))\n              }\n            </div>\n          </div>\n        )\n        :\n        (\n          keycardTypes.map((card,index) => (\n            this.renderedOneInputKeyCard(tabKeycardType[card], index, cardNumberList, keycards, params)))\n        )\n    );\n  }\n\n  renderedContentCheckYes(keycardTypes, cardNumberList, keycards, params) {\n    return (this.state.checkYes\n        ? (\n          <div className=\"msgCheckYes\">\n            { this.renderedListKeyCard(keycardTypes, cardNumberList, keycards, params) }\n            <a href=\"#\" className=\"infoKeyCard\">\n              <span><FormattedMessage id=\"rp.checkout.keycard.area.link.number.card\" defaultMessage=\"number card\" /></span>\n            </a>\n          </div>\n        ) : ''\n    );\n  }\n\n  questionImageSvg() {\n    return (\n      <svg x=\"0px\"\n           y=\"0px\"\n           width=\"15px\"\n           height=\"15px\"\n           viewBox=\"0 0 612 612\"\n           fill=\"#B8B8B8\"\n      >\n        <g>\n          <g>\n            <path d=\"M230.724,181.208c-2.393,2.587-3.95,4.256-5.119,5.508C227.775,184.379,230.724,181.208,230.724,181.208z\"/>\n            <path d=\"M336.962,200.875c7.956,9.792,11.906,21.337,11.906,34.634c0,9.514-2.727,18.666-8.151,27.512\n              c-2.977,5.007-6.898,9.848-11.795,14.465l-16.301,16.107c-15.634,15.356-25.732,28.958-30.35,40.865\n              c-4.618,11.878-6.927,27.54-6.927,46.957h36.275c0-17.108,1.947-30.044,5.814-38.807c3.866-8.763,12.323-19.444,25.37-32.102\n              c17.942-17.387,29.849-30.572,35.746-39.53s8.874-20.641,8.874-35.051c0-23.756-8.039-43.285-24.146-58.585\n              c-16.106-15.3-37.526-22.922-64.288-22.922c-28.931,0-51.686,8.929-68.266,26.789s-24.87,41.449-24.87,70.797h36.275\n              c0.667-17.665,3.478-31.184,8.346-40.559c8.679-16.83,24.369-25.259,47.068-25.259\n              C315.875,186.187,329.033,191.083,336.962,200.875z\"/>\n            <path d=\"M612,306C612,137.004,474.995,0,306,0C137.004,0,0,137.004,0,306c0,168.995,137.004,306,306,306\n              C474.995,612,612,474.995,612,306z M27.818,306C27.818,152.36,152.36,27.818,306,27.818S584.182,152.36,584.182,306\n              S459.64,584.182,306,584.182S27.818,459.64,27.818,306z\"/>\n            <rect x=\"274.51\" y=\"415.214\" width=\"40.559\" height=\"42.367\"/>\n          </g>\n        </g>\n      </svg>\n    );\n  }\n\n  render() {\n    const { keycardTypes, keycards, params, itemFieldsDefinition, popover } = this.props;\n    const { cardNumberList } = this.state;\n\n    return (\n      <div>\n        <div>\n          <p><FormattedMessage id=\"rp.checkout.keycard.area.question\" defaultMessage=\"I have a card\" /></p>\n          <div className=\"contentPopover\">\n            <Button type=\"button\" id=\"Popover1\" className=\"contentQuestion\" onClick={this.toggle}>\n              {this.questionImageSvg()}\n            </Button>\n            <Popover placement=\"bottom\" isOpen={this.state.popoverOpen} target=\"Popover1\" toggle={this.toggle}>\n              <PopoverHeader className=\"popover-title\">\n                {popover.get('title')}\n              </PopoverHeader>\n              <PopoverBody className=\"popover-content\">\n                <div className=\"row\">\n                  <div className=\"col-xs-4\">\n                    <img className=\"img-responsive\" src={popover.get('image')} alt=\"keycardinfo\" />\n                  </div>\n                  <div className=\"col-xs-8\">\n                    {popover.get('content')}\n                  </div>\n                </div>\n              </PopoverBody>\n            </Popover>\n          </div>\n          <form>\n            <div className=\"form-group keyCardAreaForm\">\n              {itemFieldsDefinition.get('keycard').get('forceReloading') === false ?\n                (\n                  <div>\n                    <input type=\"radio\" id={`inputCheckYes${this.props.orderitem.get('id')}`} name=\"card\" value=\"yes\" onChange={() => { this.handleClickCheckYes(); }} />\n                    <label htmlFor={`inputCheckYes${this.props.orderitem.get('id')}`} className=\"keycardChoice\"><FormattedMessage id=\"rp.checkout.keycard.area.reponse.yes\" defaultMessage=\"yes\" /></label>\n                    <input type=\"radio\" id={`inputCheckNo${this.props.orderitem.get('id')}`} name=\"card\" value=\"non\" onChange={() => {  this.handleClickCheckNo(); }} />\n                    <label htmlFor={`inputCheckNo${this.props.orderitem.get('id')}`} className=\"keycardChoice\"><FormattedMessage id=\"rp.checkout.keycard.area.reponse.no\" defaultMessage=\"no\" /></label>\n                  </div>\n                )\n                : (\n                  <div className=\"msgCheckYes\">\n                    { this.renderedListKeyCard(keycardTypes, cardNumberList, keycards, params) }\n                    <a href=\"#\" className=\"infoKeyCard\">\n                      <span><FormattedMessage id=\"rp.checkout.keycard.area.link.number.card\" defaultMessage=\"number card\" /></span>\n                    </a>\n                  </div>\n                )\n              }\n\n              { this.renderedContentCheckNo() }\n              { this.renderedContentCheckYes(keycardTypes, cardNumberList, keycards, params) }\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nKeyCardArea.propTypes = {\n  keycardTypes: PropTypes.object.isRequired, // keycards to display the tabs\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired, // generic params\n  orderitem: PropTypes.object.isRequired,\n  itemFieldsDefinition: PropTypes.object.isRequired,\n  changeCardNumber: PropTypes.func.isRequired, // function to change cardnumber of item\n  intl: intlShape.isRequired, // for the internationalization\n  onChangeCheck: PropTypes.func.isRequired,\n  popover: PropTypes.object.isRequired,\n};\n\nexport default injectIntl(KeyCardArea);\n"]}