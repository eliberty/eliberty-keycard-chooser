{"version":3,"sources":["../../../src/components/CardNumberField/CardNumberField.jsx"],"names":["AutoSuggestionHelper","tabKeycardType","configs","SKIDATA","placeholder","mask","pipe","value","slice","indexesOfPipedChars","TEAMAXESS","ALFI","SWISSPASS","CardNumberField","props","onSuggestionsFetchRequested","bind","onSuggestionsClearRequested","onSuggestionSelected","state","suggestions","cardType","listKeycards","getSuggestions","keycards","toJS","params","mode","forEach","keycard","setState","event","suggestion","cardnumber","shortnumber","onAutoSuggestSelected","inputProps","get","getSuggestionValue","renderSuggestion","renderInputComponent","handleChangeCardNumber","cardNumber","validInput","id","className","onChange","renderedCardNumberField","Component","propTypes","string","isRequired","func","object","bool"],"mappings":"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","file":"CardNumberField.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport Autosuggest from 'react-autosuggest';\nimport * as AutoSuggestionHelper from '../../helpers/AutoSuggest/MaskedInputAutoSuggestHelper';\nimport * as tabKeycardType from '../../constants/keycardsType';\n\nconst configs = {\n  SKIDATA: {\n    placeholder: '00-0000 0000 0000 0000 0000-0',\n    mask: [\n      /[0-3]/, /\\d/, '-',\n      /\\d/, /\\d/, /\\d/, /\\d/, ' ',\n      /\\d/, /\\d/, /\\d/, /\\d/, ' ',\n      /\\d/, /\\d/, /\\d/, /\\d/, ' ',\n      /\\d/, /\\d/, /\\d/, /\\d/, ' ',\n      /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/,\n    ],\n    pipe: (value => (value[0] === '1' ? { value: `01${value.slice(2)}`, indexesOfPipedChars: [0] } : value)),\n  },\n  TEAMAXESS: {\n    placeholder: 'XXXXXXXX-XXX-XXX',\n    mask: [\n      /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[a-zA-Z0-9]/,\n      /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[Aa-zA-Z0-9]/, '-',\n      /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, '-',\n      /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, /[a-zA-Z0-9]/,\n    ],\n    pipe: value => (value[0] === '1' ? { value: `01${value.slice(2)}`, indexesOfPipedChars: [0] } : value),\n  },\n  ALFI: {\n    placeholder: '_____-_____-____',\n    mask: [\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-',\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-',\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/,\n    ],\n  },\n  'GO-SKI': {\n    placeholder: '000000000-0',\n    mask: [\n      /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-',\n      /[0-9]/,\n    ],\n  },\n  SWISSPASS: {\n    placeholder: 'X00-000-000-000',\n    mask: [\n      /[S]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, /[0-9]/, '-',\n      /[0-9]/, /[0-9]/, /[0-9]/\n    ],\n  },\n};\n\n/**\n * Card Number Field\n */\nclass CardNumberField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSuggestionsFetchRequested = this.onSuggestionsFetchRequested.bind(this);\n    this.onSuggestionsClearRequested = this.onSuggestionsClearRequested.bind(this);\n    this.onSuggestionSelected = this.onSuggestionSelected.bind(this);\n\n    this.state = {\n      suggestions: [],\n    };\n  }\n\n  /**\n   *\n   * @param value\n   */\n  onSuggestionsFetchRequested({ value }) {\n    const cardType = 'open';\n    const listKeycards = AutoSuggestionHelper.getSuggestions(\n      value,\n      this.props.keycards.toJS(),\n      this.props.params,\n      this.props.mode === tabKeycardType[cardType], // Define if we are on shortnumber using mode\n    );\n    // Add element type card for display suggestions\n    listKeycards.forEach((keycard) => {\n      keycard.mode = this.props.mode;\n    });\n\n    this.setState({\n      suggestions: listKeycards,\n    });\n  }\n\n  onSuggestionsClearRequested() {\n    this.setState({\n      suggestions: [],\n    });\n  }\n\n  /**\n   *\n   * @param event\n   * @param suggestion\n   */\n  onSuggestionSelected(event, { suggestion }) {\n    const cardType = 'open';\n    const cardnumber = suggestion.mode === tabKeycardType[cardType]\n      ? suggestion.shortnumber\n      : suggestion.cardnumber;\n    this.props.onAutoSuggestSelected(cardnumber);\n  }\n\n  /**\n   *\n   * @param mode\n   * @param params\n   * @param suggestions\n   * @param inputProps\n   * @returns {XML}\n   */\n  renderedCardNumberField(mode, params, suggestions, inputProps) {\n    return (mode !== 'OPEN' && params.get('displayKeycardAutoComplete', false) === true\n        ? (\n          <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            onSuggestionSelected={this.onSuggestionSelected}\n            shouldRenderSuggestions={() => true}\n            getSuggestionValue={AutoSuggestionHelper.getSuggestionValue}\n            renderSuggestion={AutoSuggestionHelper.renderSuggestion}\n            inputProps={inputProps}\n            renderInputComponent={AutoSuggestionHelper.renderInputComponent}\n            focusInputOnSuggestionClick={false}\n          />)\n        : <MaskedInput {...inputProps} />\n    );\n  }\n\n  render() {\n    const { suggestions } = this.state;\n    const { mode, handleChangeCardNumber, cardNumber, params, validInput } = this.props;\n    const inputProps = {\n      ...configs[mode],\n      id: cardNumber,\n      className: validInput === true ? 'form-control text-left' : 'form-control text-left inputError',\n      onChange: handleChangeCardNumber,\n      value: cardNumber,\n    };\n\n    return (\n      <div>\n        { this.renderedCardNumberField(mode, params, suggestions, inputProps) }\n      </div>\n    );\n  }\n}\n\nCardNumberField.propTypes = {\n  mode: PropTypes.string.isRequired,\n  handleChangeCardNumber: PropTypes.func.isRequired,\n  onAutoSuggestSelected: PropTypes.func.isRequired,\n  cardNumber: PropTypes.string.isRequired,\n  keycards: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired,\n  validInput: PropTypes.bool.isRequired,\n};\n\nexport default CardNumberField;\n"]}